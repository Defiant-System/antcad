if(Number.EPSILON===undefined){Number.EPSILON=Math.pow(2,-52)}if(Number.isInteger===undefined){Number.isInteger=function(e){return typeof e==="number"&&isFinite(e)&&Math.floor(e)===e}}if(Math.sign===undefined){Math.sign=function(e){return e<0?-1:e>0?1:+e}}if("name"in Function.prototype===false){Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}})}if(Object.assign===undefined){Object.assign=function(e){if(e===undefined||e===null){throw new TypeError("Cannot convert undefined or null to object")}const t=Object(e);for(let e=1;e<arguments.length;e++){const n=arguments[e];if(n!==undefined&&n!==null){for(const e in n){if(Object.prototype.hasOwnProperty.call(n,e)){t[e]=n[e]}}}}return t}}const REVISION="121dev";const MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};const TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};const CullFaceNone=0;const CullFaceBack=1;const CullFaceFront=2;const CullFaceFrontBack=3;const BasicShadowMap=0;const PCFShadowMap=1;const PCFSoftShadowMap=2;const VSMShadowMap=3;const FrontSide=0;const BackSide=1;const DoubleSide=2;const FlatShading=1;const SmoothShading=2;const NoBlending=0;const NormalBlending=1;const AdditiveBlending=2;const SubtractiveBlending=3;const MultiplyBlending=4;const CustomBlending=5;const AddEquation=100;const SubtractEquation=101;const ReverseSubtractEquation=102;const MinEquation=103;const MaxEquation=104;const ZeroFactor=200;const OneFactor=201;const SrcColorFactor=202;const OneMinusSrcColorFactor=203;const SrcAlphaFactor=204;const OneMinusSrcAlphaFactor=205;const DstAlphaFactor=206;const OneMinusDstAlphaFactor=207;const DstColorFactor=208;const OneMinusDstColorFactor=209;const SrcAlphaSaturateFactor=210;const NeverDepth=0;const AlwaysDepth=1;const LessDepth=2;const LessEqualDepth=3;const EqualDepth=4;const GreaterEqualDepth=5;const GreaterDepth=6;const NotEqualDepth=7;const MultiplyOperation=0;const MixOperation=1;const AddOperation=2;const NoToneMapping=0;const LinearToneMapping=1;const ReinhardToneMapping=2;const CineonToneMapping=3;const ACESFilmicToneMapping=4;const CustomToneMapping=5;const UVMapping=300;const CubeReflectionMapping=301;const CubeRefractionMapping=302;const EquirectangularReflectionMapping=303;const EquirectangularRefractionMapping=304;const CubeUVReflectionMapping=306;const CubeUVRefractionMapping=307;const RepeatWrapping=1e3;const ClampToEdgeWrapping=1001;const MirroredRepeatWrapping=1002;const NearestFilter=1003;const NearestMipmapNearestFilter=1004;const NearestMipMapNearestFilter=1004;const NearestMipmapLinearFilter=1005;const NearestMipMapLinearFilter=1005;const LinearFilter=1006;const LinearMipmapNearestFilter=1007;const LinearMipMapNearestFilter=1007;const LinearMipmapLinearFilter=1008;const LinearMipMapLinearFilter=1008;const UnsignedByteType=1009;const ByteType=1010;const ShortType=1011;const UnsignedShortType=1012;const IntType=1013;const UnsignedIntType=1014;const FloatType=1015;const HalfFloatType=1016;const UnsignedShort4444Type=1017;const UnsignedShort5551Type=1018;const UnsignedShort565Type=1019;const UnsignedInt248Type=1020;const AlphaFormat=1021;const RGBFormat=1022;const RGBAFormat=1023;const LuminanceFormat=1024;const LuminanceAlphaFormat=1025;const RGBEFormat=RGBAFormat;const DepthFormat=1026;const DepthStencilFormat=1027;const RedFormat=1028;const RedIntegerFormat=1029;const RGFormat=1030;const RGIntegerFormat=1031;const RGBIntegerFormat=1032;const RGBAIntegerFormat=1033;const RGB_S3TC_DXT1_Format=33776;const RGBA_S3TC_DXT1_Format=33777;const RGBA_S3TC_DXT3_Format=33778;const RGBA_S3TC_DXT5_Format=33779;const RGB_PVRTC_4BPPV1_Format=35840;const RGB_PVRTC_2BPPV1_Format=35841;const RGBA_PVRTC_4BPPV1_Format=35842;const RGBA_PVRTC_2BPPV1_Format=35843;const RGB_ETC1_Format=36196;const RGB_ETC2_Format=37492;const RGBA_ETC2_EAC_Format=37496;const RGBA_ASTC_4x4_Format=37808;const RGBA_ASTC_5x4_Format=37809;const RGBA_ASTC_5x5_Format=37810;const RGBA_ASTC_6x5_Format=37811;const RGBA_ASTC_6x6_Format=37812;const RGBA_ASTC_8x5_Format=37813;const RGBA_ASTC_8x6_Format=37814;const RGBA_ASTC_8x8_Format=37815;const RGBA_ASTC_10x5_Format=37816;const RGBA_ASTC_10x6_Format=37817;const RGBA_ASTC_10x8_Format=37818;const RGBA_ASTC_10x10_Format=37819;const RGBA_ASTC_12x10_Format=37820;const RGBA_ASTC_12x12_Format=37821;const RGBA_BPTC_Format=36492;const SRGB8_ALPHA8_ASTC_4x4_Format=37840;const SRGB8_ALPHA8_ASTC_5x4_Format=37841;const SRGB8_ALPHA8_ASTC_5x5_Format=37842;const SRGB8_ALPHA8_ASTC_6x5_Format=37843;const SRGB8_ALPHA8_ASTC_6x6_Format=37844;const SRGB8_ALPHA8_ASTC_8x5_Format=37845;const SRGB8_ALPHA8_ASTC_8x6_Format=37846;const SRGB8_ALPHA8_ASTC_8x8_Format=37847;const SRGB8_ALPHA8_ASTC_10x5_Format=37848;const SRGB8_ALPHA8_ASTC_10x6_Format=37849;const SRGB8_ALPHA8_ASTC_10x8_Format=37850;const SRGB8_ALPHA8_ASTC_10x10_Format=37851;const SRGB8_ALPHA8_ASTC_12x10_Format=37852;const SRGB8_ALPHA8_ASTC_12x12_Format=37853;const LoopOnce=2200;const LoopRepeat=2201;const LoopPingPong=2202;const InterpolateDiscrete=2300;const InterpolateLinear=2301;const InterpolateSmooth=2302;const ZeroCurvatureEnding=2400;const ZeroSlopeEnding=2401;const WrapAroundEnding=2402;const NormalAnimationBlendMode=2500;const AdditiveAnimationBlendMode=2501;const TrianglesDrawMode=0;const TriangleStripDrawMode=1;const TriangleFanDrawMode=2;const LinearEncoding=3e3;const sRGBEncoding=3001;const GammaEncoding=3007;const RGBEEncoding=3002;const LogLuvEncoding=3003;const RGBM7Encoding=3004;const RGBM16Encoding=3005;const RGBDEncoding=3006;const BasicDepthPacking=3200;const RGBADepthPacking=3201;const TangentSpaceNormalMap=0;const ObjectSpaceNormalMap=1;const ZeroStencilOp=0;const KeepStencilOp=7680;const ReplaceStencilOp=7681;const IncrementStencilOp=7682;const DecrementStencilOp=7683;const IncrementWrapStencilOp=34055;const DecrementWrapStencilOp=34056;const InvertStencilOp=5386;const NeverStencilFunc=512;const LessStencilFunc=513;const EqualStencilFunc=514;const LessEqualStencilFunc=515;const GreaterStencilFunc=516;const NotEqualStencilFunc=517;const GreaterEqualStencilFunc=518;const AlwaysStencilFunc=519;const StaticDrawUsage=35044;const DynamicDrawUsage=35048;const StreamDrawUsage=35040;const StaticReadUsage=35045;const DynamicReadUsage=35049;const StreamReadUsage=35041;const StaticCopyUsage=35046;const DynamicCopyUsage=35050;const StreamCopyUsage=35042;const GLSL1="100";const GLSL3="300 es";function EventDispatcher(){}Object.assign(EventDispatcher.prototype,{addEventListener:function(e,t){if(this._listeners===undefined)this._listeners={};const n=this._listeners;if(n[e]===undefined){n[e]=[]}if(n[e].indexOf(t)===-1){n[e].push(t)}},hasEventListener:function(e,t){if(this._listeners===undefined)return false;const n=this._listeners;return n[e]!==undefined&&n[e].indexOf(t)!==-1},removeEventListener:function(e,t){if(this._listeners===undefined)return;const n=this._listeners;const r=n[e];if(r!==undefined){const e=r.indexOf(t);if(e!==-1){r.splice(e,1)}}},dispatchEvent:function(e){if(this._listeners===undefined)return;const t=this._listeners;const n=t[e.type];if(n!==undefined){e.target=this;const t=n.slice(0);for(let n=0,r=t.length;n<r;n++){t[n].call(this,e)}}}});const _lut=[];for(let e=0;e<256;e++){_lut[e]=(e<16?"0":"")+e.toString(16)}let _seed=1234567;const MathUtils={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){const e=Math.random()*4294967295|0;const t=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const r=Math.random()*4294967295|0;const i=_lut[e&255]+_lut[e>>8&255]+_lut[e>>16&255]+_lut[e>>24&255]+"-"+_lut[t&255]+_lut[t>>8&255]+"-"+_lut[t>>16&15|64]+_lut[t>>24&255]+"-"+_lut[n&63|128]+_lut[n>>8&255]+"-"+_lut[n>>16&255]+_lut[n>>24&255]+_lut[r&255]+_lut[r>>8&255]+_lut[r>>16&255]+_lut[r>>24&255];return i.toUpperCase()},clamp:function(e,t,n){return Math.max(t,Math.min(n,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,n,r,i){return r+(e-t)*(i-r)/(n-t)},lerp:function(e,t,n){return(1-n)*e+n*t},smoothstep:function(e,t,n){if(e<=t)return 0;if(e>=n)return 1;e=(e-t)/(n-t);return e*e*(3-2*e)},smootherstep:function(e,t,n){if(e<=t)return 0;if(e>=n)return 1;e=(e-t)/(n-t);return e*e*e*(e*(e*6-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},seededRandom:function(e){if(e!==undefined)_seed=e%2147483647;_seed=_seed*16807%2147483647;return(_seed-1)/2147483646},degToRad:function(e){return e*MathUtils.DEG2RAD},radToDeg:function(e){return e*MathUtils.RAD2DEG},isPowerOfTwo:function(e){return(e&e-1)===0&&e!==0},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))},setQuaternionFromProperEuler:function(e,t,n,r,i){const a=Math.cos;const o=Math.sin;const s=a(n/2);const c=o(n/2);const l=a((t+r)/2);const u=o((t+r)/2);const h=a((t-r)/2);const f=o((t-r)/2);const d=a((r-t)/2);const p=o((r-t)/2);switch(i){case"XYX":e.set(s*u,c*h,c*f,s*l);break;case"YZY":e.set(c*f,s*u,c*h,s*l);break;case"ZXZ":e.set(c*h,c*f,s*u,s*l);break;case"XZX":e.set(s*u,c*p,c*d,s*l);break;case"YXY":e.set(c*d,s*u,c*p,s*l);break;case"ZYZ":e.set(c*p,c*d,s*u,s*l);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}};class Vector2{constructor(e=0,t=0){Object.defineProperty(this,"isVector2",{value:true});this.x=e;this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){this.x=e;this.y=t;return this}setScalar(e){this.x=e;this.y=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){this.x=e.x;this.y=e.y;return this}add(e,t){if(t!==undefined){console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(e,t)}this.x+=e.x;this.y+=e.y;return this}addScalar(e){this.x+=e;this.y+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;return this}sub(e,t){if(t!==undefined){console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(e,t)}this.x-=e.x;this.y-=e.y;return this}subScalar(e){this.x-=e;this.y-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;return this}multiply(e){this.x*=e.x;this.y*=e.y;return this}multiplyScalar(e){this.x*=e;this.y*=e;return this}divide(e){this.x/=e.x;this.y/=e.y;return this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y;const r=e.elements;this.x=r[0]*t+r[3]*n+r[6];this.y=r[1]*t+r[4]*n+r[7];return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;return this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t){if(t===undefined)t=0;this.x=e[t];this.y=e[t+1];return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;e[t]=this.x;e[t+1]=this.y;return e}fromBufferAttribute(e,t,n){if(n!==undefined){console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().")}this.x=e.getX(t);this.y=e.getY(t);return this}rotateAround(e,t){const n=Math.cos(t),r=Math.sin(t);const i=this.x-e.x;const a=this.y-e.y;this.x=i*n-a*r+e.x;this.y=i*r+a*n+e.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}}class Matrix3{constructor(){Object.defineProperty(this,"isMatrix3",{value:true});this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}}set(e,t,n,r,i,a,o,s,c){const l=this.elements;l[0]=e;l[1]=r;l[2]=o;l[3]=t;l[4]=i;l[5]=s;l[6]=n;l[7]=a;l[8]=c;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}clone(){return(new this.constructor).fromArray(this.elements)}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];return this}extractBasis(e,t,n){e.setFromMatrix3Column(this,0);t.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(e){const t=e.elements;this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]);return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const r=t.elements;const i=this.elements;const a=n[0],o=n[3],s=n[6];const c=n[1],l=n[4],u=n[7];const h=n[2],f=n[5],d=n[8];const p=r[0],m=r[3],g=r[6];const y=r[1],v=r[4],_=r[7];const x=r[2],b=r[5],M=r[8];i[0]=a*p+o*y+s*x;i[3]=a*m+o*v+s*b;i[6]=a*g+o*_+s*M;i[1]=c*p+l*y+u*x;i[4]=c*m+l*v+u*b;i[7]=c*g+l*_+u*M;i[2]=h*p+f*y+d*x;i[5]=h*m+f*v+d*b;i[8]=h*g+f*_+d*M;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[3]*=e;t[6]*=e;t[1]*=e;t[4]*=e;t[7]*=e;t[2]*=e;t[5]*=e;t[8]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[1],r=e[2],i=e[3],a=e[4],o=e[5],s=e[6],c=e[7],l=e[8];return t*a*l-t*o*c-n*i*l+n*o*s+r*i*c-r*a*s}getInverse(e,t){if(t!==undefined){console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.")}const n=e.elements,r=this.elements,i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],l=n[5],u=n[6],h=n[7],f=n[8],d=f*c-l*h,p=l*u-f*s,m=h*s-c*u,g=i*d+a*p+o*m;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const y=1/g;r[0]=d*y;r[1]=(o*h-f*a)*y;r[2]=(l*a-o*c)*y;r[3]=p*y;r[4]=(f*i-o*u)*y;r[5]=(o*s-l*i)*y;r[6]=m*y;r[7]=(a*u-h*i)*y;r[8]=(c*i-a*s)*y;return this}transpose(){let e;const t=this.elements;e=t[1];t[1]=t[3];t[3]=e;e=t[2];t[2]=t[6];t[6]=e;e=t[5];t[5]=t[7];t[7]=e;return this}getNormalMatrix(e){return this.setFromMatrix4(e).getInverse(this).transpose()}transposeIntoArray(e){const t=this.elements;e[0]=t[0];e[1]=t[3];e[2]=t[6];e[3]=t[1];e[4]=t[4];e[5]=t[7];e[6]=t[2];e[7]=t[5];e[8]=t[8];return this}setUvTransform(e,t,n,r,i,a,o){const s=Math.cos(i);const c=Math.sin(i);this.set(n*s,n*c,-n*(s*a+c*o)+a+e,-r*c,r*s,-r*(-c*a+s*o)+o+t,0,0,1)}scale(e,t){const n=this.elements;n[0]*=e;n[3]*=e;n[6]*=e;n[1]*=t;n[4]*=t;n[7]*=t;return this}rotate(e){const t=Math.cos(e);const n=Math.sin(e);const r=this.elements;const i=r[0],a=r[3],o=r[6];const s=r[1],c=r[4],l=r[7];r[0]=t*i+n*s;r[3]=t*a+n*c;r[6]=t*o+n*l;r[1]=-n*i+t*s;r[4]=-n*a+t*c;r[7]=-n*o+t*l;return this}translate(e,t){const n=this.elements;n[0]+=e*n[2];n[3]+=e*n[5];n[6]+=e*n[8];n[1]+=t*n[2];n[4]+=t*n[5];n[7]+=t*n[8];return this}equals(e){const t=this.elements;const n=e.elements;for(let e=0;e<9;e++){if(t[e]!==n[e])return false}return true}fromArray(e,t){if(t===undefined)t=0;for(let n=0;n<9;n++){this.elements[n]=e[n+t]}return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];return e}}let _canvas;const ImageUtils={getDataURL:function(e){if(/^data:/i.test(e.src)){return e.src}if(typeof HTMLCanvasElement=="undefined"){return e.src}let t;if(e instanceof HTMLCanvasElement){t=e}else{if(_canvas===undefined)_canvas=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");_canvas.width=e.width;_canvas.height=e.height;const n=_canvas.getContext("2d");if(e instanceof ImageData){n.putImageData(e,0,0)}else{n.drawImage(e,0,0,e.width,e.height)}t=_canvas}if(t.width>2048||t.height>2048){return t.toDataURL("image/jpeg",.6)}else{return t.toDataURL("image/png")}}};let textureId=0;function Texture(e,t,n,r,i,a,o,s,c,l){Object.defineProperty(this,"id",{value:textureId++});this.uuid=MathUtils.generateUUID();this.name="";this.image=e!==undefined?e:Texture.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=t!==undefined?t:Texture.DEFAULT_MAPPING;this.wrapS=n!==undefined?n:ClampToEdgeWrapping;this.wrapT=r!==undefined?r:ClampToEdgeWrapping;this.magFilter=i!==undefined?i:LinearFilter;this.minFilter=a!==undefined?a:LinearMipmapLinearFilter;this.anisotropy=c!==undefined?c:1;this.format=o!==undefined?o:RGBAFormat;this.internalFormat=null;this.type=s!==undefined?s:UnsignedByteType;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;this.encoding=l!==undefined?l:LinearEncoding;this.version=0;this.onUpdate=null}Texture.DEFAULT_IMAGE=undefined;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Texture,isTexture:true,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name;this.image=e.image;this.mipmaps=e.mipmaps.slice(0);this.mapping=e.mapping;this.wrapS=e.wrapS;this.wrapT=e.wrapT;this.magFilter=e.magFilter;this.minFilter=e.minFilter;this.anisotropy=e.anisotropy;this.format=e.format;this.internalFormat=e.internalFormat;this.type=e.type;this.offset.copy(e.offset);this.repeat.copy(e.repeat);this.center.copy(e.center);this.rotation=e.rotation;this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrix.copy(e.matrix);this.generateMipmaps=e.generateMipmaps;this.premultiplyAlpha=e.premultiplyAlpha;this.flipY=e.flipY;this.unpackAlignment=e.unpackAlignment;this.encoding=e.encoding;return this},toJSON:function(e){const t=e===undefined||typeof e==="string";if(!t&&e.textures[this.uuid]!==undefined){return e.textures[this.uuid]}const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==undefined){const r=this.image;if(r.uuid===undefined){r.uuid=MathUtils.generateUUID()}if(!t&&e.images[r.uuid]===undefined){let t;if(Array.isArray(r)){t=[];for(let e=0,n=r.length;e<n;e++){t.push(ImageUtils.getDataURL(r[e]))}}else{t=ImageUtils.getDataURL(r)}e.images[r.uuid]={uuid:r.uuid,url:t}}n.image=r.uuid}if(!t){e.textures[this.uuid]=n}return n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(this.mapping!==UVMapping)return e;e.applyMatrix3(this.matrix);if(e.x<0||e.x>1){switch(this.wrapS){case RepeatWrapping:e.x=e.x-Math.floor(e.x);break;case ClampToEdgeWrapping:e.x=e.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(e.x)%2)===1){e.x=Math.ceil(e.x)-e.x}else{e.x=e.x-Math.floor(e.x)}break}}if(e.y<0||e.y>1){switch(this.wrapT){case RepeatWrapping:e.y=e.y-Math.floor(e.y);break;case ClampToEdgeWrapping:e.y=e.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(e.y)%2)===1){e.y=Math.ceil(e.y)-e.y}else{e.y=e.y-Math.floor(e.y)}break}}if(this.flipY){e.y=1-e.y}return e}});Object.defineProperty(Texture.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});class Vector4{constructor(e=0,t=0,n=0,r=1){Object.defineProperty(this,"isVector4",{value:true});this.x=e;this.y=t;this.z=n;this.w=r}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,r){this.x=e;this.y=t;this.z=n;this.w=r;return this}setScalar(e){this.x=e;this.y=e;this.z=e;this.w=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setW(e){this.w=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;this.w=e.w!==undefined?e.w:1;return this}add(e,t){if(t!==undefined){console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(e,t)}this.x+=e.x;this.y+=e.y;this.z+=e.z;this.w+=e.w;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;this.w+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;this.w=e.w+t.w;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;this.w+=e.w*t;return this}sub(e,t){if(t!==undefined){console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(e,t)}this.x-=e.x;this.y-=e.y;this.z-=e.z;this.w-=e.w;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;this.w-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;this.w=e.w-t.w;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;this.w*=e;return this}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,i=this.w;const a=e.elements;this.x=a[0]*t+a[4]*n+a[8]*r+a[12]*i;this.y=a[1]*t+a[5]*n+a[9]*r+a[13]*i;this.z=a[2]*t+a[6]*n+a[10]*r+a[14]*i;this.w=a[3]*t+a[7]*n+a[11]*r+a[15]*i;return this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);if(t<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=e.x/t;this.y=e.y/t;this.z=e.z/t}return this}setAxisAngleFromRotationMatrix(e){let t,n,r,i;const a=.01,o=.1,s=e.elements,c=s[0],l=s[4],u=s[8],h=s[1],f=s[5],d=s[9],p=s[2],m=s[6],g=s[10];if(Math.abs(l-h)<a&&Math.abs(u-p)<a&&Math.abs(d-m)<a){if(Math.abs(l+h)<o&&Math.abs(u+p)<o&&Math.abs(d+m)<o&&Math.abs(c+f+g-3)<o){this.set(1,0,0,0);return this}t=Math.PI;const e=(c+1)/2;const s=(f+1)/2;const y=(g+1)/2;const v=(l+h)/4;const _=(u+p)/4;const x=(d+m)/4;if(e>s&&e>y){if(e<a){n=0;r=.707106781;i=.707106781}else{n=Math.sqrt(e);r=v/n;i=_/n}}else if(s>y){if(s<a){n=.707106781;r=0;i=.707106781}else{r=Math.sqrt(s);n=v/r;i=x/r}}else{if(y<a){n=.707106781;r=.707106781;i=0}else{i=Math.sqrt(y);n=_/i;r=x/i}}this.set(n,r,i,t);return this}let y=Math.sqrt((m-d)*(m-d)+(u-p)*(u-p)+(h-l)*(h-l));if(Math.abs(y)<.001)y=1;this.x=(m-d)/y;this.y=(u-p)/y;this.z=(h-l)/y;this.w=Math.acos((c+f+g-1)/2);return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);this.w=Math.min(this.w,e.w);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);this.w=Math.max(this.w,e.w);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));this.w=Math.max(e.w,Math.min(t.w,this.w));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));this.w=Math.max(e,Math.min(t,this.w));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;this.w+=(e.w-this.w)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;this.w=e.w+(t.w-e.w)*n;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t){if(t===undefined)t=0;this.x=e[t];this.y=e[t+1];this.z=e[t+2];this.w=e[t+3];return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;e[t+3]=this.w;return e}fromBufferAttribute(e,t,n){if(n!==undefined){console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().")}this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);this.w=e.getW(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}}function WebGLRenderTarget(e,t,n){this.width=e;this.height=t;this.scissor=new Vector4(0,0,e,t);this.scissorTest=false;this.viewport=new Vector4(0,0,e,t);n=n||{};this.texture=new Texture(undefined,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding);this.texture.image={};this.texture.image.width=e;this.texture.image.height=t;this.texture.generateMipmaps=n.generateMipmaps!==undefined?n.generateMipmaps:false;this.texture.minFilter=n.minFilter!==undefined?n.minFilter:LinearFilter;this.depthBuffer=n.depthBuffer!==undefined?n.depthBuffer:true;this.stencilBuffer=n.stencilBuffer!==undefined?n.stencilBuffer:false;this.depthTexture=n.depthTexture!==undefined?n.depthTexture:null}WebGLRenderTarget.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:WebGLRenderTarget,isWebGLRenderTarget:true,setSize:function(e,t){if(this.width!==e||this.height!==t){this.width=e;this.height=t;this.texture.image.width=e;this.texture.image.height=t;this.dispose()}this.viewport.set(0,0,e,t);this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.width=e.width;this.height=e.height;this.viewport.copy(e.viewport);this.texture=e.texture.clone();this.depthBuffer=e.depthBuffer;this.stencilBuffer=e.stencilBuffer;this.depthTexture=e.depthTexture;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});function WebGLMultisampleRenderTarget(e,t,n){WebGLRenderTarget.call(this,e,t,n);this.samples=4}WebGLMultisampleRenderTarget.prototype=Object.assign(Object.create(WebGLRenderTarget.prototype),{constructor:WebGLMultisampleRenderTarget,isWebGLMultisampleRenderTarget:true,copy:function(e){WebGLRenderTarget.prototype.copy.call(this,e);this.samples=e.samples;return this}});class Quaternion{constructor(e=0,t=0,n=0,r=1){Object.defineProperty(this,"isQuaternion",{value:true});this._x=e;this._y=t;this._z=n;this._w=r}static slerp(e,t,n,r){return n.copy(e).slerp(t,r)}static slerpFlat(e,t,n,r,i,a,o){let s=n[r+0],c=n[r+1],l=n[r+2],u=n[r+3];const h=i[a+0],f=i[a+1],d=i[a+2],p=i[a+3];if(u!==p||s!==h||c!==f||l!==d){let e=1-o;const t=s*h+c*f+l*d+u*p,n=t>=0?1:-1,r=1-t*t;if(r>Number.EPSILON){const i=Math.sqrt(r),a=Math.atan2(i,t*n);e=Math.sin(e*a)/i;o=Math.sin(o*a)/i}const i=o*n;s=s*e+h*i;c=c*e+f*i;l=l*e+d*i;u=u*e+p*i;if(e===1-o){const e=1/Math.sqrt(s*s+c*c+l*l+u*u);s*=e;c*=e;l*=e;u*=e}}e[t]=s;e[t+1]=c;e[t+2]=l;e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,r,i,a){const o=n[r];const s=n[r+1];const c=n[r+2];const l=n[r+3];const u=i[a];const h=i[a+1];const f=i[a+2];const d=i[a+3];e[t]=o*d+l*u+s*f-c*h;e[t+1]=s*d+l*h+c*u-o*f;e[t+2]=c*d+l*f+o*h-s*u;e[t+3]=l*d-o*u-s*h-c*f;return e}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e;this._onChangeCallback()}set(e,t,n,r){this._x=e;this._y=t;this._z=n;this._w=r;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){this._x=e.x;this._y=e.y;this._z=e.z;this._w=e.w;this._onChangeCallback();return this}setFromEuler(e,t){if(!(e&&e.isEuler)){throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.")}const n=e._x,r=e._y,i=e._z,a=e._order;const o=Math.cos;const s=Math.sin;const c=o(n/2);const l=o(r/2);const u=o(i/2);const h=s(n/2);const f=s(r/2);const d=s(i/2);switch(a){case"XYZ":this._x=h*l*u+c*f*d;this._y=c*f*u-h*l*d;this._z=c*l*d+h*f*u;this._w=c*l*u-h*f*d;break;case"YXZ":this._x=h*l*u+c*f*d;this._y=c*f*u-h*l*d;this._z=c*l*d-h*f*u;this._w=c*l*u+h*f*d;break;case"ZXY":this._x=h*l*u-c*f*d;this._y=c*f*u+h*l*d;this._z=c*l*d+h*f*u;this._w=c*l*u-h*f*d;break;case"ZYX":this._x=h*l*u-c*f*d;this._y=c*f*u+h*l*d;this._z=c*l*d-h*f*u;this._w=c*l*u+h*f*d;break;case"YZX":this._x=h*l*u+c*f*d;this._y=c*f*u+h*l*d;this._z=c*l*d-h*f*u;this._w=c*l*u-h*f*d;break;case"XZY":this._x=h*l*u-c*f*d;this._y=c*f*u-h*l*d;this._z=c*l*d+h*f*u;this._w=c*l*u+h*f*d;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}if(t!==false)this._onChangeCallback();return this}setFromAxisAngle(e,t){const n=t/2,r=Math.sin(n);this._x=e.x*r;this._y=e.y*r;this._z=e.z*r;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(e){const t=e.elements,n=t[0],r=t[4],i=t[8],a=t[1],o=t[5],s=t[9],c=t[2],l=t[6],u=t[10],h=n+o+u;if(h>0){const e=.5/Math.sqrt(h+1);this._w=.25/e;this._x=(l-s)*e;this._y=(i-c)*e;this._z=(a-r)*e}else if(n>o&&n>u){const e=2*Math.sqrt(1+n-o-u);this._w=(l-s)/e;this._x=.25*e;this._y=(r+a)/e;this._z=(i+c)/e}else if(o>u){const e=2*Math.sqrt(1+o-n-u);this._w=(i-c)/e;this._x=(r+a)/e;this._y=.25*e;this._z=(s+l)/e}else{const e=2*Math.sqrt(1+u-n-o);this._w=(a-r)/e;this._x=(i+c)/e;this._y=(s+l)/e;this._z=.25*e}this._onChangeCallback();return this}setFromUnitVectors(e,t){const n=1e-6;let r=e.dot(t)+1;if(r<n){r=0;if(Math.abs(e.x)>Math.abs(e.z)){this._x=-e.y;this._y=e.x;this._z=0;this._w=r}else{this._x=0;this._y=-e.z;this._z=e.y;this._w=r}}else{this._x=e.y*t.z-e.z*t.y;this._y=e.z*t.x-e.x*t.z;this._z=e.x*t.y-e.y*t.x;this._w=r}return this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(MathUtils.clamp(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const r=Math.min(1,t/n);this.slerp(e,r);return this}identity(){return this.set(0,0,0,1)}inverse(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();if(e===0){this._x=0;this._y=0;this._z=0;this._w=1}else{e=1/e;this._x=this._x*e;this._y=this._y*e;this._z=this._z*e;this._w=this._w*e}this._onChangeCallback();return this}multiply(e,t){if(t!==undefined){console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");return this.multiplyQuaternions(e,t)}return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,r=e._y,i=e._z,a=e._w;const o=t._x,s=t._y,c=t._z,l=t._w;this._x=n*l+a*o+r*c-i*s;this._y=r*l+a*s+i*o-n*c;this._z=i*l+a*c+n*s-r*o;this._w=a*l-n*o-r*s-i*c;this._onChangeCallback();return this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,r=this._y,i=this._z,a=this._w;let o=a*e._w+n*e._x+r*e._y+i*e._z;if(o<0){this._w=-e._w;this._x=-e._x;this._y=-e._y;this._z=-e._z;o=-o}else{this.copy(e)}if(o>=1){this._w=a;this._x=n;this._y=r;this._z=i;return this}const s=1-o*o;if(s<=Number.EPSILON){const e=1-t;this._w=e*a+t*this._w;this._x=e*n+t*this._x;this._y=e*r+t*this._y;this._z=e*i+t*this._z;this.normalize();this._onChangeCallback();return this}const c=Math.sqrt(s);const l=Math.atan2(c,o);const u=Math.sin((1-t)*l)/c,h=Math.sin(t*l)/c;this._w=a*u+this._w*h;this._x=n*u+this._x*h;this._y=r*u+this._y*h;this._z=i*u+this._z*h;this._onChangeCallback();return this}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t){if(t===undefined)t=0;this._x=e[t];this._y=e[t+1];this._z=e[t+2];this._w=e[t+3];this._onChangeCallback();return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._w;return e}fromBufferAttribute(e,t){this._x=e.getX(t);this._y=e.getY(t);this._z=e.getZ(t);this._w=e.getW(t);return this}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}}class Vector3{constructor(e=0,t=0,n=0){Object.defineProperty(this,"isVector3",{value:true});this.x=e;this.y=t;this.z=n}set(e,t,n){if(n===undefined)n=this.z;this.x=e;this.y=t;this.z=n;return this}setScalar(e){this.x=e;this.y=e;this.z=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;return this}add(e,t){if(t!==undefined){console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(e,t)}this.x+=e.x;this.y+=e.y;this.z+=e.z;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;return this}sub(e,t){if(t!==undefined){console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(e,t)}this.x-=e.x;this.y-=e.y;this.z-=e.z;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;return this}multiply(e,t){if(t!==undefined){console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");return this.multiplyVectors(e,t)}this.x*=e.x;this.y*=e.y;this.z*=e.z;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;return this}multiplyVectors(e,t){this.x=e.x*t.x;this.y=e.y*t.y;this.z=e.z*t.z;return this}applyEuler(e){if(!(e&&e.isEuler)){console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.")}return this.applyQuaternion(_quaternion.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(_quaternion.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,r=this.z;const i=e.elements;this.x=i[0]*t+i[3]*n+i[6]*r;this.y=i[1]*t+i[4]*n+i[7]*r;this.z=i[2]*t+i[5]*n+i[8]*r;return this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,r=this.z;const i=e.elements;const a=1/(i[3]*t+i[7]*n+i[11]*r+i[15]);this.x=(i[0]*t+i[4]*n+i[8]*r+i[12])*a;this.y=(i[1]*t+i[5]*n+i[9]*r+i[13])*a;this.z=(i[2]*t+i[6]*n+i[10]*r+i[14])*a;return this}applyQuaternion(e){const t=this.x,n=this.y,r=this.z;const i=e.x,a=e.y,o=e.z,s=e.w;const c=s*t+a*r-o*n;const l=s*n+o*t-i*r;const u=s*r+i*n-a*t;const h=-i*t-a*n-o*r;this.x=c*s+h*-i+l*-o-u*-a;this.y=l*s+h*-a+u*-i-c*-o;this.z=u*s+h*-o+c*-a-l*-i;return this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,r=this.z;const i=e.elements;this.x=i[0]*t+i[4]*n+i[8]*r;this.y=i[1]*t+i[5]*n+i[9]*r;this.z=i[2]*t+i[6]*n+i[10]*r;return this.normalize()}divide(e){this.x/=e.x;this.y/=e.y;this.z/=e.z;return this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;return this}cross(e,t){if(t!==undefined){console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");return this.crossVectors(e,t)}return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,r=e.y,i=e.z;const a=t.x,o=t.y,s=t.z;this.x=r*s-i*o;this.y=i*a-n*s;this.z=n*o-r*a;return this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){_vector.copy(this).projectOnVector(e);return this.sub(_vector)}reflect(e){return this.sub(_vector.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(MathUtils.clamp(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const r=Math.sin(t)*e;this.x=r*Math.sin(n);this.y=Math.cos(t)*e;this.z=r*Math.cos(n);return this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){this.x=e*Math.sin(t);this.y=n;this.z=e*Math.cos(t);return this}setFromMatrixPosition(e){const t=e.elements;this.x=t[12];this.y=t[13];this.z=t[14];return this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length();const n=this.setFromMatrixColumn(e,1).length();const r=this.setFromMatrixColumn(e,2).length();this.x=t;this.y=n;this.z=r;return this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t){if(t===undefined)t=0;this.x=e[t];this.y=e[t+1];this.z=e[t+2];return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;return e}fromBufferAttribute(e,t,n){if(n!==undefined){console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().")}this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}}const _vector=new Vector3;const _quaternion=new Quaternion;class Box3{constructor(e,t){Object.defineProperty(this,"isBox3",{value:true});this.min=e!==undefined?e:new Vector3(+Infinity,+Infinity,+Infinity);this.max=t!==undefined?t:new Vector3(-Infinity,-Infinity,-Infinity)}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromArray(e){let t=+Infinity;let n=+Infinity;let r=+Infinity;let i=-Infinity;let a=-Infinity;let o=-Infinity;for(let s=0,c=e.length;s<c;s+=3){const c=e[s];const l=e[s+1];const u=e[s+2];if(c<t)t=c;if(l<n)n=l;if(u<r)r=u;if(c>i)i=c;if(l>a)a=l;if(u>o)o=u}this.min.set(t,n,r);this.max.set(i,a,o);return this}setFromBufferAttribute(e){let t=+Infinity;let n=+Infinity;let r=+Infinity;let i=-Infinity;let a=-Infinity;let o=-Infinity;for(let s=0,c=e.count;s<c;s++){const c=e.getX(s);const l=e.getY(s);const u=e.getZ(s);if(c<t)t=c;if(l<n)n=l;if(u<r)r=u;if(c>i)i=c;if(l>a)a=l;if(u>o)o=u}this.min.set(t,n,r);this.max.set(i,a,o);return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++){this.expandByPoint(e[t])}return this}setFromCenterAndSize(e,t){const n=_vector$1.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}setFromObject(e){this.makeEmpty();return this.expandByObject(e)}clone(){return(new this.constructor).copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){if(e===undefined){console.warn("THREE.Box3: .getCenter() target is now required");e=new Vector3}return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){if(e===undefined){console.warn("THREE.Box3: .getSize() target is now required");e=new Vector3}return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}expandByObject(e){e.updateWorldMatrix(false,false);const t=e.geometry;if(t!==undefined){if(t.boundingBox===null){t.computeBoundingBox()}_box.copy(t.boundingBox);_box.applyMatrix4(e.matrixWorld);this.union(_box)}const n=e.children;for(let e=0,t=n.length;e<t;e++){this.expandByObject(n[e])}return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){if(t===undefined){console.warn("THREE.Box3: .getParameter() target is now required");t=new Vector3}return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z?false:true}intersectsSphere(e){this.clampPoint(e.center,_vector$1);return _vector$1.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;if(e.normal.x>0){t=e.normal.x*this.min.x;n=e.normal.x*this.max.x}else{t=e.normal.x*this.max.x;n=e.normal.x*this.min.x}if(e.normal.y>0){t+=e.normal.y*this.min.y;n+=e.normal.y*this.max.y}else{t+=e.normal.y*this.max.y;n+=e.normal.y*this.min.y}if(e.normal.z>0){t+=e.normal.z*this.min.z;n+=e.normal.z*this.max.z}else{t+=e.normal.z*this.max.z;n+=e.normal.z*this.min.z}return t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty()){return false}this.getCenter(_center);_extents.subVectors(this.max,_center);_v0.subVectors(e.a,_center);_v1.subVectors(e.b,_center);_v2.subVectors(e.c,_center);_f0.subVectors(_v1,_v0);_f1.subVectors(_v2,_v1);_f2.subVectors(_v0,_v2);let t=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(t,_v0,_v1,_v2,_extents)){return false}t=[1,0,0,0,1,0,0,0,1];if(!satForAxes(t,_v0,_v1,_v2,_extents)){return false}_triangleNormal.crossVectors(_f0,_f1);t=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(t,_v0,_v1,_v2,_extents)}clampPoint(e,t){if(t===undefined){console.warn("THREE.Box3: .clampPoint() target is now required");t=new Vector3}return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=_vector$1.copy(e).clamp(this.min,this.max);return t.sub(e).length()}getBoundingSphere(e){if(e===undefined){console.error("THREE.Box3: .getBoundingSphere() target is now required")}this.getCenter(e.center);e.radius=this.getSize(_vector$1).length()*.5;return e}intersect(e){this.min.max(e.min);this.max.min(e.max);if(this.isEmpty())this.makeEmpty();return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}applyMatrix4(e){if(this.isEmpty())return this;_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e);_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e);_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e);_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e);_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e);_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e);_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e);_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e);this.setFromPoints(_points);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}function satForAxes(e,t,n,r,i){for(let a=0,o=e.length-3;a<=o;a+=3){_testAxis.fromArray(e,a);const o=i.x*Math.abs(_testAxis.x)+i.y*Math.abs(_testAxis.y)+i.z*Math.abs(_testAxis.z);const s=t.dot(_testAxis);const c=n.dot(_testAxis);const l=r.dot(_testAxis);if(Math.max(-Math.max(s,c,l),Math.min(s,c,l))>o){return false}}return true}const _points=[new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3];const _vector$1=new Vector3;const _box=new Box3;const _v0=new Vector3;const _v1=new Vector3;const _v2=new Vector3;const _f0=new Vector3;const _f1=new Vector3;const _f2=new Vector3;const _center=new Vector3;const _extents=new Vector3;const _triangleNormal=new Vector3;const _testAxis=new Vector3;const _box$1=new Box3;class Sphere{constructor(e,t){this.center=e!==undefined?e:new Vector3;this.radius=t!==undefined?t:-1}set(e,t){this.center.copy(e);this.radius=t;return this}setFromPoints(e,t){const n=this.center;if(t!==undefined){n.copy(t)}else{_box$1.setFromPoints(e).getCenter(n)}let r=0;for(let t=0,i=e.length;t<i;t++){r=Math.max(r,n.distanceToSquared(e[t]))}this.radius=Math.sqrt(r);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.center.copy(e.center);this.radius=e.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);if(t===undefined){console.warn("THREE.Sphere: .clampPoint() target is now required");t=new Vector3}t.copy(e);if(n>this.radius*this.radius){t.sub(this.center).normalize();t.multiplyScalar(this.radius).add(this.center)}return t}getBoundingBox(e){if(e===undefined){console.warn("THREE.Sphere: .getBoundingBox() target is now required");e=new Box3}if(this.isEmpty()){e.makeEmpty();return e}e.set(this.center,this.center);e.expandByScalar(this.radius);return e}applyMatrix4(e){this.center.applyMatrix4(e);this.radius=this.radius*e.getMaxScaleOnAxis();return this}translate(e){this.center.add(e);return this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}}const _vector$2=new Vector3;const _segCenter=new Vector3;const _segDir=new Vector3;const _diff=new Vector3;const _edge1=new Vector3;const _edge2=new Vector3;const _normal=new Vector3;class Ray{constructor(e,t){this.origin=e!==undefined?e:new Vector3;this.direction=t!==undefined?t:new Vector3(0,0,-1)}set(e,t){this.origin.copy(e);this.direction.copy(t);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.origin.copy(e.origin);this.direction.copy(e.direction);return this}at(e,t){if(t===undefined){console.warn("THREE.Ray: .at() target is now required");t=new Vector3}return t.copy(this.direction).multiplyScalar(e).add(this.origin)}lookAt(e){this.direction.copy(e).sub(this.origin).normalize();return this}recast(e){this.origin.copy(this.at(e,_vector$2));return this}closestPointToPoint(e,t){if(t===undefined){console.warn("THREE.Ray: .closestPointToPoint() target is now required");t=new Vector3}t.subVectors(e,this.origin);const n=t.dot(this.direction);if(n<0){return t.copy(this.origin)}return t.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=_vector$2.subVectors(e,this.origin).dot(this.direction);if(t<0){return this.origin.distanceToSquared(e)}_vector$2.copy(this.direction).multiplyScalar(t).add(this.origin);return _vector$2.distanceToSquared(e)}distanceSqToSegment(e,t,n,r){_segCenter.copy(e).add(t).multiplyScalar(.5);_segDir.copy(t).sub(e).normalize();_diff.copy(this.origin).sub(_segCenter);const i=e.distanceTo(t)*.5;const a=-this.direction.dot(_segDir);const o=_diff.dot(this.direction);const s=-_diff.dot(_segDir);const c=_diff.lengthSq();const l=Math.abs(1-a*a);let u,h,f,d;if(l>0){u=a*s-o;h=a*o-s;d=i*l;if(u>=0){if(h>=-d){if(h<=d){const e=1/l;u*=e;h*=e;f=u*(u+a*h+2*o)+h*(a*u+h+2*s)+c}else{h=i;u=Math.max(0,-(a*h+o));f=-u*u+h*(h+2*s)+c}}else{h=-i;u=Math.max(0,-(a*h+o));f=-u*u+h*(h+2*s)+c}}else{if(h<=-d){u=Math.max(0,-(-a*i+o));h=u>0?-i:Math.min(Math.max(-i,-s),i);f=-u*u+h*(h+2*s)+c}else if(h<=d){u=0;h=Math.min(Math.max(-i,-s),i);f=h*(h+2*s)+c}else{u=Math.max(0,-(a*i+o));h=u>0?i:Math.min(Math.max(-i,-s),i);f=-u*u+h*(h+2*s)+c}}}else{h=a>0?-i:i;u=Math.max(0,-(a*h+o));f=-u*u+h*(h+2*s)+c}if(n){n.copy(this.direction).multiplyScalar(u).add(this.origin)}if(r){r.copy(_segDir).multiplyScalar(h).add(_segCenter)}return f}intersectSphere(e,t){_vector$2.subVectors(e.center,this.origin);const n=_vector$2.dot(this.direction);const r=_vector$2.dot(_vector$2)-n*n;const i=e.radius*e.radius;if(r>i)return null;const a=Math.sqrt(i-r);const o=n-a;const s=n+a;if(o<0&&s<0)return null;if(o<0)return this.at(s,t);return this.at(o,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0){if(e.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);if(n===null){return null}return this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0){return true}const n=e.normal.dot(this.direction);if(n*t<0){return true}return false}intersectBox(e,t){let n,r,i,a,o,s;const c=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z;const h=this.origin;if(c>=0){n=(e.min.x-h.x)*c;r=(e.max.x-h.x)*c}else{n=(e.max.x-h.x)*c;r=(e.min.x-h.x)*c}if(l>=0){i=(e.min.y-h.y)*l;a=(e.max.y-h.y)*l}else{i=(e.max.y-h.y)*l;a=(e.min.y-h.y)*l}if(n>a||i>r)return null;if(i>n||n!==n)n=i;if(a<r||r!==r)r=a;if(u>=0){o=(e.min.z-h.z)*u;s=(e.max.z-h.z)*u}else{o=(e.max.z-h.z)*u;s=(e.min.z-h.z)*u}if(n>s||o>r)return null;if(o>n||n!==n)n=o;if(s<r||r!==r)r=s;if(r<0)return null;return this.at(n>=0?n:r,t)}intersectsBox(e){return this.intersectBox(e,_vector$2)!==null}intersectTriangle(e,t,n,r,i){_edge1.subVectors(t,e);_edge2.subVectors(n,e);_normal.crossVectors(_edge1,_edge2);let a=this.direction.dot(_normal);let o;if(a>0){if(r)return null;o=1}else if(a<0){o=-1;a=-a}else{return null}_diff.subVectors(this.origin,e);const s=o*this.direction.dot(_edge2.crossVectors(_diff,_edge2));if(s<0){return null}const c=o*this.direction.dot(_edge1.cross(_diff));if(c<0){return null}if(s+c>a){return null}const l=-o*_diff.dot(_normal);if(l<0){return null}return this.at(l/a,i)}applyMatrix4(e){this.origin.applyMatrix4(e);this.direction.transformDirection(e);return this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}}class Matrix4{constructor(){Object.defineProperty(this,"isMatrix4",{value:true});this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}}set(e,t,n,r,i,a,o,s,c,l,u,h,f,d,p,m){const g=this.elements;g[0]=e;g[4]=t;g[8]=n;g[12]=r;g[1]=i;g[5]=a;g[9]=o;g[13]=s;g[2]=c;g[6]=l;g[10]=u;g[14]=h;g[3]=f;g[7]=d;g[11]=p;g[15]=m;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return(new Matrix4).fromArray(this.elements)}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];t[9]=n[9];t[10]=n[10];t[11]=n[11];t[12]=n[12];t[13]=n[13];t[14]=n[14];t[15]=n[15];return this}copyPosition(e){const t=this.elements,n=e.elements;t[12]=n[12];t[13]=n[13];t[14]=n[14];return this}extractBasis(e,t,n){e.setFromMatrixColumn(this,0);t.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(e,t,n){this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1);return this}extractRotation(e){const t=this.elements;const n=e.elements;const r=1/_v1$1.setFromMatrixColumn(e,0).length();const i=1/_v1$1.setFromMatrixColumn(e,1).length();const a=1/_v1$1.setFromMatrixColumn(e,2).length();t[0]=n[0]*r;t[1]=n[1]*r;t[2]=n[2]*r;t[3]=0;t[4]=n[4]*i;t[5]=n[5]*i;t[6]=n[6]*i;t[7]=0;t[8]=n[8]*a;t[9]=n[9]*a;t[10]=n[10]*a;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromEuler(e){if(!(e&&e.isEuler)){console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.")}const t=this.elements;const n=e.x,r=e.y,i=e.z;const a=Math.cos(n),o=Math.sin(n);const s=Math.cos(r),c=Math.sin(r);const l=Math.cos(i),u=Math.sin(i);if(e.order==="XYZ"){const e=a*l,n=a*u,r=o*l,i=o*u;t[0]=s*l;t[4]=-s*u;t[8]=c;t[1]=n+r*c;t[5]=e-i*c;t[9]=-o*s;t[2]=i-e*c;t[6]=r+n*c;t[10]=a*s}else if(e.order==="YXZ"){const e=s*l,n=s*u,r=c*l,i=c*u;t[0]=e+i*o;t[4]=r*o-n;t[8]=a*c;t[1]=a*u;t[5]=a*l;t[9]=-o;t[2]=n*o-r;t[6]=i+e*o;t[10]=a*s}else if(e.order==="ZXY"){const e=s*l,n=s*u,r=c*l,i=c*u;t[0]=e-i*o;t[4]=-a*u;t[8]=r+n*o;t[1]=n+r*o;t[5]=a*l;t[9]=i-e*o;t[2]=-a*c;t[6]=o;t[10]=a*s}else if(e.order==="ZYX"){const e=a*l,n=a*u,r=o*l,i=o*u;t[0]=s*l;t[4]=r*c-n;t[8]=e*c+i;t[1]=s*u;t[5]=i*c+e;t[9]=n*c-r;t[2]=-c;t[6]=o*s;t[10]=a*s}else if(e.order==="YZX"){const e=a*s,n=a*c,r=o*s,i=o*c;t[0]=s*l;t[4]=i-e*u;t[8]=r*u+n;t[1]=u;t[5]=a*l;t[9]=-o*l;t[2]=-c*l;t[6]=n*u+r;t[10]=e-i*u}else if(e.order==="XZY"){const e=a*s,n=a*c,r=o*s,i=o*c;t[0]=s*l;t[4]=-u;t[8]=c*l;t[1]=e*u+i;t[5]=a*l;t[9]=n*u-r;t[2]=r*u-n;t[6]=o*l;t[10]=i*u+e}t[3]=0;t[7]=0;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromQuaternion(e){return this.compose(_zero,e,_one)}lookAt(e,t,n){const r=this.elements;_z.subVectors(e,t);if(_z.lengthSq()===0){_z.z=1}_z.normalize();_x.crossVectors(n,_z);if(_x.lengthSq()===0){if(Math.abs(n.z)===1){_z.x+=1e-4}else{_z.z+=1e-4}_z.normalize();_x.crossVectors(n,_z)}_x.normalize();_y.crossVectors(_z,_x);r[0]=_x.x;r[4]=_y.x;r[8]=_z.x;r[1]=_x.y;r[5]=_y.y;r[9]=_z.y;r[2]=_x.z;r[6]=_y.z;r[10]=_z.z;return this}multiply(e,t){if(t!==undefined){console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");return this.multiplyMatrices(e,t)}return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const r=t.elements;const i=this.elements;const a=n[0],o=n[4],s=n[8],c=n[12];const l=n[1],u=n[5],h=n[9],f=n[13];const d=n[2],p=n[6],m=n[10],g=n[14];const y=n[3],v=n[7],_=n[11],x=n[15];const b=r[0],M=r[4],w=r[8],S=r[12];const T=r[1],E=r[5],A=r[9],L=r[13];const C=r[2],R=r[6],P=r[10],B=r[14];const D=r[3],G=r[7],I=r[11],O=r[15];i[0]=a*b+o*T+s*C+c*D;i[4]=a*M+o*E+s*R+c*G;i[8]=a*w+o*A+s*P+c*I;i[12]=a*S+o*L+s*B+c*O;i[1]=l*b+u*T+h*C+f*D;i[5]=l*M+u*E+h*R+f*G;i[9]=l*w+u*A+h*P+f*I;i[13]=l*S+u*L+h*B+f*O;i[2]=d*b+p*T+m*C+g*D;i[6]=d*M+p*E+m*R+g*G;i[10]=d*w+p*A+m*P+g*I;i[14]=d*S+p*L+m*B+g*O;i[3]=y*b+v*T+_*C+x*D;i[7]=y*M+v*E+_*R+x*G;i[11]=y*w+v*A+_*P+x*I;i[15]=y*S+v*L+_*B+x*O;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[4]*=e;t[8]*=e;t[12]*=e;t[1]*=e;t[5]*=e;t[9]*=e;t[13]*=e;t[2]*=e;t[6]*=e;t[10]*=e;t[14]*=e;t[3]*=e;t[7]*=e;t[11]*=e;t[15]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[4],r=e[8],i=e[12];const a=e[1],o=e[5],s=e[9],c=e[13];const l=e[2],u=e[6],h=e[10],f=e[14];const d=e[3],p=e[7],m=e[11],g=e[15];return d*(+i*s*u-r*c*u-i*o*h+n*c*h+r*o*f-n*s*f)+p*(+t*s*f-t*c*h+i*a*h-r*a*f+r*c*l-i*s*l)+m*(+t*c*u-t*o*f-i*a*u+n*a*f+i*o*l-n*c*l)+g*(-r*o*l-t*s*u+t*o*h+r*a*u-n*a*h+n*s*l)}transpose(){const e=this.elements;let t;t=e[1];e[1]=e[4];e[4]=t;t=e[2];e[2]=e[8];e[8]=t;t=e[6];e[6]=e[9];e[9]=t;t=e[3];e[3]=e[12];e[12]=t;t=e[7];e[7]=e[13];e[13]=t;t=e[11];e[11]=e[14];e[14]=t;return this}setPosition(e,t,n){const r=this.elements;if(e.isVector3){r[12]=e.x;r[13]=e.y;r[14]=e.z}else{r[12]=e;r[13]=t;r[14]=n}return this}getInverse(e,t){if(t!==undefined){console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.")}const n=this.elements,r=e.elements,i=r[0],a=r[1],o=r[2],s=r[3],c=r[4],l=r[5],u=r[6],h=r[7],f=r[8],d=r[9],p=r[10],m=r[11],g=r[12],y=r[13],v=r[14],_=r[15],x=d*v*h-y*p*h+y*u*m-l*v*m-d*u*_+l*p*_,b=g*p*h-f*v*h-g*u*m+c*v*m+f*u*_-c*p*_,M=f*y*h-g*d*h+g*l*m-c*y*m-f*l*_+c*d*_,w=g*d*u-f*y*u-g*l*p+c*y*p+f*l*v-c*d*v;const S=i*x+a*b+o*M+s*w;if(S===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const T=1/S;n[0]=x*T;n[1]=(y*p*s-d*v*s-y*o*m+a*v*m+d*o*_-a*p*_)*T;n[2]=(l*v*s-y*u*s+y*o*h-a*v*h-l*o*_+a*u*_)*T;n[3]=(d*u*s-l*p*s-d*o*h+a*p*h+l*o*m-a*u*m)*T;n[4]=b*T;n[5]=(f*v*s-g*p*s+g*o*m-i*v*m-f*o*_+i*p*_)*T;n[6]=(g*u*s-c*v*s-g*o*h+i*v*h+c*o*_-i*u*_)*T;n[7]=(c*p*s-f*u*s+f*o*h-i*p*h-c*o*m+i*u*m)*T;n[8]=M*T;n[9]=(g*d*s-f*y*s-g*a*m+i*y*m+f*a*_-i*d*_)*T;n[10]=(c*y*s-g*l*s+g*a*h-i*y*h-c*a*_+i*l*_)*T;n[11]=(f*l*s-c*d*s-f*a*h+i*d*h+c*a*m-i*l*m)*T;n[12]=w*T;n[13]=(f*y*o-g*d*o+g*a*p-i*y*p-f*a*v+i*d*v)*T;n[14]=(g*l*o-c*y*o-g*a*u+i*y*u+c*a*v-i*l*v)*T;n[15]=(c*d*o-f*l*o+f*a*u-i*d*u-c*a*p+i*l*p)*T;return this}scale(e){const t=this.elements;const n=e.x,r=e.y,i=e.z;t[0]*=n;t[4]*=r;t[8]*=i;t[1]*=n;t[5]*=r;t[9]*=i;t[2]*=n;t[6]*=r;t[10]*=i;t[3]*=n;t[7]*=r;t[11]*=i;return this}getMaxScaleOnAxis(){const e=this.elements;const t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];const n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6];const r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))}makeTranslation(e,t,n){this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1);return this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1);return this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1);return this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(e,t){const n=Math.cos(t);const r=Math.sin(t);const i=1-n;const a=e.x,o=e.y,s=e.z;const c=i*a,l=i*o;this.set(c*a+n,c*o-r*s,c*s+r*o,0,c*o+r*s,l*o+n,l*s-r*a,0,c*s-r*o,l*s+r*a,i*s*s+n,0,0,0,0,1);return this}makeScale(e,t,n){this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1);return this}makeShear(e,t,n){this.set(1,t,n,0,e,1,n,0,e,t,1,0,0,0,0,1);return this}compose(e,t,n){const r=this.elements;const i=t._x,a=t._y,o=t._z,s=t._w;const c=i+i,l=a+a,u=o+o;const h=i*c,f=i*l,d=i*u;const p=a*l,m=a*u,g=o*u;const y=s*c,v=s*l,_=s*u;const x=n.x,b=n.y,M=n.z;r[0]=(1-(p+g))*x;r[1]=(f+_)*x;r[2]=(d-v)*x;r[3]=0;r[4]=(f-_)*b;r[5]=(1-(h+g))*b;r[6]=(m+y)*b;r[7]=0;r[8]=(d+v)*M;r[9]=(m-y)*M;r[10]=(1-(h+p))*M;r[11]=0;r[12]=e.x;r[13]=e.y;r[14]=e.z;r[15]=1;return this}decompose(e,t,n){const r=this.elements;let i=_v1$1.set(r[0],r[1],r[2]).length();const a=_v1$1.set(r[4],r[5],r[6]).length();const o=_v1$1.set(r[8],r[9],r[10]).length();const s=this.determinant();if(s<0)i=-i;e.x=r[12];e.y=r[13];e.z=r[14];_m1.copy(this);const c=1/i;const l=1/a;const u=1/o;_m1.elements[0]*=c;_m1.elements[1]*=c;_m1.elements[2]*=c;_m1.elements[4]*=l;_m1.elements[5]*=l;_m1.elements[6]*=l;_m1.elements[8]*=u;_m1.elements[9]*=u;_m1.elements[10]*=u;t.setFromRotationMatrix(_m1);n.x=i;n.y=a;n.z=o;return this}makePerspective(e,t,n,r,i,a){if(a===undefined){console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.")}const o=this.elements;const s=2*i/(t-e);const c=2*i/(n-r);const l=(t+e)/(t-e);const u=(n+r)/(n-r);const h=-(a+i)/(a-i);const f=-2*a*i/(a-i);o[0]=s;o[4]=0;o[8]=l;o[12]=0;o[1]=0;o[5]=c;o[9]=u;o[13]=0;o[2]=0;o[6]=0;o[10]=h;o[14]=f;o[3]=0;o[7]=0;o[11]=-1;o[15]=0;return this}makeOrthographic(e,t,n,r,i,a){const o=this.elements;const s=1/(t-e);const c=1/(n-r);const l=1/(a-i);const u=(t+e)*s;const h=(n+r)*c;const f=(a+i)*l;o[0]=2*s;o[4]=0;o[8]=0;o[12]=-u;o[1]=0;o[5]=2*c;o[9]=0;o[13]=-h;o[2]=0;o[6]=0;o[10]=-2*l;o[14]=-f;o[3]=0;o[7]=0;o[11]=0;o[15]=1;return this}equals(e){const t=this.elements;const n=e.elements;for(let e=0;e<16;e++){if(t[e]!==n[e])return false}return true}fromArray(e,t){if(t===undefined)t=0;for(let n=0;n<16;n++){this.elements[n]=e[n+t]}return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];e[t+9]=n[9];e[t+10]=n[10];e[t+11]=n[11];e[t+12]=n[12];e[t+13]=n[13];e[t+14]=n[14];e[t+15]=n[15];return e}}const _v1$1=new Vector3;const _m1=new Matrix4;const _zero=new Vector3(0,0,0);const _one=new Vector3(1,1,1);const _x=new Vector3;const _y=new Vector3;const _z=new Vector3;class Euler{constructor(e=0,t=0,n=0,r=Euler.DefaultOrder){Object.defineProperty(this,"isEuler",{value:true});this._x=e;this._y=t;this._z=n;this._order=r}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e;this._onChangeCallback()}set(e,t,n,r){this._x=e;this._y=t;this._z=n;this._order=r||this._order;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){this._x=e._x;this._y=e._y;this._z=e._z;this._order=e._order;this._onChangeCallback();return this}setFromRotationMatrix(e,t,n){const r=MathUtils.clamp;const i=e.elements;const a=i[0],o=i[4],s=i[8];const c=i[1],l=i[5],u=i[9];const h=i[2],f=i[6],d=i[10];t=t||this._order;switch(t){case"XYZ":this._y=Math.asin(r(s,-1,1));if(Math.abs(s)<.9999999){this._x=Math.atan2(-u,d);this._z=Math.atan2(-o,a)}else{this._x=Math.atan2(f,l);this._z=0}break;case"YXZ":this._x=Math.asin(-r(u,-1,1));if(Math.abs(u)<.9999999){this._y=Math.atan2(s,d);this._z=Math.atan2(c,l)}else{this._y=Math.atan2(-h,a);this._z=0}break;case"ZXY":this._x=Math.asin(r(f,-1,1));if(Math.abs(f)<.9999999){this._y=Math.atan2(-h,d);this._z=Math.atan2(-o,l)}else{this._y=0;this._z=Math.atan2(c,a)}break;case"ZYX":this._y=Math.asin(-r(h,-1,1));if(Math.abs(h)<.9999999){this._x=Math.atan2(f,d);this._z=Math.atan2(c,a)}else{this._x=0;this._z=Math.atan2(-o,l)}break;case"YZX":this._z=Math.asin(r(c,-1,1));if(Math.abs(c)<.9999999){this._x=Math.atan2(-u,l);this._y=Math.atan2(-h,a)}else{this._x=0;this._y=Math.atan2(s,d)}break;case"XZY":this._z=Math.asin(-r(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(f,l);this._y=Math.atan2(s,a)}else{this._x=Math.atan2(-u,d);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}this._order=t;if(n!==false)this._onChangeCallback();return this}setFromQuaternion(e,t,n){_matrix.makeRotationFromQuaternion(e);return this.setFromRotationMatrix(_matrix,t,n)}setFromVector3(e,t){return this.set(e.x,e.y,e.z,t||this._order)}reorder(e){_quaternion$1.setFromEuler(this);return this.setFromQuaternion(_quaternion$1,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){this._x=e[0];this._y=e[1];this._z=e[2];if(e[3]!==undefined)this._order=e[3];this._onChangeCallback();return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._order;return e}toVector3(e){if(e){return e.set(this._x,this._y,this._z)}else{return new Vector3(this._x,this._y,this._z)}}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}}Euler.DefaultOrder="XYZ";Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];const _matrix=new Matrix4;const _quaternion$1=new Quaternion;class Layers{constructor(){this.mask=1|0}set(e){this.mask=1<<e|0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}}let _object3DId=0;const _v1$2=new Vector3;const _q1=new Quaternion;const _m1$1=new Matrix4;const _target=new Vector3;const _position=new Vector3;const _scale=new Vector3;const _quaternion$2=new Quaternion;const _xAxis=new Vector3(1,0,0);const _yAxis=new Vector3(0,1,0);const _zAxis=new Vector3(0,0,1);const _addedEvent={type:"added"};const _removedEvent={type:"removed"};function Object3D(){Object.defineProperty(this,"id",{value:_object3DId++});this.uuid=MathUtils.generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=Object3D.DefaultUp.clone();const e=new Vector3;const t=new Euler;const n=new Quaternion;const r=new Vector3(1,1,1);function i(){n.setFromEuler(t,false)}function a(){t.setFromQuaternion(n,undefined,false)}t._onChange(i);n._onChange(a);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:e},rotation:{configurable:true,enumerable:true,value:t},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:r},modelViewMatrix:{value:new Matrix4},normalMatrix:{value:new Matrix3}});this.matrix=new Matrix4;this.matrixWorld=new Matrix4;this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=false;this.layers=new Layers;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.userData={}}Object3D.DefaultUp=new Vector3(0,1,0);Object3D.DefaultMatrixAutoUpdate=true;Object3D.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Object3D,isObject3D:true,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(e){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(e);this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){this.quaternion.premultiply(e);return this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,true)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(e,t){_q1.setFromAxisAngle(e,t);this.quaternion.multiply(_q1);return this},rotateOnWorldAxis:function(e,t){_q1.setFromAxisAngle(e,t);this.quaternion.premultiply(_q1);return this},rotateX:function(e){return this.rotateOnAxis(_xAxis,e)},rotateY:function(e){return this.rotateOnAxis(_yAxis,e)},rotateZ:function(e){return this.rotateOnAxis(_zAxis,e)},translateOnAxis:function(e,t){_v1$2.copy(e).applyQuaternion(this.quaternion);this.position.add(_v1$2.multiplyScalar(t));return this},translateX:function(e){return this.translateOnAxis(_xAxis,e)},translateY:function(e){return this.translateOnAxis(_yAxis,e)},translateZ:function(e){return this.translateOnAxis(_zAxis,e)},localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(e){return e.applyMatrix4(_m1$1.getInverse(this.matrixWorld))},lookAt:function(e,t,n){if(e.isVector3){_target.copy(e)}else{_target.set(e,t,n)}const r=this.parent;this.updateWorldMatrix(true,false);_position.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position,_target,this.up)}else{_m1$1.lookAt(_target,_position,this.up)}this.quaternion.setFromRotationMatrix(_m1$1);if(r){_m1$1.extractRotation(r.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.inverse())}},add:function(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++){this.add(arguments[e])}return this}if(e===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",e);return this}if(e&&e.isObject3D){if(e.parent!==null){e.parent.remove(e)}e.parent=this;this.children.push(e);e.dispatchEvent(_addedEvent)}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e)}return this},remove:function(e){if(arguments.length>1){for(let e=0;e<arguments.length;e++){this.remove(arguments[e])}return this}const t=this.children.indexOf(e);if(t!==-1){e.parent=null;this.children.splice(t,1);e.dispatchEvent(_removedEvent)}return this},attach:function(e){this.updateWorldMatrix(true,false);_m1$1.getInverse(this.matrixWorld);if(e.parent!==null){e.parent.updateWorldMatrix(true,false);_m1$1.multiply(e.parent.matrixWorld)}e.applyMatrix4(_m1$1);e.updateWorldMatrix(false,false);this.add(e);return this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(let n=0,r=this.children.length;n<r;n++){const r=this.children[n];const i=r.getObjectByProperty(e,t);if(i!==undefined){return i}}return undefined},getWorldPosition:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldPosition() target is now required");e=new Vector3}this.updateWorldMatrix(true,false);return e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldQuaternion() target is now required");e=new Quaternion}this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position,e,_scale);return e},getWorldScale:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldScale() target is now required");e=new Vector3}this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position,_quaternion$2,e);return e},getWorldDirection:function(e){if(e===undefined){console.warn("THREE.Object3D: .getWorldDirection() target is now required");e=new Vector3}this.updateWorldMatrix(true,false);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(e){e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++){t[n].traverse(e)}},traverseVisible:function(e){if(this.visible===false)return;e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++){t[n].traverseVisible(e)}},traverseAncestors:function(e){const t=this.parent;if(t!==null){e(t);t.traverseAncestors(e)}},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true},updateMatrixWorld:function(e){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||e){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}this.matrixWorldNeedsUpdate=false;e=true}const t=this.children;for(let n=0,r=t.length;n<r;n++){t[n].updateMatrixWorld(e)}},updateWorldMatrix:function(e,t){const n=this.parent;if(e===true&&n!==null){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}if(t===true){const e=this.children;for(let t=0,n=e.length;t<n;t++){e[t].updateWorldMatrix(false,true)}}},toJSON:function(e){const t=e===undefined||typeof e==="string";const n={};if(t){e={geometries:{},materials:{},textures:{},images:{},shapes:{}};n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"}}const r={};r.uuid=this.uuid;r.type=this.type;if(this.name!=="")r.name=this.name;if(this.castShadow===true)r.castShadow=true;if(this.receiveShadow===true)r.receiveShadow=true;if(this.visible===false)r.visible=false;if(this.frustumCulled===false)r.frustumCulled=false;if(this.renderOrder!==0)r.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=="{}")r.userData=this.userData;r.layers=this.layers.mask;r.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)r.matrixAutoUpdate=false;if(this.isInstancedMesh){r.type="InstancedMesh";r.count=this.count;r.instanceMatrix=this.instanceMatrix.toJSON()}function i(t,n){if(t[n.uuid]===undefined){t[n.uuid]=n.toJSON(e)}return n.uuid}if(this.isMesh||this.isLine||this.isPoints){r.geometry=i(e.geometries,this.geometry);const t=this.geometry.parameters;if(t!==undefined&&t.shapes!==undefined){const n=t.shapes;if(Array.isArray(n)){for(let t=0,r=n.length;t<r;t++){const r=n[t];i(e.shapes,r)}}else{i(e.shapes,n)}}}if(this.material!==undefined){if(Array.isArray(this.material)){const t=[];for(let n=0,r=this.material.length;n<r;n++){t.push(i(e.materials,this.material[n]))}r.material=t}else{r.material=i(e.materials,this.material)}}if(this.children.length>0){r.children=[];for(let t=0;t<this.children.length;t++){r.children.push(this.children[t].toJSON(e).object)}}if(t){const t=a(e.geometries);const r=a(e.materials);const i=a(e.textures);const o=a(e.images);const s=a(e.shapes);if(t.length>0)n.geometries=t;if(r.length>0)n.materials=r;if(i.length>0)n.textures=i;if(o.length>0)n.images=o;if(s.length>0)n.shapes=s}n.object=r;return n;function a(e){const t=[];for(const n in e){const r=e[n];delete r.metadata;t.push(r)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(t===undefined)t=true;this.name=e.name;this.up.copy(e.up);this.position.copy(e.position);this.rotation.order=e.rotation.order;this.quaternion.copy(e.quaternion);this.scale.copy(e.scale);this.matrix.copy(e.matrix);this.matrixWorld.copy(e.matrixWorld);this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate;this.layers.mask=e.layers.mask;this.visible=e.visible;this.castShadow=e.castShadow;this.receiveShadow=e.receiveShadow;this.frustumCulled=e.frustumCulled;this.renderOrder=e.renderOrder;this.userData=JSON.parse(JSON.stringify(e.userData));if(t===true){for(let t=0;t<e.children.length;t++){const n=e.children[t];this.add(n.clone())}}return this}});const _vector1=new Vector3;const _vector2=new Vector3;const _normalMatrix=new Matrix3;class Plane{constructor(e,t){Object.defineProperty(this,"isPlane",{value:true});this.normal=e!==undefined?e:new Vector3(1,0,0);this.constant=t!==undefined?t:0}set(e,t){this.normal.copy(e);this.constant=t;return this}setComponents(e,t,n,r){this.normal.set(e,t,n);this.constant=r;return this}setFromNormalAndCoplanarPoint(e,t){this.normal.copy(e);this.constant=-t.dot(this.normal);return this}setFromCoplanarPoints(e,t,n){const r=_vector1.subVectors(n,t).cross(_vector2.subVectors(e,t)).normalize();this.setFromNormalAndCoplanarPoint(r,e);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.normal.copy(e.normal);this.constant=e.constant;return this}normalize(){const e=1/this.normal.length();this.normal.multiplyScalar(e);this.constant*=e;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){if(t===undefined){console.warn("THREE.Plane: .projectPoint() target is now required");t=new Vector3}return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)}intersectLine(e,t){if(t===undefined){console.warn("THREE.Plane: .intersectLine() target is now required");t=new Vector3}const n=e.delta(_vector1);const r=this.normal.dot(n);if(r===0){if(this.distanceToPoint(e.start)===0){return t.copy(e.start)}return undefined}const i=-(e.start.dot(this.normal)+this.constant)/r;if(i<0||i>1){return undefined}return t.copy(n).multiplyScalar(i).add(e.start)}intersectsLine(e){const t=this.distanceToPoint(e.start);const n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){if(e===undefined){console.warn("THREE.Plane: .coplanarPoint() target is now required");e=new Vector3}return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||_normalMatrix.getNormalMatrix(e);const r=this.coplanarPoint(_vector1).applyMatrix4(e);const i=this.normal.applyMatrix3(n).normalize();this.constant=-r.dot(i);return this}translate(e){this.constant-=e.dot(this.normal);return this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}}const _v0$1=new Vector3;const _v1$3=new Vector3;const _v2$1=new Vector3;const _v3=new Vector3;const _vab=new Vector3;const _vac=new Vector3;const _vbc=new Vector3;const _vap=new Vector3;const _vbp=new Vector3;const _vcp=new Vector3;class Triangle{constructor(e,t,n){this.a=e!==undefined?e:new Vector3;this.b=t!==undefined?t:new Vector3;this.c=n!==undefined?n:new Vector3}static getNormal(e,t,n,r){if(r===undefined){console.warn("THREE.Triangle: .getNormal() target is now required");r=new Vector3}r.subVectors(n,t);_v0$1.subVectors(e,t);r.cross(_v0$1);const i=r.lengthSq();if(i>0){return r.multiplyScalar(1/Math.sqrt(i))}return r.set(0,0,0)}static getBarycoord(e,t,n,r,i){_v0$1.subVectors(r,t);_v1$3.subVectors(n,t);_v2$1.subVectors(e,t);const a=_v0$1.dot(_v0$1);const o=_v0$1.dot(_v1$3);const s=_v0$1.dot(_v2$1);const c=_v1$3.dot(_v1$3);const l=_v1$3.dot(_v2$1);const u=a*c-o*o;if(i===undefined){console.warn("THREE.Triangle: .getBarycoord() target is now required");i=new Vector3}if(u===0){return i.set(-2,-1,-1)}const h=1/u;const f=(c*s-o*l)*h;const d=(a*l-o*s)*h;return i.set(1-f-d,d,f)}static containsPoint(e,t,n,r){this.getBarycoord(e,t,n,r,_v3);return _v3.x>=0&&_v3.y>=0&&_v3.x+_v3.y<=1}static getUV(e,t,n,r,i,a,o,s){this.getBarycoord(e,t,n,r,_v3);s.set(0,0);s.addScaledVector(i,_v3.x);s.addScaledVector(a,_v3.y);s.addScaledVector(o,_v3.z);return s}static isFrontFacing(e,t,n,r){_v0$1.subVectors(n,t);_v1$3.subVectors(e,t);return _v0$1.cross(_v1$3).dot(r)<0?true:false}set(e,t,n){this.a.copy(e);this.b.copy(t);this.c.copy(n);return this}setFromPointsAndIndices(e,t,n,r){this.a.copy(e[t]);this.b.copy(e[n]);this.c.copy(e[r]);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.a.copy(e.a);this.b.copy(e.b);this.c.copy(e.c);return this}getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*.5}getMidpoint(e){if(e===undefined){console.warn("THREE.Triangle: .getMidpoint() target is now required");e=new Vector3}return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return Triangle.getNormal(this.a,this.b,this.c,e)}getPlane(e){if(e===undefined){console.warn("THREE.Triangle: .getPlane() target is now required");e=new Plane}return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return Triangle.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,r,i){return Triangle.getUV(e,this.a,this.b,this.c,t,n,r,i)}containsPoint(e){return Triangle.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return Triangle.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){if(t===undefined){console.warn("THREE.Triangle: .closestPointToPoint() target is now required");t=new Vector3}const n=this.a,r=this.b,i=this.c;let a,o;_vab.subVectors(r,n);_vac.subVectors(i,n);_vap.subVectors(e,n);const s=_vab.dot(_vap);const c=_vac.dot(_vap);if(s<=0&&c<=0){return t.copy(n)}_vbp.subVectors(e,r);const l=_vab.dot(_vbp);const u=_vac.dot(_vbp);if(l>=0&&u<=l){return t.copy(r)}const h=s*u-l*c;if(h<=0&&s>=0&&l<=0){a=s/(s-l);return t.copy(n).addScaledVector(_vab,a)}_vcp.subVectors(e,i);const f=_vab.dot(_vcp);const d=_vac.dot(_vcp);if(d>=0&&f<=d){return t.copy(i)}const p=f*c-s*d;if(p<=0&&c>=0&&d<=0){o=c/(c-d);return t.copy(n).addScaledVector(_vac,o)}const m=l*d-f*u;if(m<=0&&u-l>=0&&f-d>=0){_vbc.subVectors(i,r);o=(u-l)/(u-l+(f-d));return t.copy(r).addScaledVector(_vbc,o)}const g=1/(m+p+h);a=p*g;o=h*g;return t.copy(n).addScaledVector(_vab,a).addScaledVector(_vac,o)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const _colorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};const _hslA={h:0,s:0,l:0};const _hslB={h:0,s:0,l:0};function hue2rgb(e,t,n){if(n<0)n+=1;if(n>1)n-=1;if(n<1/6)return e+(t-e)*6*n;if(n<1/2)return t;if(n<2/3)return e+(t-e)*6*(2/3-n);return e}function SRGBToLinear(e){return e<.04045?e*.0773993808:Math.pow(e*.9478672986+.0521327014,2.4)}function LinearToSRGB(e){return e<.0031308?e*12.92:1.055*Math.pow(e,.41666)-.055}class Color{constructor(e,t,n){Object.defineProperty(this,"isColor",{value:true});if(t===undefined&&n===undefined){return this.set(e)}return this.setRGB(e,t,n)}set(e){if(e&&e.isColor){this.copy(e)}else if(typeof e==="number"){this.setHex(e)}else if(typeof e==="string"){this.setStyle(e)}return this}setScalar(e){this.r=e;this.g=e;this.b=e;return this}setHex(e){e=Math.floor(e);this.r=(e>>16&255)/255;this.g=(e>>8&255)/255;this.b=(e&255)/255;return this}setRGB(e,t,n){this.r=e;this.g=t;this.b=n;return this}setHSL(e,t,n){e=MathUtils.euclideanModulo(e,1);t=MathUtils.clamp(t,0,1);n=MathUtils.clamp(n,0,1);if(t===0){this.r=this.g=this.b=n}else{const r=n<=.5?n*(1+t):n+t-n*t;const i=2*n-r;this.r=hue2rgb(i,r,e+1/3);this.g=hue2rgb(i,r,e);this.b=hue2rgb(i,r,e-1/3)}return this}setStyle(e){function t(t){if(t===undefined)return;if(parseFloat(t)<1){console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}}let n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){let e;const r=n[1];const i=n[2];switch(r){case"rgb":case"rgba":if(e=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i)){this.r=Math.min(255,parseInt(e[1],10))/255;this.g=Math.min(255,parseInt(e[2],10))/255;this.b=Math.min(255,parseInt(e[3],10))/255;t(e[5]);return this}if(e=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i)){this.r=Math.min(100,parseInt(e[1],10))/100;this.g=Math.min(100,parseInt(e[2],10))/100;this.b=Math.min(100,parseInt(e[3],10))/100;t(e[5]);return this}break;case"hsl":case"hsla":if(e=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(i)){const n=parseFloat(e[1])/360;const r=parseInt(e[2],10)/100;const i=parseInt(e[3],10)/100;t(e[5]);return this.setHSL(n,r,i)}break}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(e)){const e=n[1];const t=e.length;if(t===3){this.r=parseInt(e.charAt(0)+e.charAt(0),16)/255;this.g=parseInt(e.charAt(1)+e.charAt(1),16)/255;this.b=parseInt(e.charAt(2)+e.charAt(2),16)/255;return this}else if(t===6){this.r=parseInt(e.charAt(0)+e.charAt(1),16)/255;this.g=parseInt(e.charAt(2)+e.charAt(3),16)/255;this.b=parseInt(e.charAt(4)+e.charAt(5),16)/255;return this}}if(e&&e.length>0){return this.setColorName(e)}return this}setColorName(e){const t=_colorKeywords[e];if(t!==undefined){this.setHex(t)}else{console.warn("THREE.Color: Unknown color "+e)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){this.r=e.r;this.g=e.g;this.b=e.b;return this}copyGammaToLinear(e,t){if(t===undefined)t=2;this.r=Math.pow(e.r,t);this.g=Math.pow(e.g,t);this.b=Math.pow(e.b,t);return this}copyLinearToGamma(e,t){if(t===undefined)t=2;const n=t>0?1/t:1;this.r=Math.pow(e.r,n);this.g=Math.pow(e.g,n);this.b=Math.pow(e.b,n);return this}convertGammaToLinear(e){this.copyGammaToLinear(this,e);return this}convertLinearToGamma(e){this.copyLinearToGamma(this,e);return this}copySRGBToLinear(e){this.r=SRGBToLinear(e.r);this.g=SRGBToLinear(e.g);this.b=SRGBToLinear(e.b);return this}copyLinearToSRGB(e){this.r=LinearToSRGB(e.r);this.g=LinearToSRGB(e.g);this.b=LinearToSRGB(e.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(e){if(e===undefined){console.warn("THREE.Color: .getHSL() target is now required");e={h:0,s:0,l:0}}const t=this.r,n=this.g,r=this.b;const i=Math.max(t,n,r);const a=Math.min(t,n,r);let o,s;const c=(a+i)/2;if(a===i){o=0;s=0}else{const e=i-a;s=c<=.5?e/(i+a):e/(2-i-a);switch(i){case t:o=(n-r)/e+(n<r?6:0);break;case n:o=(r-t)/e+2;break;case r:o=(t-n)/e+4;break}o/=6}e.h=o;e.s=s;e.l=c;return e}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(e,t,n){this.getHSL(_hslA);_hslA.h+=e;_hslA.s+=t;_hslA.l+=n;this.setHSL(_hslA.h,_hslA.s,_hslA.l);return this}add(e){this.r+=e.r;this.g+=e.g;this.b+=e.b;return this}addColors(e,t){this.r=e.r+t.r;this.g=e.g+t.g;this.b=e.b+t.b;return this}addScalar(e){this.r+=e;this.g+=e;this.b+=e;return this}sub(e){this.r=Math.max(0,this.r-e.r);this.g=Math.max(0,this.g-e.g);this.b=Math.max(0,this.b-e.b);return this}multiply(e){this.r*=e.r;this.g*=e.g;this.b*=e.b;return this}multiplyScalar(e){this.r*=e;this.g*=e;this.b*=e;return this}lerp(e,t){this.r+=(e.r-this.r)*t;this.g+=(e.g-this.g)*t;this.b+=(e.b-this.b)*t;return this}lerpHSL(e,t){this.getHSL(_hslA);e.getHSL(_hslB);const n=MathUtils.lerp(_hslA.h,_hslB.h,t);const r=MathUtils.lerp(_hslA.s,_hslB.s,t);const i=MathUtils.lerp(_hslA.l,_hslB.l,t);this.setHSL(n,r,i);return this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t){if(t===undefined)t=0;this.r=e[t];this.g=e[t+1];this.b=e[t+2];return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;e[t]=this.r;e[t+1]=this.g;e[t+2]=this.b;return e}fromBufferAttribute(e,t){this.r=e.getX(t);this.g=e.getY(t);this.b=e.getZ(t);if(e.normalized===true){this.r/=255;this.g/=255;this.b/=255}return this}toJSON(){return this.getHex()}}Color.NAMES=_colorKeywords;Color.prototype.r=1;Color.prototype.g=1;Color.prototype.b=1;class Face3{constructor(e,t,n,r,i,a){this.a=e;this.b=t;this.c=n;this.normal=r&&r.isVector3?r:new Vector3;this.vertexNormals=Array.isArray(r)?r:[];this.color=i&&i.isColor?i:new Color;this.vertexColors=Array.isArray(i)?i:[];this.materialIndex=a!==undefined?a:0}clone(){return(new this.constructor).copy(this)}copy(e){this.a=e.a;this.b=e.b;this.c=e.c;this.normal.copy(e.normal);this.color.copy(e.color);this.materialIndex=e.materialIndex;for(let t=0,n=e.vertexNormals.length;t<n;t++){this.vertexNormals[t]=e.vertexNormals[t].clone()}for(let t=0,n=e.vertexColors.length;t<n;t++){this.vertexColors[t]=e.vertexColors[t].clone()}return this}}let materialId=0;function Material(){Object.defineProperty(this,"id",{value:materialId++});this.uuid=MathUtils.generateUUID();this.name="";this.type="Material";this.fog=true;this.blending=NormalBlending;this.side=FrontSide;this.flatShading=false;this.vertexColors=false;this.opacity=1;this.transparent=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=AlwaysStencilFunc;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=KeepStencilOp;this.stencilZFail=KeepStencilOp;this.stencilZPass=KeepStencilOp;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaTest=0;this.premultipliedAlpha=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0}Material.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Material,isMaterial:true,onBeforeCompile:function(){},customProgramCacheKey:function(){return this.onBeforeCompile.toString()},setValues:function(e){if(e===undefined)return;for(const t in e){const n=e[t];if(n===undefined){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if(t==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=n===FlatShading?true:false;continue}const r=this[t];if(r===undefined){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}if(r&&r.isColor){r.set(n)}else if(r&&r.isVector3&&(n&&n.isVector3)){r.copy(n)}else{this[t]=n}}},toJSON:function(e){const t=e===undefined||typeof e==="string";if(t){e={textures:{},images:{}}}const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==undefined)n.roughness=this.roughness;if(this.metalness!==undefined)n.metalness=this.metalness;if(this.sheen&&this.sheen.isColor)n.sheen=this.sheen.getHex();if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.shininess!==undefined)n.shininess=this.shininess;if(this.clearcoat!==undefined)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(e).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(e).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(e).uuid;if(this.lightMap&&this.lightMap.isTexture)n.lightMap=this.lightMap.toJSON(e).uuid;if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(e).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(e).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(e).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(e).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(e).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(e).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(e).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(e).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(e).uuid;n.reflectivity=this.reflectivity;n.refractionRatio=this.refractionRatio;if(this.combine!==undefined)n.combine=this.combine;if(this.envMapIntensity!==undefined)n.envMapIntensity=this.envMapIntensity}if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(e).uuid}if(this.size!==undefined)n.size=this.size;if(this.sizeAttenuation!==undefined)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)n.blending=this.blending;if(this.flatShading===true)n.flatShading=this.flatShading;if(this.side!==FrontSide)n.side=this.side;if(this.vertexColors)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=this.transparent;n.depthFunc=this.depthFunc;n.depthTest=this.depthTest;n.depthWrite=this.depthWrite;n.stencilWrite=this.stencilWrite;n.stencilWriteMask=this.stencilWriteMask;n.stencilFunc=this.stencilFunc;n.stencilRef=this.stencilRef;n.stencilFuncMask=this.stencilFuncMask;n.stencilFail=this.stencilFail;n.stencilZFail=this.stencilZFail;n.stencilZPass=this.stencilZPass;if(this.rotation&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==undefined)n.dashSize=this.dashSize;if(this.gapSize!==undefined)n.gapSize=this.gapSize;if(this.scale!==undefined)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.premultipliedAlpha===true)n.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)n.wireframe=this.wireframe;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.morphTargets===true)n.morphTargets=true;if(this.morphNormals===true)n.morphNormals=true;if(this.skinning===true)n.skinning=true;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(JSON.stringify(this.userData)!=="{}")n.userData=this.userData;function r(e){const t=[];for(const n in e){const r=e[n];delete r.metadata;t.push(r)}return t}if(t){const t=r(e.textures);const i=r(e.images);if(t.length>0)n.textures=t;if(i.length>0)n.images=i}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name;this.fog=e.fog;this.blending=e.blending;this.side=e.side;this.flatShading=e.flatShading;this.vertexColors=e.vertexColors;this.opacity=e.opacity;this.transparent=e.transparent;this.blendSrc=e.blendSrc;this.blendDst=e.blendDst;this.blendEquation=e.blendEquation;this.blendSrcAlpha=e.blendSrcAlpha;this.blendDstAlpha=e.blendDstAlpha;this.blendEquationAlpha=e.blendEquationAlpha;this.depthFunc=e.depthFunc;this.depthTest=e.depthTest;this.depthWrite=e.depthWrite;this.stencilWriteMask=e.stencilWriteMask;this.stencilFunc=e.stencilFunc;this.stencilRef=e.stencilRef;this.stencilFuncMask=e.stencilFuncMask;this.stencilFail=e.stencilFail;this.stencilZFail=e.stencilZFail;this.stencilZPass=e.stencilZPass;this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const e=t.length;n=new Array(e);for(let r=0;r!==e;++r){n[r]=t[r].clone()}}this.clippingPlanes=n;this.clipIntersection=e.clipIntersection;this.clipShadows=e.clipShadows;this.shadowSide=e.shadowSide;this.colorWrite=e.colorWrite;this.precision=e.precision;this.polygonOffset=e.polygonOffset;this.polygonOffsetFactor=e.polygonOffsetFactor;this.polygonOffsetUnits=e.polygonOffsetUnits;this.dithering=e.dithering;this.alphaTest=e.alphaTest;this.premultipliedAlpha=e.premultipliedAlpha;this.visible=e.visible;this.toneMapped=e.toneMapped;this.userData=JSON.parse(JSON.stringify(e.userData));return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Object.defineProperty(Material.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});function MeshBasicMaterial(e){Material.call(this);this.type="MeshBasicMaterial";this.color=new Color(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.setValues(e)}MeshBasicMaterial.prototype=Object.create(Material.prototype);MeshBasicMaterial.prototype.constructor=MeshBasicMaterial;MeshBasicMaterial.prototype.isMeshBasicMaterial=true;MeshBasicMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;return this};const _vector$3=new Vector3;const _vector2$1=new Vector2;function BufferAttribute(e,t,n){if(Array.isArray(e)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.name="";this.array=e;this.itemSize=t;this.count=e!==undefined?e.length/t:0;this.normalized=n===true;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0}Object.defineProperty(BufferAttribute.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});Object.assign(BufferAttribute.prototype,{isBufferAttribute:true,onUploadCallback:function(){},setUsage:function(e){this.usage=e;return this},copy:function(e){this.name=e.name;this.array=new e.array.constructor(e.array);this.itemSize=e.itemSize;this.count=e.count;this.normalized=e.normalized;this.usage=e.usage;return this},copyAt:function(e,t,n){e*=this.itemSize;n*=t.itemSize;for(let r=0,i=this.itemSize;r<i;r++){this.array[e+r]=t.array[n+r]}return this},copyArray:function(e){this.array.set(e);return this},copyColorsArray:function(e){const t=this.array;let n=0;for(let r=0,i=e.length;r<i;r++){let i=e[r];if(i===undefined){console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",r);i=new Color}t[n++]=i.r;t[n++]=i.g;t[n++]=i.b}return this},copyVector2sArray:function(e){const t=this.array;let n=0;for(let r=0,i=e.length;r<i;r++){let i=e[r];if(i===undefined){console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",r);i=new Vector2}t[n++]=i.x;t[n++]=i.y}return this},copyVector3sArray:function(e){const t=this.array;let n=0;for(let r=0,i=e.length;r<i;r++){let i=e[r];if(i===undefined){console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",r);i=new Vector3}t[n++]=i.x;t[n++]=i.y;t[n++]=i.z}return this},copyVector4sArray:function(e){const t=this.array;let n=0;for(let r=0,i=e.length;r<i;r++){let i=e[r];if(i===undefined){console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",r);i=new Vector4}t[n++]=i.x;t[n++]=i.y;t[n++]=i.z;t[n++]=i.w}return this},applyMatrix3:function(e){if(this.itemSize===2){for(let t=0,n=this.count;t<n;t++){_vector2$1.fromBufferAttribute(this,t);_vector2$1.applyMatrix3(e);this.setXY(t,_vector2$1.x,_vector2$1.y)}}else if(this.itemSize===3){for(let t=0,n=this.count;t<n;t++){_vector$3.fromBufferAttribute(this,t);_vector$3.applyMatrix3(e);this.setXYZ(t,_vector$3.x,_vector$3.y,_vector$3.z)}}return this},applyMatrix4:function(e){for(let t=0,n=this.count;t<n;t++){_vector$3.x=this.getX(t);_vector$3.y=this.getY(t);_vector$3.z=this.getZ(t);_vector$3.applyMatrix4(e);this.setXYZ(t,_vector$3.x,_vector$3.y,_vector$3.z)}return this},applyNormalMatrix:function(e){for(let t=0,n=this.count;t<n;t++){_vector$3.x=this.getX(t);_vector$3.y=this.getY(t);_vector$3.z=this.getZ(t);_vector$3.applyNormalMatrix(e);this.setXYZ(t,_vector$3.x,_vector$3.y,_vector$3.z)}return this},transformDirection:function(e){for(let t=0,n=this.count;t<n;t++){_vector$3.x=this.getX(t);_vector$3.y=this.getY(t);_vector$3.z=this.getZ(t);_vector$3.transformDirection(e);this.setXYZ(t,_vector$3.x,_vector$3.y,_vector$3.z)}return this},set:function(e,t){if(t===undefined)t=0;this.array.set(e,t);return this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){this.array[e*this.itemSize]=t;return this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){this.array[e*this.itemSize+1]=t;return this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){this.array[e*this.itemSize+2]=t;return this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){this.array[e*this.itemSize+3]=t;return this},setXY:function(e,t,n){e*=this.itemSize;this.array[e+0]=t;this.array[e+1]=n;return this},setXYZ:function(e,t,n,r){e*=this.itemSize;this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;return this},setXYZW:function(e,t,n,r,i){e*=this.itemSize;this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;this.array[e+3]=i;return this},onUpload:function(e){this.onUploadCallback=e;return this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}});function Int8BufferAttribute(e,t,n){BufferAttribute.call(this,new Int8Array(e),t,n)}Int8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int8BufferAttribute.prototype.constructor=Int8BufferAttribute;function Uint8BufferAttribute(e,t,n){BufferAttribute.call(this,new Uint8Array(e),t,n)}Uint8BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8BufferAttribute.prototype.constructor=Uint8BufferAttribute;function Uint8ClampedBufferAttribute(e,t,n){BufferAttribute.call(this,new Uint8ClampedArray(e),t,n)}Uint8ClampedBufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint8ClampedBufferAttribute.prototype.constructor=Uint8ClampedBufferAttribute;function Int16BufferAttribute(e,t,n){BufferAttribute.call(this,new Int16Array(e),t,n)}Int16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int16BufferAttribute.prototype.constructor=Int16BufferAttribute;function Uint16BufferAttribute(e,t,n){BufferAttribute.call(this,new Uint16Array(e),t,n)}Uint16BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint16BufferAttribute.prototype.constructor=Uint16BufferAttribute;function Int32BufferAttribute(e,t,n){BufferAttribute.call(this,new Int32Array(e),t,n)}Int32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Int32BufferAttribute.prototype.constructor=Int32BufferAttribute;function Uint32BufferAttribute(e,t,n){BufferAttribute.call(this,new Uint32Array(e),t,n)}Uint32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Uint32BufferAttribute.prototype.constructor=Uint32BufferAttribute;function Float32BufferAttribute(e,t,n){BufferAttribute.call(this,new Float32Array(e),t,n)}Float32BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float32BufferAttribute.prototype.constructor=Float32BufferAttribute;function Float64BufferAttribute(e,t,n){BufferAttribute.call(this,new Float64Array(e),t,n)}Float64BufferAttribute.prototype=Object.create(BufferAttribute.prototype);Float64BufferAttribute.prototype.constructor=Float64BufferAttribute;class DirectGeometry{constructor(){this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=[];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];this.boundingBox=null;this.boundingSphere=null;this.verticesNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.uvsNeedUpdate=false;this.groupsNeedUpdate=false}computeGroups(e){const t=[];let n,r;let i=undefined;const a=e.faces;for(r=0;r<a.length;r++){const e=a[r];if(e.materialIndex!==i){i=e.materialIndex;if(n!==undefined){n.count=r*3-n.start;t.push(n)}n={start:r*3,materialIndex:i}}}if(n!==undefined){n.count=r*3-n.start;t.push(n)}this.groups=t}fromGeometry(e){const t=e.faces;const n=e.vertices;const r=e.faceVertexUvs;const i=r[0]&&r[0].length>0;const a=r[1]&&r[1].length>0;const o=e.morphTargets;const s=o.length;let c;if(s>0){c=[];for(let e=0;e<s;e++){c[e]={name:o[e].name,data:[]}}this.morphTargets.position=c}const l=e.morphNormals;const u=l.length;let h;if(u>0){h=[];for(let e=0;e<u;e++){h[e]={name:l[e].name,data:[]}}this.morphTargets.normal=h}const f=e.skinIndices;const d=e.skinWeights;const p=f.length===n.length;const m=d.length===n.length;if(n.length>0&&t.length===0){console.error("THREE.DirectGeometry: Faceless geometries are not supported.")}for(let e=0;e<t.length;e++){const g=t[e];this.vertices.push(n[g.a],n[g.b],n[g.c]);const y=g.vertexNormals;if(y.length===3){this.normals.push(y[0],y[1],y[2])}else{const e=g.normal;this.normals.push(e,e,e)}const v=g.vertexColors;if(v.length===3){this.colors.push(v[0],v[1],v[2])}else{const e=g.color;this.colors.push(e,e,e)}if(i===true){const t=r[0][e];if(t!==undefined){this.uvs.push(t[0],t[1],t[2])}else{console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",e);this.uvs.push(new Vector2,new Vector2,new Vector2)}}if(a===true){const t=r[1][e];if(t!==undefined){this.uvs2.push(t[0],t[1],t[2])}else{console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",e);this.uvs2.push(new Vector2,new Vector2,new Vector2)}}for(let e=0;e<s;e++){const t=o[e].vertices;c[e].data.push(t[g.a],t[g.b],t[g.c])}for(let t=0;t<u;t++){const n=l[t].vertexNormals[e];h[t].data.push(n.a,n.b,n.c)}if(p){this.skinIndices.push(f[g.a],f[g.b],f[g.c])}if(m){this.skinWeights.push(d[g.a],d[g.b],d[g.c])}}this.computeGroups(e);this.verticesNeedUpdate=e.verticesNeedUpdate;this.normalsNeedUpdate=e.normalsNeedUpdate;this.colorsNeedUpdate=e.colorsNeedUpdate;this.uvsNeedUpdate=e.uvsNeedUpdate;this.groupsNeedUpdate=e.groupsNeedUpdate;if(e.boundingSphere!==null){this.boundingSphere=e.boundingSphere.clone()}if(e.boundingBox!==null){this.boundingBox=e.boundingBox.clone()}return this}}function arrayMax(e){if(e.length===0)return-Infinity;let t=e[0];for(let n=1,r=e.length;n<r;++n){if(e[n]>t)t=e[n]}return t}let _bufferGeometryId=1;const _m1$2=new Matrix4;const _obj=new Object3D;const _offset=new Vector3;const _box$2=new Box3;const _boxMorphTargets=new Box3;const _vector$4=new Vector3;function BufferGeometry(){Object.defineProperty(this,"id",{value:_bufferGeometryId+=2});this.uuid=MathUtils.generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}BufferGeometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:BufferGeometry,isBufferGeometry:true,getIndex:function(){return this.index},setIndex:function(e){if(Array.isArray(e)){this.index=new(arrayMax(e)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(e,1)}else{this.index=e}},getAttribute:function(e){return this.attributes[e]},setAttribute:function(e,t){this.attributes[e]=t;return this},deleteAttribute:function(e){delete this.attributes[e];return this},addGroup:function(e,t,n){this.groups.push({start:e,count:t,materialIndex:n!==undefined?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e;this.drawRange.count=t},applyMatrix4:function(e){const t=this.attributes.position;if(t!==undefined){t.applyMatrix4(e);t.needsUpdate=true}const n=this.attributes.normal;if(n!==undefined){const t=(new Matrix3).getNormalMatrix(e);n.applyNormalMatrix(t);n.needsUpdate=true}const r=this.attributes.tangent;if(r!==undefined){r.transformDirection(e);r.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this},rotateX:function(e){_m1$2.makeRotationX(e);this.applyMatrix4(_m1$2);return this},rotateY:function(e){_m1$2.makeRotationY(e);this.applyMatrix4(_m1$2);return this},rotateZ:function(e){_m1$2.makeRotationZ(e);this.applyMatrix4(_m1$2);return this},translate:function(e,t,n){_m1$2.makeTranslation(e,t,n);this.applyMatrix4(_m1$2);return this},scale:function(e,t,n){_m1$2.makeScale(e,t,n);this.applyMatrix4(_m1$2);return this},lookAt:function(e){_obj.lookAt(e);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this},center:function(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this},setFromObject:function(e){const t=e.geometry;if(e.isPoints||e.isLine){const e=new Float32BufferAttribute(t.vertices.length*3,3);const n=new Float32BufferAttribute(t.colors.length*3,3);this.setAttribute("position",e.copyVector3sArray(t.vertices));this.setAttribute("color",n.copyColorsArray(t.colors));if(t.lineDistances&&t.lineDistances.length===t.vertices.length){const e=new Float32BufferAttribute(t.lineDistances.length,1);this.setAttribute("lineDistance",e.copyArray(t.lineDistances))}if(t.boundingSphere!==null){this.boundingSphere=t.boundingSphere.clone()}if(t.boundingBox!==null){this.boundingBox=t.boundingBox.clone()}}else if(e.isMesh){if(t&&t.isGeometry){this.fromGeometry(t)}}return this},setFromPoints:function(e){const t=[];for(let n=0,r=e.length;n<r;n++){const r=e[n];t.push(r.x,r.y,r.z||0)}this.setAttribute("position",new Float32BufferAttribute(t,3));return this},updateFromObject:function(e){let t=e.geometry;if(e.isMesh){let e=t.__directGeometry;if(t.elementsNeedUpdate===true){e=undefined;t.elementsNeedUpdate=false}if(e===undefined){return this.fromGeometry(t)}e.verticesNeedUpdate=t.verticesNeedUpdate;e.normalsNeedUpdate=t.normalsNeedUpdate;e.colorsNeedUpdate=t.colorsNeedUpdate;e.uvsNeedUpdate=t.uvsNeedUpdate;e.groupsNeedUpdate=t.groupsNeedUpdate;t.verticesNeedUpdate=false;t.normalsNeedUpdate=false;t.colorsNeedUpdate=false;t.uvsNeedUpdate=false;t.groupsNeedUpdate=false;t=e}if(t.verticesNeedUpdate===true){const e=this.attributes.position;if(e!==undefined){e.copyVector3sArray(t.vertices);e.needsUpdate=true}t.verticesNeedUpdate=false}if(t.normalsNeedUpdate===true){const e=this.attributes.normal;if(e!==undefined){e.copyVector3sArray(t.normals);e.needsUpdate=true}t.normalsNeedUpdate=false}if(t.colorsNeedUpdate===true){const e=this.attributes.color;if(e!==undefined){e.copyColorsArray(t.colors);e.needsUpdate=true}t.colorsNeedUpdate=false}if(t.uvsNeedUpdate){const e=this.attributes.uv;if(e!==undefined){e.copyVector2sArray(t.uvs);e.needsUpdate=true}t.uvsNeedUpdate=false}if(t.lineDistancesNeedUpdate){const e=this.attributes.lineDistance;if(e!==undefined){e.copyArray(t.lineDistances);e.needsUpdate=true}t.lineDistancesNeedUpdate=false}if(t.groupsNeedUpdate){t.computeGroups(e.geometry);this.groups=t.groups;t.groupsNeedUpdate=false}return this},fromGeometry:function(e){e.__directGeometry=(new DirectGeometry).fromGeometry(e);return this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){const t=new Float32Array(e.vertices.length*3);this.setAttribute("position",new BufferAttribute(t,3).copyVector3sArray(e.vertices));if(e.normals.length>0){const t=new Float32Array(e.normals.length*3);this.setAttribute("normal",new BufferAttribute(t,3).copyVector3sArray(e.normals))}if(e.colors.length>0){const t=new Float32Array(e.colors.length*3);this.setAttribute("color",new BufferAttribute(t,3).copyColorsArray(e.colors))}if(e.uvs.length>0){const t=new Float32Array(e.uvs.length*2);this.setAttribute("uv",new BufferAttribute(t,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){const t=new Float32Array(e.uvs2.length*2);this.setAttribute("uv2",new BufferAttribute(t,2).copyVector2sArray(e.uvs2))}this.groups=e.groups;for(const t in e.morphTargets){const n=[];const r=e.morphTargets[t];for(let e=0,t=r.length;e<t;e++){const t=r[e];const i=new Float32BufferAttribute(t.data.length*3,3);i.name=t.name;n.push(i.copyVector3sArray(t.data))}this.morphAttributes[t]=n}if(e.skinIndices.length>0){const t=new Float32BufferAttribute(e.skinIndices.length*4,4);this.setAttribute("skinIndex",t.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){const t=new Float32BufferAttribute(e.skinWeights.length*4,4);this.setAttribute("skinWeight",t.copyVector4sArray(e.skinWeights))}if(e.boundingSphere!==null){this.boundingSphere=e.boundingSphere.clone()}if(e.boundingBox!==null){this.boundingBox=e.boundingBox.clone()}return this},computeBoundingBox:function(){if(this.boundingBox===null){this.boundingBox=new Box3}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingBox.set(new Vector3(-Infinity,-Infinity,-Infinity),new Vector3(+Infinity,+Infinity,+Infinity));return}if(e!==undefined){this.boundingBox.setFromBufferAttribute(e);if(t){for(let e=0,n=t.length;e<n;e++){const n=t[e];_box$2.setFromBufferAttribute(n);if(this.morphTargetsRelative){_vector$4.addVectors(this.boundingBox.min,_box$2.min);this.boundingBox.expandByPoint(_vector$4);_vector$4.addVectors(this.boundingBox.max,_box$2.max);this.boundingBox.expandByPoint(_vector$4)}else{this.boundingBox.expandByPoint(_box$2.min);this.boundingBox.expandByPoint(_box$2.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}},computeBoundingSphere:function(){if(this.boundingSphere===null){this.boundingSphere=new Sphere}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingSphere.set(new Vector3,Infinity);return}if(e){const n=this.boundingSphere.center;_box$2.setFromBufferAttribute(e);if(t){for(let e=0,n=t.length;e<n;e++){const n=t[e];_boxMorphTargets.setFromBufferAttribute(n);if(this.morphTargetsRelative){_vector$4.addVectors(_box$2.min,_boxMorphTargets.min);_box$2.expandByPoint(_vector$4);_vector$4.addVectors(_box$2.max,_boxMorphTargets.max);_box$2.expandByPoint(_vector$4)}else{_box$2.expandByPoint(_boxMorphTargets.min);_box$2.expandByPoint(_boxMorphTargets.max)}}}_box$2.getCenter(n);let r=0;for(let t=0,i=e.count;t<i;t++){_vector$4.fromBufferAttribute(e,t);r=Math.max(r,n.distanceToSquared(_vector$4))}if(t){for(let i=0,a=t.length;i<a;i++){const a=t[i];const o=this.morphTargetsRelative;for(let t=0,i=a.count;t<i;t++){_vector$4.fromBufferAttribute(a,t);if(o){_offset.fromBufferAttribute(e,t);_vector$4.add(_offset)}r=Math.max(r,n.distanceToSquared(_vector$4))}}}this.boundingSphere.radius=Math.sqrt(r);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}},computeFaceNormals:function(){},computeVertexNormals:function(){const e=this.index;const t=this.getAttribute("position");if(t!==undefined){let n=this.getAttribute("normal");if(n===undefined){n=new BufferAttribute(new Float32Array(t.count*3),3);this.setAttribute("normal",n)}else{for(let e=0,t=n.count;e<t;e++){n.setXYZ(e,0,0,0)}}const r=new Vector3,i=new Vector3,a=new Vector3;const o=new Vector3,s=new Vector3,c=new Vector3;const l=new Vector3,u=new Vector3;if(e){for(let h=0,f=e.count;h<f;h+=3){const f=e.getX(h+0);const d=e.getX(h+1);const p=e.getX(h+2);r.fromBufferAttribute(t,f);i.fromBufferAttribute(t,d);a.fromBufferAttribute(t,p);l.subVectors(a,i);u.subVectors(r,i);l.cross(u);o.fromBufferAttribute(n,f);s.fromBufferAttribute(n,d);c.fromBufferAttribute(n,p);o.add(l);s.add(l);c.add(l);n.setXYZ(f,o.x,o.y,o.z);n.setXYZ(d,s.x,s.y,s.z);n.setXYZ(p,c.x,c.y,c.z)}}else{for(let e=0,o=t.count;e<o;e+=3){r.fromBufferAttribute(t,e+0);i.fromBufferAttribute(t,e+1);a.fromBufferAttribute(t,e+2);l.subVectors(a,i);u.subVectors(r,i);l.cross(u);n.setXYZ(e+0,l.x,l.y,l.z);n.setXYZ(e+1,l.x,l.y,l.z);n.setXYZ(e+2,l.x,l.y,l.z)}}this.normalizeNormals();n.needsUpdate=true}},merge:function(e,t){if(!(e&&e.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);return}if(t===undefined){t=0;console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. "+"Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.")}const n=this.attributes;for(const r in n){if(e.attributes[r]===undefined)continue;const i=n[r];const a=i.array;const o=e.attributes[r];const s=o.array;const c=o.itemSize*t;const l=Math.min(s.length,a.length-c);for(let e=0,t=c;e<l;e++,t++){a[t]=s[e]}}return this},normalizeNormals:function(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++){_vector$4.fromBufferAttribute(e,t);_vector$4.normalize();e.setXYZ(t,_vector$4.x,_vector$4.y,_vector$4.z)}},toNonIndexed:function(){function e(e,t){const n=e.array;const r=e.itemSize;const i=e.normalized;const a=new n.constructor(t.length*r);let o=0,s=0;for(let e=0,i=t.length;e<i;e++){o=t[e]*r;for(let e=0;e<r;e++){a[s++]=n[o++]}}return new BufferAttribute(a,r,i)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.");return this}const t=new BufferGeometry;const n=this.index.array;const r=this.attributes;for(const i in r){const a=r[i];const o=e(a,n);t.setAttribute(i,o)}const i=this.morphAttributes;for(const r in i){const a=[];const o=i[r];for(let t=0,r=o.length;t<r;t++){const r=o[t];const i=e(r,n);a.push(i)}t.morphAttributes[r]=a}t.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let e=0,n=a.length;e<n;e++){const n=a[e];t.addGroup(n.start,n.count,n.materialIndex)}return t},toJSON:function(){const e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};e.uuid=this.uuid;e.type=this.type;if(this.name!=="")e.name=this.name;if(Object.keys(this.userData).length>0)e.userData=this.userData;if(this.parameters!==undefined){const t=this.parameters;for(const n in t){if(t[n]!==undefined)e[n]=t[n]}return e}e.data={attributes:{}};const t=this.index;if(t!==null){e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)}}const n=this.attributes;for(const t in n){const r=n[t];const i=r.toJSON(e.data);if(r.name!=="")i.name=r.name;e.data.attributes[t]=i}const r={};let i=false;for(const t in this.morphAttributes){const n=this.morphAttributes[t];const a=[];for(let t=0,r=n.length;t<r;t++){const r=n[t];const i=r.toJSON(e.data);if(r.name!=="")i.name=r.name;a.push(i)}if(a.length>0){r[t]=a;i=true}}if(i){e.data.morphAttributes=r;e.data.morphTargetsRelative=this.morphTargetsRelative}const a=this.groups;if(a.length>0){e.data.groups=JSON.parse(JSON.stringify(a))}const o=this.boundingSphere;if(o!==null){e.data.boundingSphere={center:o.center.toArray(),radius:o.radius}}return e},clone:function(){return(new BufferGeometry).copy(this)},copy:function(e){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;if(n!==null){this.setIndex(n.clone(t))}const r=e.attributes;for(const e in r){const n=r[e];this.setAttribute(e,n.clone(t))}const i=e.morphAttributes;for(const e in i){const n=[];const r=i[e];for(let e=0,i=r.length;e<i;e++){n.push(r[e].clone(t))}this.morphAttributes[e]=n}this.morphTargetsRelative=e.morphTargetsRelative;const a=e.groups;for(let e=0,t=a.length;e<t;e++){const t=a[e];this.addGroup(t.start,t.count,t.materialIndex)}const o=e.boundingBox;if(o!==null){this.boundingBox=o.clone()}const s=e.boundingSphere;if(s!==null){this.boundingSphere=s.clone()}this.drawRange.start=e.drawRange.start;this.drawRange.count=e.drawRange.count;this.userData=e.userData;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});const _inverseMatrix=new Matrix4;const _ray=new Ray;const _sphere=new Sphere;const _vA=new Vector3;const _vB=new Vector3;const _vC=new Vector3;const _tempA=new Vector3;const _tempB=new Vector3;const _tempC=new Vector3;const _morphA=new Vector3;const _morphB=new Vector3;const _morphC=new Vector3;const _uvA=new Vector2;const _uvB=new Vector2;const _uvC=new Vector2;const _intersectionPoint=new Vector3;const _intersectionPointWorld=new Vector3;function Mesh(e,t){Object3D.call(this);this.type="Mesh";this.geometry=e!==undefined?e:new BufferGeometry;this.material=t!==undefined?t:new MeshBasicMaterial;this.updateMorphTargets()}Mesh.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Mesh,isMesh:true,copy:function(e){Object3D.prototype.copy.call(this,e);if(e.morphTargetInfluences!==undefined){this.morphTargetInfluences=e.morphTargetInfluences.slice()}if(e.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)}this.material=e.material;this.geometry=e.geometry;return this},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const e=t[n[0]];if(e!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let t=0,n=e.length;t<n;t++){const n=e[t].name||String(t);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=t}}}}else{const t=e.morphTargets;if(t!==undefined&&t.length>0){console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}},raycast:function(e,t){const n=this.geometry;const r=this.material;const i=this.matrixWorld;if(r===undefined)return;if(n.boundingSphere===null)n.computeBoundingSphere();_sphere.copy(n.boundingSphere);_sphere.applyMatrix4(i);if(e.ray.intersectsSphere(_sphere)===false)return;_inverseMatrix.getInverse(i);_ray.copy(e.ray).applyMatrix4(_inverseMatrix);if(n.boundingBox!==null){if(_ray.intersectsBox(n.boundingBox)===false)return}let a;if(n.isBufferGeometry){const i=n.index;const o=n.attributes.position;const s=n.morphAttributes.position;const c=n.morphTargetsRelative;const l=n.attributes.uv;const u=n.attributes.uv2;const h=n.groups;const f=n.drawRange;if(i!==null){if(Array.isArray(r)){for(let n=0,d=h.length;n<d;n++){const d=h[n];const p=r[d.materialIndex];const m=Math.max(d.start,f.start);const g=Math.min(d.start+d.count,f.start+f.count);for(let n=m,r=g;n<r;n+=3){const r=i.getX(n);const h=i.getX(n+1);const f=i.getX(n+2);a=checkBufferGeometryIntersection(this,p,e,_ray,o,s,c,l,u,r,h,f);if(a){a.faceIndex=Math.floor(n/3);a.face.materialIndex=d.materialIndex;t.push(a)}}}}else{const n=Math.max(0,f.start);const h=Math.min(i.count,f.start+f.count);for(let f=n,d=h;f<d;f+=3){const n=i.getX(f);const h=i.getX(f+1);const d=i.getX(f+2);a=checkBufferGeometryIntersection(this,r,e,_ray,o,s,c,l,u,n,h,d);if(a){a.faceIndex=Math.floor(f/3);t.push(a)}}}}else if(o!==undefined){if(Array.isArray(r)){for(let n=0,i=h.length;n<i;n++){const i=h[n];const d=r[i.materialIndex];const p=Math.max(i.start,f.start);const m=Math.min(i.start+i.count,f.start+f.count);for(let n=p,r=m;n<r;n+=3){const r=n;const h=n+1;const f=n+2;a=checkBufferGeometryIntersection(this,d,e,_ray,o,s,c,l,u,r,h,f);if(a){a.faceIndex=Math.floor(n/3);a.face.materialIndex=i.materialIndex;t.push(a)}}}}else{const n=Math.max(0,f.start);const i=Math.min(o.count,f.start+f.count);for(let h=n,f=i;h<f;h+=3){const n=h;const i=h+1;const f=h+2;a=checkBufferGeometryIntersection(this,r,e,_ray,o,s,c,l,u,n,i,f);if(a){a.faceIndex=Math.floor(h/3);t.push(a)}}}}}else if(n.isGeometry){const i=Array.isArray(r);const o=n.vertices;const s=n.faces;let c;const l=n.faceVertexUvs[0];if(l.length>0)c=l;for(let n=0,l=s.length;n<l;n++){const l=s[n];const u=i?r[l.materialIndex]:r;if(u===undefined)continue;const h=o[l.a];const f=o[l.b];const d=o[l.c];a=checkIntersection(this,u,e,_ray,h,f,d,_intersectionPoint);if(a){if(c&&c[n]){const e=c[n];_uvA.copy(e[0]);_uvB.copy(e[1]);_uvC.copy(e[2]);a.uv=Triangle.getUV(_intersectionPoint,h,f,d,_uvA,_uvB,_uvC,new Vector2)}a.face=l;a.faceIndex=n;t.push(a)}}}}});function checkIntersection(e,t,n,r,i,a,o,s){let c;if(t.side===BackSide){c=r.intersectTriangle(o,a,i,true,s)}else{c=r.intersectTriangle(i,a,o,t.side!==DoubleSide,s)}if(c===null)return null;_intersectionPointWorld.copy(s);_intersectionPointWorld.applyMatrix4(e.matrixWorld);const l=n.ray.origin.distanceTo(_intersectionPointWorld);if(l<n.near||l>n.far)return null;return{distance:l,point:_intersectionPointWorld.clone(),object:e}}function checkBufferGeometryIntersection(e,t,n,r,i,a,o,s,c,l,u,h){_vA.fromBufferAttribute(i,l);_vB.fromBufferAttribute(i,u);_vC.fromBufferAttribute(i,h);const f=e.morphTargetInfluences;if(t.morphTargets&&a&&f){_morphA.set(0,0,0);_morphB.set(0,0,0);_morphC.set(0,0,0);for(let e=0,t=a.length;e<t;e++){const t=f[e];const n=a[e];if(t===0)continue;_tempA.fromBufferAttribute(n,l);_tempB.fromBufferAttribute(n,u);_tempC.fromBufferAttribute(n,h);if(o){_morphA.addScaledVector(_tempA,t);_morphB.addScaledVector(_tempB,t);_morphC.addScaledVector(_tempC,t)}else{_morphA.addScaledVector(_tempA.sub(_vA),t);_morphB.addScaledVector(_tempB.sub(_vB),t);_morphC.addScaledVector(_tempC.sub(_vC),t)}}_vA.add(_morphA);_vB.add(_morphB);_vC.add(_morphC)}if(e.isSkinnedMesh){e.boneTransform(l,_vA);e.boneTransform(u,_vB);e.boneTransform(h,_vC)}const d=checkIntersection(e,t,n,r,_vA,_vB,_vC,_intersectionPoint);if(d){if(s){_uvA.fromBufferAttribute(s,l);_uvB.fromBufferAttribute(s,u);_uvC.fromBufferAttribute(s,h);d.uv=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2)}if(c){_uvA.fromBufferAttribute(c,l);_uvB.fromBufferAttribute(c,u);_uvC.fromBufferAttribute(c,h);d.uv2=Triangle.getUV(_intersectionPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2)}const e=new Face3(l,u,h);Triangle.getNormal(_vA,_vB,_vC,e.normal);d.face=e}return d}let _geometryId=0;const _m1$3=new Matrix4;const _obj$1=new Object3D;const _offset$1=new Vector3;function Geometry(){Object.defineProperty(this,"id",{value:_geometryId+=2});this.uuid=MathUtils.generateUUID();this.name="";this.type="Geometry";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;this.elementsNeedUpdate=false;this.verticesNeedUpdate=false;this.uvsNeedUpdate=false;this.normalsNeedUpdate=false;this.colorsNeedUpdate=false;this.lineDistancesNeedUpdate=false;this.groupsNeedUpdate=false}Geometry.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:Geometry,isGeometry:true,applyMatrix4:function(e){const t=(new Matrix3).getNormalMatrix(e);for(let t=0,n=this.vertices.length;t<n;t++){const n=this.vertices[t];n.applyMatrix4(e)}for(let e=0,n=this.faces.length;e<n;e++){const n=this.faces[e];n.normal.applyMatrix3(t).normalize();for(let e=0,r=n.vertexNormals.length;e<r;e++){n.vertexNormals[e].applyMatrix3(t).normalize()}}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}this.verticesNeedUpdate=true;this.normalsNeedUpdate=true;return this},rotateX:function(e){_m1$3.makeRotationX(e);this.applyMatrix4(_m1$3);return this},rotateY:function(e){_m1$3.makeRotationY(e);this.applyMatrix4(_m1$3);return this},rotateZ:function(e){_m1$3.makeRotationZ(e);this.applyMatrix4(_m1$3);return this},translate:function(e,t,n){_m1$3.makeTranslation(e,t,n);this.applyMatrix4(_m1$3);return this},scale:function(e,t,n){_m1$3.makeScale(e,t,n);this.applyMatrix4(_m1$3);return this},lookAt:function(e){_obj$1.lookAt(e);_obj$1.updateMatrix();this.applyMatrix4(_obj$1.matrix);return this},fromBufferGeometry:function(e){const t=this;const n=e.index!==null?e.index:undefined;const r=e.attributes;if(r.position===undefined){console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.");return this}const i=r.position;const a=r.normal;const o=r.color;const s=r.uv;const c=r.uv2;if(c!==undefined)this.faceVertexUvs[1]=[];for(let e=0;e<i.count;e++){t.vertices.push((new Vector3).fromBufferAttribute(i,e));if(o!==undefined){t.colors.push((new Color).fromBufferAttribute(o,e))}}function l(e,n,r,i){const l=o===undefined?[]:[t.colors[e].clone(),t.colors[n].clone(),t.colors[r].clone()];const u=a===undefined?[]:[(new Vector3).fromBufferAttribute(a,e),(new Vector3).fromBufferAttribute(a,n),(new Vector3).fromBufferAttribute(a,r)];const h=new Face3(e,n,r,u,l,i);t.faces.push(h);if(s!==undefined){t.faceVertexUvs[0].push([(new Vector2).fromBufferAttribute(s,e),(new Vector2).fromBufferAttribute(s,n),(new Vector2).fromBufferAttribute(s,r)])}if(c!==undefined){t.faceVertexUvs[1].push([(new Vector2).fromBufferAttribute(c,e),(new Vector2).fromBufferAttribute(c,n),(new Vector2).fromBufferAttribute(c,r)])}}const u=e.groups;if(u.length>0){for(let e=0;e<u.length;e++){const t=u[e];const r=t.start;const i=t.count;for(let e=r,a=r+i;e<a;e+=3){if(n!==undefined){l(n.getX(e),n.getX(e+1),n.getX(e+2),t.materialIndex)}else{l(e,e+1,e+2,t.materialIndex)}}}}else{if(n!==undefined){for(let e=0;e<n.count;e+=3){l(n.getX(e),n.getX(e+1),n.getX(e+2))}}else{for(let e=0;e<i.count;e+=3){l(e,e+1,e+2)}}}this.computeFaceNormals();if(e.boundingBox!==null){this.boundingBox=e.boundingBox.clone()}if(e.boundingSphere!==null){this.boundingSphere=e.boundingSphere.clone()}return this},center:function(){this.computeBoundingBox();this.boundingBox.getCenter(_offset$1).negate();this.translate(_offset$1.x,_offset$1.y,_offset$1.z);return this},normalize:function(){this.computeBoundingSphere();const e=this.boundingSphere.center;const t=this.boundingSphere.radius;const n=t===0?1:1/t;const r=new Matrix4;r.set(n,0,0,-n*e.x,0,n,0,-n*e.y,0,0,n,-n*e.z,0,0,0,1);this.applyMatrix4(r);return this},computeFaceNormals:function(){const e=new Vector3,t=new Vector3;for(let n=0,r=this.faces.length;n<r;n++){const r=this.faces[n];const i=this.vertices[r.a];const a=this.vertices[r.b];const o=this.vertices[r.c];e.subVectors(o,a);t.subVectors(i,a);e.cross(t);e.normalize();r.normal.copy(e)}},computeVertexNormals:function(e){if(e===undefined)e=true;const t=new Array(this.vertices.length);for(let e=0,n=this.vertices.length;e<n;e++){t[e]=new Vector3}if(e){const e=new Vector3,n=new Vector3;for(let r=0,i=this.faces.length;r<i;r++){const i=this.faces[r];const a=this.vertices[i.a];const o=this.vertices[i.b];const s=this.vertices[i.c];e.subVectors(s,o);n.subVectors(a,o);e.cross(n);t[i.a].add(e);t[i.b].add(e);t[i.c].add(e)}}else{this.computeFaceNormals();for(let e=0,n=this.faces.length;e<n;e++){const n=this.faces[e];t[n.a].add(n.normal);t[n.b].add(n.normal);t[n.c].add(n.normal)}}for(let e=0,n=this.vertices.length;e<n;e++){t[e].normalize()}for(let e=0,n=this.faces.length;e<n;e++){const n=this.faces[e];const r=n.vertexNormals;if(r.length===3){r[0].copy(t[n.a]);r[1].copy(t[n.b]);r[2].copy(t[n.c])}else{r[0]=t[n.a].clone();r[1]=t[n.b].clone();r[2]=t[n.c].clone()}}if(this.faces.length>0){this.normalsNeedUpdate=true}},computeFlatVertexNormals:function(){this.computeFaceNormals();for(let e=0,t=this.faces.length;e<t;e++){const t=this.faces[e];const n=t.vertexNormals;if(n.length===3){n[0].copy(t.normal);n[1].copy(t.normal);n[2].copy(t.normal)}else{n[0]=t.normal.clone();n[1]=t.normal.clone();n[2]=t.normal.clone()}}if(this.faces.length>0){this.normalsNeedUpdate=true}},computeMorphNormals:function(){for(let e=0,t=this.faces.length;e<t;e++){const t=this.faces[e];if(!t.__originalFaceNormal){t.__originalFaceNormal=t.normal.clone()}else{t.__originalFaceNormal.copy(t.normal)}if(!t.__originalVertexNormals)t.__originalVertexNormals=[];for(let e=0,n=t.vertexNormals.length;e<n;e++){if(!t.__originalVertexNormals[e]){t.__originalVertexNormals[e]=t.vertexNormals[e].clone()}else{t.__originalVertexNormals[e].copy(t.vertexNormals[e])}}}const e=new Geometry;e.faces=this.faces;for(let t=0,n=this.morphTargets.length;t<n;t++){if(!this.morphNormals[t]){this.morphNormals[t]={};this.morphNormals[t].faceNormals=[];this.morphNormals[t].vertexNormals=[];const e=this.morphNormals[t].faceNormals;const n=this.morphNormals[t].vertexNormals;for(let t=0,r=this.faces.length;t<r;t++){const t=new Vector3;const r={a:new Vector3,b:new Vector3,c:new Vector3};e.push(t);n.push(r)}}const n=this.morphNormals[t];e.vertices=this.morphTargets[t].vertices;e.computeFaceNormals();e.computeVertexNormals();for(let e=0,t=this.faces.length;e<t;e++){const t=this.faces[e];const r=n.faceNormals[e];const i=n.vertexNormals[e];r.copy(t.normal);i.a.copy(t.vertexNormals[0]);i.b.copy(t.vertexNormals[1]);i.c.copy(t.vertexNormals[2])}}for(let e=0,t=this.faces.length;e<t;e++){const t=this.faces[e];t.normal=t.__originalFaceNormal;t.vertexNormals=t.__originalVertexNormals}},computeBoundingBox:function(){if(this.boundingBox===null){this.boundingBox=new Box3}this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){if(this.boundingSphere===null){this.boundingSphere=new Sphere}this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,n){if(!(e&&e.isGeometry)){console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e);return}let r;const i=this.vertices.length,a=this.vertices,o=e.vertices,s=this.faces,c=e.faces,l=this.colors,u=e.colors;if(n===undefined)n=0;if(t!==undefined){r=(new Matrix3).getNormalMatrix(t)}for(let e=0,n=o.length;e<n;e++){const n=o[e];const r=n.clone();if(t!==undefined)r.applyMatrix4(t);a.push(r)}for(let e=0,t=u.length;e<t;e++){l.push(u[e].clone())}for(let e=0,t=c.length;e<t;e++){const t=c[e];let a,o;const l=t.vertexNormals,u=t.vertexColors;const h=new Face3(t.a+i,t.b+i,t.c+i);h.normal.copy(t.normal);if(r!==undefined){h.normal.applyMatrix3(r).normalize()}for(let e=0,t=l.length;e<t;e++){a=l[e].clone();if(r!==undefined){a.applyMatrix3(r).normalize()}h.vertexNormals.push(a)}h.color.copy(t.color);for(let e=0,t=u.length;e<t;e++){o=u[e];h.vertexColors.push(o.clone())}h.materialIndex=t.materialIndex+n;s.push(h)}for(let t=0,n=e.faceVertexUvs.length;t<n;t++){const n=e.faceVertexUvs[t];if(this.faceVertexUvs[t]===undefined)this.faceVertexUvs[t]=[];for(let e=0,r=n.length;e<r;e++){const r=n[e],i=[];for(let e=0,t=r.length;e<t;e++){i.push(r[e].clone())}this.faceVertexUvs[t].push(i)}}},mergeMesh:function(e){if(!(e&&e.isMesh)){console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e);return}if(e.matrixAutoUpdate)e.updateMatrix();this.merge(e.geometry,e.matrix)},mergeVertices:function(){const e={};const t=[],n=[];const r=4;const i=Math.pow(10,r);for(let r=0,a=this.vertices.length;r<a;r++){const a=this.vertices[r];const o=Math.round(a.x*i)+"_"+Math.round(a.y*i)+"_"+Math.round(a.z*i);if(e[o]===undefined){e[o]=r;t.push(this.vertices[r]);n[r]=t.length-1}else{n[r]=n[e[o]]}}const a=[];for(let e=0,t=this.faces.length;e<t;e++){const t=this.faces[e];t.a=n[t.a];t.b=n[t.b];t.c=n[t.c];const r=[t.a,t.b,t.c];for(let t=0;t<3;t++){if(r[t]===r[(t+1)%3]){a.push(e);break}}}for(let e=a.length-1;e>=0;e--){const t=a[e];this.faces.splice(t,1);for(let e=0,n=this.faceVertexUvs.length;e<n;e++){this.faceVertexUvs[e].splice(t,1)}}const o=this.vertices.length-t.length;this.vertices=t;return o},setFromPoints:function(e){this.vertices=[];for(let t=0,n=e.length;t<n;t++){const n=e[t];this.vertices.push(new Vector3(n.x,n.y,n.z||0))}return this},sortFacesByMaterialIndex:function(){const e=this.faces;const t=e.length;for(let n=0;n<t;n++){e[n]._id=n}function n(e,t){return e.materialIndex-t.materialIndex}e.sort(n);const r=this.faceVertexUvs[0];const i=this.faceVertexUvs[1];let a,o;if(r&&r.length===t)a=[];if(i&&i.length===t)o=[];for(let n=0;n<t;n++){const t=e[n]._id;if(a)a.push(r[t]);if(o)o.push(i[t])}if(a)this.faceVertexUvs[0]=a;if(o)this.faceVertexUvs[1]=o},toJSON:function(){const e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};e.uuid=this.uuid;e.type=this.type;if(this.name!=="")e.name=this.name;if(this.parameters!==undefined){const t=this.parameters;for(const n in t){if(t[n]!==undefined)e[n]=t[n]}return e}const t=[];for(let e=0;e<this.vertices.length;e++){const n=this.vertices[e];t.push(n.x,n.y,n.z)}const n=[];const r=[];const i={};const a=[];const o={};const s=[];const c={};for(let e=0;e<this.faces.length;e++){const t=this.faces[e];const r=true;const i=false;const a=this.faceVertexUvs[0][e]!==undefined;const o=t.normal.length()>0;const s=t.vertexNormals.length>0;const c=t.color.r!==1||t.color.g!==1||t.color.b!==1;const d=t.vertexColors.length>0;let p=0;p=l(p,0,0);p=l(p,1,r);p=l(p,2,i);p=l(p,3,a);p=l(p,4,o);p=l(p,5,s);p=l(p,6,c);p=l(p,7,d);n.push(p);n.push(t.a,t.b,t.c);n.push(t.materialIndex);if(a){const t=this.faceVertexUvs[0][e];n.push(f(t[0]),f(t[1]),f(t[2]))}if(o){n.push(u(t.normal))}if(s){const e=t.vertexNormals;n.push(u(e[0]),u(e[1]),u(e[2]))}if(c){n.push(h(t.color))}if(d){const e=t.vertexColors;n.push(h(e[0]),h(e[1]),h(e[2]))}}function l(e,t,n){return n?e|1<<t:e&~(1<<t)}function u(e){const t=e.x.toString()+e.y.toString()+e.z.toString();if(i[t]!==undefined){return i[t]}i[t]=r.length/3;r.push(e.x,e.y,e.z);return i[t]}function h(e){const t=e.r.toString()+e.g.toString()+e.b.toString();if(o[t]!==undefined){return o[t]}o[t]=a.length;a.push(e.getHex());return o[t]}function f(e){const t=e.x.toString()+e.y.toString();if(c[t]!==undefined){return c[t]}c[t]=s.length/2;s.push(e.x,e.y);return c[t]}e.data={};e.data.vertices=t;e.data.normals=r;if(a.length>0)e.data.colors=a;if(s.length>0)e.data.uvs=[s];e.data.faces=n;return e},clone:function(){return(new Geometry).copy(this)},copy:function(e){this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;this.name=e.name;const t=e.vertices;for(let e=0,n=t.length;e<n;e++){this.vertices.push(t[e].clone())}const n=e.colors;for(let e=0,t=n.length;e<t;e++){this.colors.push(n[e].clone())}const r=e.faces;for(let e=0,t=r.length;e<t;e++){this.faces.push(r[e].clone())}for(let t=0,n=e.faceVertexUvs.length;t<n;t++){const n=e.faceVertexUvs[t];if(this.faceVertexUvs[t]===undefined){this.faceVertexUvs[t]=[]}for(let e=0,r=n.length;e<r;e++){const r=n[e],i=[];for(let e=0,t=r.length;e<t;e++){const t=r[e];i.push(t.clone())}this.faceVertexUvs[t].push(i)}}const i=e.morphTargets;for(let e=0,t=i.length;e<t;e++){const t={};t.name=i[e].name;if(i[e].vertices!==undefined){t.vertices=[];for(let n=0,r=i[e].vertices.length;n<r;n++){t.vertices.push(i[e].vertices[n].clone())}}if(i[e].normals!==undefined){t.normals=[];for(let n=0,r=i[e].normals.length;n<r;n++){t.normals.push(i[e].normals[n].clone())}}this.morphTargets.push(t)}const a=e.morphNormals;for(let e=0,t=a.length;e<t;e++){const t={};if(a[e].vertexNormals!==undefined){t.vertexNormals=[];for(let n=0,r=a[e].vertexNormals.length;n<r;n++){const r=a[e].vertexNormals[n];const i={};i.a=r.a.clone();i.b=r.b.clone();i.c=r.c.clone();t.vertexNormals.push(i)}}if(a[e].faceNormals!==undefined){t.faceNormals=[];for(let n=0,r=a[e].faceNormals.length;n<r;n++){t.faceNormals.push(a[e].faceNormals[n].clone())}}this.morphNormals.push(t)}const o=e.skinWeights;for(let e=0,t=o.length;e<t;e++){this.skinWeights.push(o[e].clone())}const s=e.skinIndices;for(let e=0,t=s.length;e<t;e++){this.skinIndices.push(s[e].clone())}const c=e.lineDistances;for(let e=0,t=c.length;e<t;e++){this.lineDistances.push(c[e])}const l=e.boundingBox;if(l!==null){this.boundingBox=l.clone()}const u=e.boundingSphere;if(u!==null){this.boundingSphere=u.clone()}this.elementsNeedUpdate=e.elementsNeedUpdate;this.verticesNeedUpdate=e.verticesNeedUpdate;this.uvsNeedUpdate=e.uvsNeedUpdate;this.normalsNeedUpdate=e.normalsNeedUpdate;this.colorsNeedUpdate=e.colorsNeedUpdate;this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate;this.groupsNeedUpdate=e.groupsNeedUpdate;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});class BoxGeometry extends Geometry{constructor(e,t,n,r,i,a){super();this.type="BoxGeometry";this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:i,depthSegments:a};this.fromBufferGeometry(new BoxBufferGeometry(e,t,n,r,i,a));this.mergeVertices()}}class BoxBufferGeometry extends BufferGeometry{constructor(e=1,t=1,n=1,r=1,i=1,a=1){super();this.type="BoxBufferGeometry";this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:i,depthSegments:a};const o=this;r=Math.floor(r);i=Math.floor(i);a=Math.floor(a);const s=[];const c=[];const l=[];const u=[];let h=0;let f=0;d("z","y","x",-1,-1,n,t,e,a,i,0);d("z","y","x",1,-1,n,t,-e,a,i,1);d("x","z","y",1,1,e,n,t,r,a,2);d("x","z","y",1,-1,e,n,-t,r,a,3);d("x","y","z",1,-1,e,t,n,r,i,4);d("x","y","z",-1,-1,e,t,-n,r,i,5);this.setIndex(s);this.setAttribute("position",new Float32BufferAttribute(c,3));this.setAttribute("normal",new Float32BufferAttribute(l,3));this.setAttribute("uv",new Float32BufferAttribute(u,2));function d(e,t,n,r,i,a,d,p,m,g,y){const v=a/m;const _=d/g;const x=a/2;const b=d/2;const M=p/2;const w=m+1;const S=g+1;let T=0;let E=0;const A=new Vector3;for(let a=0;a<S;a++){const o=a*_-b;for(let s=0;s<w;s++){const h=s*v-x;A[e]=h*r;A[t]=o*i;A[n]=M;c.push(A.x,A.y,A.z);A[e]=0;A[t]=0;A[n]=p>0?1:-1;l.push(A.x,A.y,A.z);u.push(s/m);u.push(1-a/g);T+=1}}for(let e=0;e<g;e++){for(let t=0;t<m;t++){const n=h+t+w*e;const r=h+t+w*(e+1);const i=h+(t+1)+w*(e+1);const a=h+(t+1)+w*e;s.push(n,r,a);s.push(r,i,a);E+=6}}o.addGroup(f,E,y);f+=E;h+=T}}}function cloneUniforms(e){const t={};for(const n in e){t[n]={};for(const r in e[n]){const i=e[n][r];if(i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)){t[n][r]=i.clone()}else if(Array.isArray(i)){t[n][r]=i.slice()}else{t[n][r]=i}}}return t}function mergeUniforms(e){const t={};for(let n=0;n<e.length;n++){const r=cloneUniforms(e[n]);for(const e in r){t[e]=r[e]}}return t}const UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var default_fragment="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";function ShaderMaterial(e){Material.call(this);this.type="ShaderMaterial";this.defines={};this.uniforms={};this.vertexShader=default_vertex;this.fragmentShader=default_fragment;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.extensions={derivatives:false,fragDepth:false,drawBuffers:false,shaderTextureLOD:false};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;this.glslVersion=null;if(e!==undefined){if(e.attributes!==undefined){console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.")}this.setValues(e)}}ShaderMaterial.prototype=Object.create(Material.prototype);ShaderMaterial.prototype.constructor=ShaderMaterial;ShaderMaterial.prototype.isShaderMaterial=true;ShaderMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.fragmentShader=e.fragmentShader;this.vertexShader=e.vertexShader;this.uniforms=cloneUniforms(e.uniforms);this.defines=Object.assign({},e.defines);this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.lights=e.lights;this.clipping=e.clipping;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;this.extensions=Object.assign({},e.extensions);this.glslVersion=e.glslVersion;return this};ShaderMaterial.prototype.toJSON=function(e){const t=Material.prototype.toJSON.call(this,e);t.glslVersion=this.glslVersion;t.uniforms={};for(const n in this.uniforms){const r=this.uniforms[n];const i=r.value;if(i&&i.isTexture){t.uniforms[n]={type:"t",value:i.toJSON(e).uuid}}else if(i&&i.isColor){t.uniforms[n]={type:"c",value:i.getHex()}}else if(i&&i.isVector2){t.uniforms[n]={type:"v2",value:i.toArray()}}else if(i&&i.isVector3){t.uniforms[n]={type:"v3",value:i.toArray()}}else if(i&&i.isVector4){t.uniforms[n]={type:"v4",value:i.toArray()}}else if(i&&i.isMatrix3){t.uniforms[n]={type:"m3",value:i.toArray()}}else if(i&&i.isMatrix4){t.uniforms[n]={type:"m4",value:i.toArray()}}else{t.uniforms[n]={value:i}}}if(Object.keys(this.defines).length>0)t.defines=this.defines;t.vertexShader=this.vertexShader;t.fragmentShader=this.fragmentShader;const n={};for(const e in this.extensions){if(this.extensions[e]===true)n[e]=true}if(Object.keys(n).length>0)t.extensions=n;return t};function Camera(){Object3D.call(this);this.type="Camera";this.matrixWorldInverse=new Matrix4;this.projectionMatrix=new Matrix4;this.projectionMatrixInverse=new Matrix4}Camera.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Camera,isCamera:true,copy:function(e,t){Object3D.prototype.copy.call(this,e,t);this.matrixWorldInverse.copy(e.matrixWorldInverse);this.projectionMatrix.copy(e.projectionMatrix);this.projectionMatrixInverse.copy(e.projectionMatrixInverse);return this},getWorldDirection:function(e){if(e===undefined){console.warn("THREE.Camera: .getWorldDirection() target is now required");e=new Vector3}this.updateMatrixWorld(true);const t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){Object3D.prototype.updateMatrixWorld.call(this,e);this.matrixWorldInverse.getInverse(this.matrixWorld)},updateWorldMatrix:function(e,t){Object3D.prototype.updateWorldMatrix.call(this,e,t);this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}});function PerspectiveCamera(e,t,n,r){Camera.call(this);this.type="PerspectiveCamera";this.fov=e!==undefined?e:50;this.zoom=1;this.near=n!==undefined?n:.1;this.far=r!==undefined?r:2e3;this.focus=10;this.aspect=t!==undefined?t:1;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}PerspectiveCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:PerspectiveCamera,isPerspectiveCamera:true,copy:function(e,t){Camera.prototype.copy.call(this,e,t);this.fov=e.fov;this.zoom=e.zoom;this.near=e.near;this.far=e.far;this.focus=e.focus;this.aspect=e.aspect;this.view=e.view===null?null:Object.assign({},e.view);this.filmGauge=e.filmGauge;this.filmOffset=e.filmOffset;return this},setFocalLength:function(e){const t=.5*this.getFilmHeight()/e;this.fov=MathUtils.RAD2DEG*2*Math.atan(t);this.updateProjectionMatrix()},getFocalLength:function(){const e=Math.tan(MathUtils.DEG2RAD*.5*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return MathUtils.RAD2DEG*2*Math.atan(Math.tan(MathUtils.DEG2RAD*.5*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,n,r,i,a){this.aspect=e/t;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=i;this.view.height=a;this.updateProjectionMatrix()},clearViewOffset:function(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()},updateProjectionMatrix:function(){const e=this.near;let t=e*Math.tan(MathUtils.DEG2RAD*.5*this.fov)/this.zoom;let n=2*t;let r=this.aspect*n;let i=-.5*r;const a=this.view;if(this.view!==null&&this.view.enabled){const e=a.fullWidth,o=a.fullHeight;i+=a.offsetX*r/e;t-=a.offsetY*n/o;r*=a.width/e;n*=a.height/o}const o=this.filmOffset;if(o!==0)i+=e*o/this.getFilmWidth();this.projectionMatrix.makePerspective(i,i+r,t,t-n,e,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){const t=Object3D.prototype.toJSON.call(this,e);t.object.fov=this.fov;t.object.zoom=this.zoom;t.object.near=this.near;t.object.far=this.far;t.object.focus=this.focus;t.object.aspect=this.aspect;if(this.view!==null)t.object.view=Object.assign({},this.view);t.object.filmGauge=this.filmGauge;t.object.filmOffset=this.filmOffset;return t}});const fov=90,aspect=1;function CubeCamera(e,t,n){Object3D.call(this);this.type="CubeCamera";if(n.isWebGLCubeRenderTarget!==true){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=n;const r=new PerspectiveCamera(fov,aspect,e,t);r.layers=this.layers;r.up.set(0,-1,0);r.lookAt(new Vector3(1,0,0));this.add(r);const i=new PerspectiveCamera(fov,aspect,e,t);i.layers=this.layers;i.up.set(0,-1,0);i.lookAt(new Vector3(-1,0,0));this.add(i);const a=new PerspectiveCamera(fov,aspect,e,t);a.layers=this.layers;a.up.set(0,0,1);a.lookAt(new Vector3(0,1,0));this.add(a);const o=new PerspectiveCamera(fov,aspect,e,t);o.layers=this.layers;o.up.set(0,0,-1);o.lookAt(new Vector3(0,-1,0));this.add(o);const s=new PerspectiveCamera(fov,aspect,e,t);s.layers=this.layers;s.up.set(0,-1,0);s.lookAt(new Vector3(0,0,1));this.add(s);const c=new PerspectiveCamera(fov,aspect,e,t);c.layers=this.layers;c.up.set(0,-1,0);c.lookAt(new Vector3(0,0,-1));this.add(c);this.update=function(e,t){if(this.parent===null)this.updateMatrixWorld();const l=e.xr.enabled;const u=e.getRenderTarget();e.xr.enabled=false;const h=n.texture.generateMipmaps;n.texture.generateMipmaps=false;e.setRenderTarget(n,0);e.render(t,r);e.setRenderTarget(n,1);e.render(t,i);e.setRenderTarget(n,2);e.render(t,a);e.setRenderTarget(n,3);e.render(t,o);e.setRenderTarget(n,4);e.render(t,s);n.texture.generateMipmaps=h;e.setRenderTarget(n,5);e.render(t,c);e.setRenderTarget(u);e.xr.enabled=l};this.clear=function(e,t,r,i){const a=e.getRenderTarget();for(let a=0;a<6;a++){e.setRenderTarget(n,a);e.clear(t,r,i)}e.setRenderTarget(a)}}CubeCamera.prototype=Object.create(Object3D.prototype);CubeCamera.prototype.constructor=CubeCamera;function WebGLCubeRenderTarget(e,t,n){if(Number.isInteger(t)){console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");t=n}WebGLRenderTarget.call(this,e,e,t);this.texture.isWebGLCubeRenderTargetTexture=true}WebGLCubeRenderTarget.prototype=Object.create(WebGLRenderTarget.prototype);WebGLCubeRenderTarget.prototype.constructor=WebGLCubeRenderTarget;WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget=true;WebGLCubeRenderTarget.prototype.fromEquirectangularTexture=function(e,t){this.texture.type=t.type;this.texture.format=RGBAFormat;this.texture.encoding=t.encoding;this.texture.generateMipmaps=t.generateMipmaps;this.texture.minFilter=t.minFilter;this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`varying vec3 vWorldDirection;vec3 transformDirection( in vec3 dir, in mat4 matrix ) {return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );}void main() {vWorldDirection = transformDirection( position, modelMatrix );#include <begin_vertex>\n#include <project_vertex>}\n`,fragmentShader:`uniform sampler2D tEquirect;varying vec3 vWorldDirection;#include <common>void main() {vec3 direction = normalize( vWorldDirection );vec2 sampleUV = equirectUv( direction );gl_FragColor = texture2D( tEquirect, sampleUV );}\n`};const r=new BoxBufferGeometry(5,5,5);const i=new ShaderMaterial({name:"CubemapFromEquirect",uniforms:cloneUniforms(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:BackSide,blending:NoBlending});i.uniforms.tEquirect.value=t;const a=new Mesh(r,i);const o=t.minFilter;if(t.minFilter===LinearMipmapLinearFilter)t.minFilter=LinearFilter;const s=new CubeCamera(1,10,this);s.update(e,a);t.minFilter=o;a.geometry.dispose();a.material.dispose();return this};function DataTexture(e,t,n,r,i,a,o,s,c,l,u,h){Texture.call(this,null,a,o,s,c,l,r,i,u,h);this.image={data:e||null,width:t||1,height:n||1};this.magFilter=c!==undefined?c:NearestFilter;this.minFilter=l!==undefined?l:NearestFilter;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;this.needsUpdate=true}DataTexture.prototype=Object.create(Texture.prototype);DataTexture.prototype.constructor=DataTexture;DataTexture.prototype.isDataTexture=true;const _sphere$1=new Sphere;const _vector$5=new Vector3;class Frustum{constructor(e,t,n,r,i,a){this.planes=[e!==undefined?e:new Plane,t!==undefined?t:new Plane,n!==undefined?n:new Plane,r!==undefined?r:new Plane,i!==undefined?i:new Plane,a!==undefined?a:new Plane]}set(e,t,n,r,i,a){const o=this.planes;o[0].copy(e);o[1].copy(t);o[2].copy(n);o[3].copy(r);o[4].copy(i);o[5].copy(a);return this}clone(){return(new this.constructor).copy(this)}copy(e){const t=this.planes;for(let n=0;n<6;n++){t[n].copy(e.planes[n])}return this}setFromProjectionMatrix(e){const t=this.planes;const n=e.elements;const r=n[0],i=n[1],a=n[2],o=n[3];const s=n[4],c=n[5],l=n[6],u=n[7];const h=n[8],f=n[9],d=n[10],p=n[11];const m=n[12],g=n[13],y=n[14],v=n[15];t[0].setComponents(o-r,u-s,p-h,v-m).normalize();t[1].setComponents(o+r,u+s,p+h,v+m).normalize();t[2].setComponents(o+i,u+c,p+f,v+g).normalize();t[3].setComponents(o-i,u-c,p-f,v-g).normalize();t[4].setComponents(o-a,u-l,p-d,v-y).normalize();t[5].setComponents(o+a,u+l,p+d,v+y).normalize();return this}intersectsObject(e){const t=e.geometry;if(t.boundingSphere===null)t.computeBoundingSphere();_sphere$1.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);return this.intersectsSphere(_sphere$1)}intersectsSprite(e){_sphere$1.center.set(0,0,0);_sphere$1.radius=.7071067811865476;_sphere$1.applyMatrix4(e.matrixWorld);return this.intersectsSphere(_sphere$1)}intersectsSphere(e){const t=this.planes;const n=e.center;const r=-e.radius;for(let e=0;e<6;e++){const i=t[e].distanceToPoint(n);if(i<r){return false}}return true}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const r=t[n];_vector$5.x=r.normal.x>0?e.max.x:e.min.x;_vector$5.y=r.normal.y>0?e.max.y:e.min.y;_vector$5.z=r.normal.z>0?e.max.z:e.min.z;if(r.distanceToPoint(_vector$5)<0){return false}}return true}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++){if(t[n].distanceToPoint(e)<0){return false}}return true}}function WebGLAnimation(){let e=null;let t=false;let n=null;let r=null;function i(t,a){n(t,a);r=e.requestAnimationFrame(i)}return{start:function(){if(t===true)return;if(n===null)return;r=e.requestAnimationFrame(i);t=true},stop:function(){e.cancelAnimationFrame(r);t=false},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function WebGLAttributes(e,t){const n=t.isWebGL2;const r=new WeakMap;function i(t,n){const r=t.array;const i=t.usage;const a=e.createBuffer();e.bindBuffer(n,a);e.bufferData(n,r,i);t.onUploadCallback();let o=5126;if(r instanceof Float32Array){o=5126}else if(r instanceof Float64Array){console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.")}else if(r instanceof Uint16Array){o=5123}else if(r instanceof Int16Array){o=5122}else if(r instanceof Uint32Array){o=5125}else if(r instanceof Int32Array){o=5124}else if(r instanceof Int8Array){o=5120}else if(r instanceof Uint8Array){o=5121}return{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:t.version}}function a(t,r,i){const a=r.array;const o=r.updateRange;e.bindBuffer(i,t);if(o.count===-1){e.bufferSubData(i,0,a)}else{if(n){e.bufferSubData(i,o.offset*a.BYTES_PER_ELEMENT,a,o.offset,o.count)}else{e.bufferSubData(i,o.offset*a.BYTES_PER_ELEMENT,a.subarray(o.offset,o.offset+o.count))}o.count=-1}}function o(e){if(e.isInterleavedBufferAttribute)e=e.data;return r.get(e)}function s(t){if(t.isInterleavedBufferAttribute)t=t.data;const n=r.get(t);if(n){e.deleteBuffer(n.buffer);r.delete(t)}}function c(e,t){if(e.isGLBufferAttribute){var n=r.get(e);if(!n||n.version<e.version){r.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version})}return}if(e.isInterleavedBufferAttribute)e=e.data;const o=r.get(e);if(o===undefined){r.set(e,i(e,t))}else if(o.version<e.version){a(o.buffer,e,t);o.version=e.version}}return{get:o,remove:s,update:c}}class PlaneGeometry extends Geometry{constructor(e,t,n,r){super();this.type="PlaneGeometry";this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};this.fromBufferGeometry(new PlaneBufferGeometry(e,t,n,r));this.mergeVertices()}}class PlaneBufferGeometry extends BufferGeometry{constructor(e,t,n,r){super();this.type="PlaneBufferGeometry";this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};e=e||1;t=t||1;const i=e/2;const a=t/2;const o=Math.floor(n)||1;const s=Math.floor(r)||1;const c=o+1;const l=s+1;const u=e/o;const h=t/s;const f=[];const d=[];const p=[];const m=[];for(let e=0;e<l;e++){const t=e*h-a;for(let n=0;n<c;n++){const r=n*u-i;d.push(r,-t,0);p.push(0,0,1);m.push(n/o);m.push(1-e/s)}}for(let e=0;e<s;e++){for(let t=0;t<o;t++){const n=t+c*e;const r=t+c*(e+1);const i=t+1+c*(e+1);const a=t+1+c*e;f.push(n,r,a);f.push(r,i,a)}}this.setIndex(f);this.setAttribute("position",new Float32BufferAttribute(d,3));this.setAttribute("normal",new Float32BufferAttribute(p,3));this.setAttribute("uv",new Float32BufferAttribute(m,2))}}var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var alphatest_fragment="#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var begin_vertex="vec3 transformed = vec3( position );";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var bsdfs="vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var color_fragment="#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";var color_pars_fragment="#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";var color_pars_vertex="#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_vertex="#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";var common="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";var envmap_fragment="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var fog_vertex="#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";var lightmap_fragment="#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";var lights_pars_begin="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";var lights_toon_fragment="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var lights_fragment_begin="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";var map_fragment="#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var map_particle_pars_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";var normal_fragment_begin="#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";var normal_fragment_maps="#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";var clearcoat_normal_fragment_begin="#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";var clearcoat_pars_fragment="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var dithering_pars_fragment="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var tonemapping_pars_fragment="#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var transmissionmap_fragment="#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";var transmissionmap_pars_fragment="#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif";var uv_pars_fragment="#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";var uv_pars_vertex="#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";var uv_vertex="#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";var background_frag="uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var background_vert="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";var cube_frag="#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var cube_vert="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";var depth_frag="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";var depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";var distanceRGBA_frag="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";var distanceRGBA_vert="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";var equirect_frag="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";var equirect_vert="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";var linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";var meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";var meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshmatcap_frag="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshmatcap_vert="#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";var meshtoon_frag="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshtoon_vert="#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var meshphysical_frag="#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";var meshphysical_vert="#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var normal_frag="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";var normal_vert="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";var points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";var points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";var shadow_frag="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var shadow_vert="#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";var sprite_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";var sprite_vert="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmissionmap_fragment:transmissionmap_fragment,transmissionmap_pars_fragment:transmissionmap_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_frag:background_frag,background_vert:background_vert,cube_frag:cube_frag,cube_vert:cube_vert,depth_frag:depth_frag,depth_vert:depth_vert,distanceRGBA_frag:distanceRGBA_frag,distanceRGBA_vert:distanceRGBA_vert,equirect_frag:equirect_frag,equirect_vert:equirect_vert,linedashed_frag:linedashed_frag,linedashed_vert:linedashed_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshlambert_frag:meshlambert_frag,meshlambert_vert:meshlambert_vert,meshmatcap_frag:meshmatcap_frag,meshmatcap_vert:meshmatcap_vert,meshtoon_frag:meshtoon_frag,meshtoon_vert:meshtoon_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert,meshphysical_frag:meshphysical_frag,meshphysical_vert:meshphysical_vert,normal_frag:normal_frag,normal_vert:normal_vert,points_frag:points_frag,points_vert:points_vert,shadow_frag:shadow_frag,shadow_vert:shadow_vert,sprite_frag:sprite_frag,sprite_vert:sprite_vert};const UniformsLib={common:{diffuse:{value:new Color(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Matrix3},uv2Transform:{value:new Matrix3},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3}},sprite:{diffuse:{value:new Color(15658734)},opacity:{value:1},center:{value:new Vector2(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Matrix3}}};const ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},specular:{value:new Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.normal_vert,fragmentShader:ShaderChunk.normal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color(0)},opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Color(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};function WebGLBackground(e,t,n,r,i){const a=new Color(0);let o=0;let s;let c;let l=null;let u=0;let h=null;function f(n,i,f,p){let m=i.isScene===true?i.background:null;if(m&&m.isTexture){m=t.get(m)}const g=e.xr;const y=g.getSession&&g.getSession();if(y&&y.environmentBlendMode==="additive"){m=null}if(m===null){d(a,o)}else if(m&&m.isColor){d(m,1);p=true}if(e.autoClear||p){e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil)}if(m&&(m.isCubeTexture||m.isWebGLCubeRenderTarget||m.isWebGLCubeRenderTargetTexture||m.mapping===CubeUVReflectionMapping)){if(c===undefined){c=new Mesh(new BoxBufferGeometry(1,1,1),new ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));c.geometry.deleteAttribute("normal");c.geometry.deleteAttribute("uv");c.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)};Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}});r.update(c)}if(m.isWebGLCubeRenderTarget){m=m.texture}c.material.uniforms.envMap.value=m;c.material.uniforms.flipEnvMap.value=m.isCubeTexture?-1:1;if(l!==m||u!==m.version||h!==e.toneMapping){c.material.needsUpdate=true;l=m;u=m.version;h=e.toneMapping}n.unshift(c,c.geometry,c.material,0,0,null)}else if(m&&m.isTexture){if(s===undefined){s=new Mesh(new PlaneBufferGeometry(2,2),new ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));s.geometry.deleteAttribute("normal");Object.defineProperty(s.material,"map",{get:function(){return this.uniforms.t2D.value}});r.update(s)}s.material.uniforms.t2D.value=m;if(m.matrixAutoUpdate===true){m.updateMatrix()}s.material.uniforms.uvTransform.value.copy(m.matrix);if(l!==m||u!==m.version||h!==e.toneMapping){s.material.needsUpdate=true;l=m;u=m.version;h=e.toneMapping}n.unshift(s,s.geometry,s.material,0,0,null)}}function d(e,t){n.buffers.color.setClear(e.r,e.g,e.b,t,i)}return{getClearColor:function(){return a},setClearColor:function(e,t){a.set(e);o=t!==undefined?t:1;d(a,o)},getClearAlpha:function(){return o},setClearAlpha:function(e){o=e;d(a,o)},render:f}}function WebGLBindingStates(e,t,n,r){const i=e.getParameter(34921);const a=r.isWebGL2?null:t.get("OES_vertex_array_object");const o=r.isWebGL2||a!==null;const s={};const c=m(null);let l=c;function u(t,r,i,a,s){let c=false;if(o){const e=p(a,i,r);if(l!==e){l=e;f(l.object)}c=g(a,s);if(c)y(a,s)}else{const e=r.wireframe===true;if(l.geometry!==a.id||l.program!==i.id||l.wireframe!==e){l.geometry=a.id;l.program=i.id;l.wireframe=e;c=true}}if(t.isInstancedMesh===true){c=true}if(s!==null){n.update(s,34963)}if(c){w(t,r,i,a);if(s!==null){e.bindBuffer(34963,n.get(s).buffer)}}}function h(){if(r.isWebGL2)return e.createVertexArray();return a.createVertexArrayOES()}function f(t){if(r.isWebGL2)return e.bindVertexArray(t);return a.bindVertexArrayOES(t)}function d(t){if(r.isWebGL2)return e.deleteVertexArray(t);return a.deleteVertexArrayOES(t)}function p(e,t,n){const r=n.wireframe===true;let i=s[e.id];if(i===undefined){i={};s[e.id]=i}let a=i[t.id];if(a===undefined){a={};i[t.id]=a}let o=a[r];if(o===undefined){o=m(h());a[r]=o}return o}function m(e){const t=[];const n=[];const r=[];for(let e=0;e<i;e++){t[e]=0;n[e]=0;r[e]=0}return{geometry:null,program:null,wireframe:false,newAttributes:t,enabledAttributes:n,attributeDivisors:r,object:e,attributes:{},index:null}}function g(e,t){const n=l.attributes;const r=e.attributes;if(Object.keys(n).length!==Object.keys(r).length)return true;for(const e in r){const t=n[e];const i=r[e];if(t===undefined)return true;if(t.attribute!==i)return true;if(t.data!==i.data)return true}if(l.index!==t)return true;return false}function y(e,t){const n={};const r=e.attributes;for(const e in r){const t=r[e];const i={};i.attribute=t;if(t.data){i.data=t.data}n[e]=i}l.attributes=n;l.index=t}function v(){const e=l.newAttributes;for(let t=0,n=e.length;t<n;t++){e[t]=0}}function _(e){x(e,0)}function x(n,i){const a=l.newAttributes;const o=l.enabledAttributes;const s=l.attributeDivisors;a[n]=1;if(o[n]===0){e.enableVertexAttribArray(n);o[n]=1}if(s[n]!==i){const a=r.isWebGL2?e:t.get("ANGLE_instanced_arrays");a[r.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,i);s[n]=i}}function b(){const t=l.newAttributes;const n=l.enabledAttributes;for(let r=0,i=n.length;r<i;r++){if(n[r]!==t[r]){e.disableVertexAttribArray(r);n[r]=0}}}function M(t,n,i,a,o,s){if(r.isWebGL2===true&&(i===5124||i===5125)){e.vertexAttribIPointer(t,n,i,o,s)}else{e.vertexAttribPointer(t,n,i,a,o,s)}}function w(i,a,o,s){if(r.isWebGL2===false&&(i.isInstancedMesh||s.isInstancedBufferGeometry)){if(t.get("ANGLE_instanced_arrays")===null)return}v();const c=s.attributes;const l=o.getAttributes();const u=a.defaultAttributeValues;for(const t in l){const r=l[t];if(r>=0){const a=c[t];if(a!==undefined){const t=a.normalized;const i=a.itemSize;const o=n.get(a);if(o===undefined)continue;const c=o.buffer;const l=o.type;const u=o.bytesPerElement;if(a.isInterleavedBufferAttribute){const n=a.data;const o=n.stride;const h=a.offset;if(n&&n.isInstancedInterleavedBuffer){x(r,n.meshPerAttribute);if(s._maxInstanceCount===undefined){s._maxInstanceCount=n.meshPerAttribute*n.count}}else{_(r)}e.bindBuffer(34962,c);M(r,i,l,t,o*u,h*u)}else{if(a.isInstancedBufferAttribute){x(r,a.meshPerAttribute);if(s._maxInstanceCount===undefined){s._maxInstanceCount=a.meshPerAttribute*a.count}}else{_(r)}e.bindBuffer(34962,c);M(r,i,l,t,0,0)}}else if(t==="instanceMatrix"){const t=n.get(i.instanceMatrix);if(t===undefined)continue;const a=t.buffer;const o=t.type;x(r+0,1);x(r+1,1);x(r+2,1);x(r+3,1);e.bindBuffer(34962,a);e.vertexAttribPointer(r+0,4,o,false,64,0);e.vertexAttribPointer(r+1,4,o,false,64,16);e.vertexAttribPointer(r+2,4,o,false,64,32);e.vertexAttribPointer(r+3,4,o,false,64,48)}else if(t==="instanceColor"){const t=n.get(i.instanceColor);if(t===undefined)continue;const a=t.buffer;const o=t.type;x(r,1);e.bindBuffer(34962,a);e.vertexAttribPointer(r,3,o,false,12,0)}else if(u!==undefined){const n=u[t];if(n!==undefined){switch(n.length){case 2:e.vertexAttrib2fv(r,n);break;case 3:e.vertexAttrib3fv(r,n);break;case 4:e.vertexAttrib4fv(r,n);break;default:e.vertexAttrib1fv(r,n)}}}}}b()}function S(){A();for(const e in s){const t=s[e];for(const e in t){const n=t[e];for(const e in n){d(n[e].object);delete n[e]}delete t[e]}delete s[e]}}function T(e){if(s[e.id]===undefined)return;const t=s[e.id];for(const e in t){const n=t[e];for(const e in n){d(n[e].object);delete n[e]}delete t[e]}delete s[e.id]}function E(e){for(const t in s){const n=s[t];if(n[e.id]===undefined)continue;const r=n[e.id];for(const e in r){d(r[e].object);delete r[e]}delete n[e.id]}}function A(){L();if(l===c)return;l=c;f(l.object)}function L(){c.geometry=null;c.program=null;c.wireframe=false}return{setup:u,reset:A,resetDefaultState:L,dispose:S,releaseStatesOfGeometry:T,releaseStatesOfProgram:E,initAttributes:v,enableAttribute:_,disableUnusedAttributes:b}}function WebGLBufferRenderer(e,t,n,r){const i=r.isWebGL2;let a;function o(e){a=e}function s(t,r){e.drawArrays(a,t,r);n.update(r,a,1)}function c(r,o,s){if(s===0)return;let c,l;if(i){c=e;l="drawArraysInstanced"}else{c=t.get("ANGLE_instanced_arrays");l="drawArraysInstancedANGLE";if(c===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}c[l](a,r,o,s);n.update(o,a,s)}this.setMode=o;this.render=s;this.renderInstances=c}function WebGLCapabilities(e,t,n){let r;function i(){if(r!==undefined)return r;const n=t.get("EXT_texture_filter_anisotropic");if(n!==null){r=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{r=0}return r}function a(t){if(t==="highp"){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0){return"highp"}t="mediump"}if(t==="mediump"){if(e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0){return"mediump"}}return"lowp"}const o=typeof WebGL2RenderingContext!=="undefined"&&e instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!=="undefined"&&e instanceof WebGL2ComputeRenderingContext;let s=n.precision!==undefined?n.precision:"highp";const c=a(s);if(c!==s){console.warn("THREE.WebGLRenderer:",s,"not supported, using",c,"instead.");s=c}const l=n.logarithmicDepthBuffer===true;const u=e.getParameter(34930);const h=e.getParameter(35660);const f=e.getParameter(3379);const d=e.getParameter(34076);const p=e.getParameter(34921);const m=e.getParameter(36347);const g=e.getParameter(36348);const y=e.getParameter(36349);const v=h>0;const _=o||!!t.get("OES_texture_float");const x=v&&_;const b=o?e.getParameter(36183):0;return{isWebGL2:o,getMaxAnisotropy:i,getMaxPrecision:a,precision:s,logarithmicDepthBuffer:l,maxTextures:u,maxVertexTextures:h,maxTextureSize:f,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:y,vertexTextures:v,floatFragmentTextures:_,floatVertexTextures:x,maxSamples:b}}function WebGLClipping(e){const t=this;let n=null,r=0,i=false,a=false;const o=new Plane,s=new Matrix3,c={value:null,needsUpdate:false};this.uniform=c;this.numPlanes=0;this.numIntersection=0;this.init=function(e,t,a){const o=e.length!==0||t||r!==0||i;i=t;n=u(e,a,0);r=e.length;return o};this.beginShadows=function(){a=true;u(null)};this.endShadows=function(){a=false;l()};this.setState=function(t,o,s){const h=t.clippingPlanes,f=t.clipIntersection,d=t.clipShadows;const p=e.get(t);if(!i||h===null||h.length===0||a&&!d){if(a){u(null)}else{l()}}else{const e=a?0:r,t=e*4;let i=p.clippingState||null;c.value=i;i=u(h,o,t,s);for(let e=0;e!==t;++e){i[e]=n[e]}p.clippingState=i;this.numIntersection=f?this.numPlanes:0;this.numPlanes+=e}};function l(){if(c.value!==n){c.value=n;c.needsUpdate=r>0}t.numPlanes=r;t.numIntersection=0}function u(e,n,r,i){const a=e!==null?e.length:0;let l=null;if(a!==0){l=c.value;if(i!==true||l===null){const t=r+a*4,i=n.matrixWorldInverse;s.getNormalMatrix(i);if(l===null||l.length<t){l=new Float32Array(t)}for(let t=0,n=r;t!==a;++t,n+=4){o.copy(e[t]).applyMatrix4(i,s);o.normal.toArray(l,n);l[n+3]=o.constant}}c.value=l;c.needsUpdate=true}t.numPlanes=a;t.numIntersection=0;return l}}function WebGLCubeMaps(e){let t=new WeakMap;function n(e,t){if(t===EquirectangularReflectionMapping){e.mapping=CubeReflectionMapping}else if(t===EquirectangularRefractionMapping){e.mapping=CubeRefractionMapping}return e}function r(r){if(r&&r.isTexture){const i=r.mapping;if(i===EquirectangularReflectionMapping||i===EquirectangularRefractionMapping){if(t.has(r)){const e=t.get(r).texture;return n(e,r.mapping)}else{const i=r.image;if(i&&i.height>0){const a=e.getRenderList();const o=e.getRenderTarget();const s=e.getRenderState();const c=new WebGLCubeRenderTarget(i.height/2);c.fromEquirectangularTexture(e,r);t.set(r,c);e.setRenderTarget(o);e.setRenderList(a);e.setRenderState(s);return n(c.texture,r.mapping)}else{return null}}}}return r}function i(){t=new WeakMap}return{get:r,dispose:i}}function WebGLExtensions(e){const t={};return{has:function(n){if(t[n]!==undefined){return t[n]!==null}let r;switch(n){case"WEBGL_depth_texture":r=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=e.getExtension(n)}t[n]=r;return r!==null},get:function(e){if(!this.has(e)){console.warn("THREE.WebGLRenderer: "+e+" extension not supported.")}return t[e]}}}function WebGLGeometries(e,t,n,r){const i=new WeakMap;const a=new WeakMap;function o(e){const s=e.target;const c=i.get(s);if(c.index!==null){t.remove(c.index)}for(const e in c.attributes){t.remove(c.attributes[e])}s.removeEventListener("dispose",o);i.delete(s);const l=a.get(c);if(l){t.remove(l);a.delete(c)}r.releaseStatesOfGeometry(s);if(s.isInstancedBufferGeometry===true){delete s._maxInstanceCount}n.memory.geometries--}function s(e,t){let r=i.get(t);if(r)return r;t.addEventListener("dispose",o);if(t.isBufferGeometry){r=t}else if(t.isGeometry){if(t._bufferGeometry===undefined){t._bufferGeometry=(new BufferGeometry).setFromObject(e)}r=t._bufferGeometry}i.set(t,r);n.memory.geometries++;return r}function c(e){const n=e.attributes;for(const e in n){t.update(n[e],34962)}const r=e.morphAttributes;for(const e in r){const n=r[e];for(let e=0,r=n.length;e<r;e++){t.update(n[e],34962)}}}function l(e){const n=[];const r=e.index;const i=e.attributes.position;let o=0;if(r!==null){const e=r.array;o=r.version;for(let t=0,r=e.length;t<r;t+=3){const r=e[t+0];const i=e[t+1];const a=e[t+2];n.push(r,i,i,a,a,r)}}else{const e=i.array;o=i.version;for(let t=0,r=e.length/3-1;t<r;t+=3){const e=t+0;const r=t+1;const i=t+2;n.push(e,r,r,i,i,e)}}const s=new(arrayMax(n)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(n,1);s.version=o;const c=a.get(e);if(c)t.remove(c);a.set(e,s)}function u(e){const t=a.get(e);if(t){const n=e.index;if(n!==null){if(t.version<n.version){l(e)}}}else{l(e)}return a.get(e)}return{get:s,update:c,getWireframeAttribute:u}}function WebGLIndexedBufferRenderer(e,t,n,r){const i=r.isWebGL2;let a;function o(e){a=e}let s,c;function l(e){s=e.type;c=e.bytesPerElement}function u(t,r){e.drawElements(a,r,s,t*c);n.update(r,a,1)}function h(r,o,l){if(l===0)return;let u,h;if(i){u=e;h="drawElementsInstanced"}else{u=t.get("ANGLE_instanced_arrays");h="drawElementsInstancedANGLE";if(u===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}u[h](a,o,s,r*c,l);n.update(o,a,l)}this.setMode=o;this.setIndex=l;this.render=u;this.renderInstances=h}function WebGLInfo(e){const t={geometries:0,textures:0};const n={frame:0,calls:0,triangles:0,points:0,lines:0};function r(e,t,r){n.calls++;switch(t){case 4:n.triangles+=r*(e/3);break;case 1:n.lines+=r*(e/2);break;case 3:n.lines+=r*(e-1);break;case 2:n.lines+=r*e;break;case 0:n.points+=r*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",t);break}}function i(){n.frame++;n.calls=0;n.triangles=0;n.points=0;n.lines=0}return{memory:t,render:n,programs:null,autoReset:true,reset:i,update:r}}function numericalSort(e,t){return e[0]-t[0]}function absNumericalSort(e,t){return Math.abs(t[1])-Math.abs(e[1])}function WebGLMorphtargets(e){const t={};const n=new Float32Array(8);const r=[];for(let e=0;e<8;e++){r[e]=[e,0]}function i(i,a,o,s){const c=i.morphTargetInfluences;const l=c===undefined?0:c.length;let u=t[a.id];if(u===undefined){u=[];for(let e=0;e<l;e++){u[e]=[e,0]}t[a.id]=u}for(let e=0;e<l;e++){const t=u[e];t[0]=e;t[1]=c[e]}u.sort(absNumericalSort);for(let e=0;e<8;e++){if(e<l&&u[e][1]){r[e][0]=u[e][0];r[e][1]=u[e][1]}else{r[e][0]=Number.MAX_SAFE_INTEGER;r[e][1]=0}}r.sort(numericalSort);const h=o.morphTargets&&a.morphAttributes.position;const f=o.morphNormals&&a.morphAttributes.normal;let d=0;for(let e=0;e<8;e++){const t=r[e];const i=t[0];const o=t[1];if(i!==Number.MAX_SAFE_INTEGER&&o){if(h&&a.getAttribute("morphTarget"+e)!==h[i]){a.setAttribute("morphTarget"+e,h[i])}if(f&&a.getAttribute("morphNormal"+e)!==f[i]){a.setAttribute("morphNormal"+e,f[i])}n[e]=o;d+=o}else{if(h&&a.getAttribute("morphTarget"+e)!==undefined){a.deleteAttribute("morphTarget"+e)}if(f&&a.getAttribute("morphNormal"+e)!==undefined){a.deleteAttribute("morphNormal"+e)}n[e]=0}}const p=a.morphTargetsRelative?1:1-d;s.getUniforms().setValue(e,"morphTargetBaseInfluence",p);s.getUniforms().setValue(e,"morphTargetInfluences",n)}return{update:i}}function WebGLObjects(e,t,n,r){let i=new WeakMap;function a(e){const a=r.render.frame;const o=e.geometry;const s=t.get(e,o);if(i.get(s)!==a){if(o.isGeometry){s.updateFromObject(e)}t.update(s);i.set(s,a)}if(e.isInstancedMesh){n.update(e.instanceMatrix,34962);if(e.instanceColor!==null){n.update(e.instanceColor,34962)}}return s}function o(){i=new WeakMap}return{update:a,dispose:o}}function CubeTexture(e,t,n,r,i,a,o,s,c,l){e=e!==undefined?e:[];t=t!==undefined?t:CubeReflectionMapping;o=o!==undefined?o:RGBFormat;Texture.call(this,e,t,n,r,i,a,o,s,c,l);this.flipY=false}CubeTexture.prototype=Object.create(Texture.prototype);CubeTexture.prototype.constructor=CubeTexture;CubeTexture.prototype.isCubeTexture=true;Object.defineProperty(CubeTexture.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}});function DataTexture2DArray(e,t,n,r){Texture.call(this,null);this.image={data:e||null,width:t||1,height:n||1,depth:r||1};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true}DataTexture2DArray.prototype=Object.create(Texture.prototype);DataTexture2DArray.prototype.constructor=DataTexture2DArray;DataTexture2DArray.prototype.isDataTexture2DArray=true;function DataTexture3D(e,t,n,r){Texture.call(this,null);this.image={data:e||null,width:t||1,height:n||1,depth:r||1};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.needsUpdate=true}DataTexture3D.prototype=Object.create(Texture.prototype);DataTexture3D.prototype.constructor=DataTexture3D;DataTexture3D.prototype.isDataTexture3D=true;const emptyTexture=new Texture;const emptyTexture2dArray=new DataTexture2DArray;const emptyTexture3d=new DataTexture3D;const emptyCubeTexture=new CubeTexture;const arrayCacheF32=[];const arrayCacheI32=[];const mat4array=new Float32Array(16);const mat3array=new Float32Array(9);const mat2array=new Float32Array(4);function flatten(e,t,n){const r=e[0];if(r<=0||r>0)return e;const i=t*n;let a=arrayCacheF32[i];if(a===undefined){a=new Float32Array(i);arrayCacheF32[i]=a}if(t!==0){r.toArray(a,0);for(let r=1,i=0;r!==t;++r){i+=n;e[r].toArray(a,i)}}return a}function arraysEqual(e,t){if(e.length!==t.length)return false;for(let n=0,r=e.length;n<r;n++){if(e[n]!==t[n])return false}return true}function copyArray(e,t){for(let n=0,r=t.length;n<r;n++){e[n]=t[n]}}function allocTexUnits(e,t){let n=arrayCacheI32[t];if(n===undefined){n=new Int32Array(t);arrayCacheI32[t]=n}for(let r=0;r!==t;++r){n[r]=e.allocateTextureUnit()}return n}function setValueV1f(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1f(this.addr,t);n[0]=t}function setValueV2f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y){e.uniform2f(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(arraysEqual(n,t))return;e.uniform2fv(this.addr,t);copyArray(n,t)}}function setValueV3f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3f(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else if(t.r!==undefined){if(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b){e.uniform3f(this.addr,t.r,t.g,t.b);n[0]=t.r;n[1]=t.g;n[2]=t.b}}else{if(arraysEqual(n,t))return;e.uniform3fv(this.addr,t);copyArray(n,t)}}function setValueV4f(e,t){const n=this.cache;if(t.x!==undefined){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4f(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(arraysEqual(n,t))return;e.uniform4fv(this.addr,t);copyArray(n,t)}}function setValueM2(e,t){const n=this.cache;const r=t.elements;if(r===undefined){if(arraysEqual(n,t))return;e.uniformMatrix2fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;mat2array.set(r);e.uniformMatrix2fv(this.addr,false,mat2array);copyArray(n,r)}}function setValueM3(e,t){const n=this.cache;const r=t.elements;if(r===undefined){if(arraysEqual(n,t))return;e.uniformMatrix3fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;mat3array.set(r);e.uniformMatrix3fv(this.addr,false,mat3array);copyArray(n,r)}}function setValueM4(e,t){const n=this.cache;const r=t.elements;if(r===undefined){if(arraysEqual(n,t))return;e.uniformMatrix4fv(this.addr,false,t);copyArray(n,t)}else{if(arraysEqual(n,r))return;mat4array.set(r);e.uniformMatrix4fv(this.addr,false,mat4array);copyArray(n,r)}}function setValueT1(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.safeSetTexture2D(t||emptyTexture,i)}function setValueT2DArray1(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.setTexture2DArray(t||emptyTexture2dArray,i)}function setValueT3D1(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.setTexture3D(t||emptyTexture3d,i)}function setValueT6(e,t,n){const r=this.cache;const i=n.allocateTextureUnit();if(r[0]!==i){e.uniform1i(this.addr,i);r[0]=i}n.safeSetTextureCube(t||emptyCubeTexture,i)}function setValueV1i(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1i(this.addr,t);n[0]=t}function setValueV2i(e,t){const n=this.cache;if(arraysEqual(n,t))return;e.uniform2iv(this.addr,t);copyArray(n,t)}function setValueV3i(e,t){const n=this.cache;if(arraysEqual(n,t))return;e.uniform3iv(this.addr,t);copyArray(n,t)}function setValueV4i(e,t){const n=this.cache;if(arraysEqual(n,t))return;e.uniform4iv(this.addr,t);copyArray(n,t)}function setValueV1ui(e,t){const n=this.cache;if(n[0]===t)return;e.uniform1ui(this.addr,t);n[0]=t}function getSingularSetter(e){switch(e){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(e,t){e.uniform1fv(this.addr,t)}function setValueV1iArray(e,t){e.uniform1iv(this.addr,t)}function setValueV2iArray(e,t){e.uniform2iv(this.addr,t)}function setValueV3iArray(e,t){e.uniform3iv(this.addr,t)}function setValueV4iArray(e,t){e.uniform4iv(this.addr,t)}function setValueV2fArray(e,t){const n=flatten(t,this.size,2);e.uniform2fv(this.addr,n)}function setValueV3fArray(e,t){const n=flatten(t,this.size,3);e.uniform3fv(this.addr,n)}function setValueV4fArray(e,t){const n=flatten(t,this.size,4);e.uniform4fv(this.addr,n)}function setValueM2Array(e,t){const n=flatten(t,this.size,4);e.uniformMatrix2fv(this.addr,false,n)}function setValueM3Array(e,t){const n=flatten(t,this.size,9);e.uniformMatrix3fv(this.addr,false,n)}function setValueM4Array(e,t){const n=flatten(t,this.size,16);e.uniformMatrix4fv(this.addr,false,n)}function setValueT1Array(e,t,n){const r=t.length;const i=allocTexUnits(n,r);e.uniform1iv(this.addr,i);for(let e=0;e!==r;++e){n.safeSetTexture2D(t[e]||emptyTexture,i[e])}}function setValueT6Array(e,t,n){const r=t.length;const i=allocTexUnits(n,r);e.uniform1iv(this.addr,i);for(let e=0;e!==r;++e){n.safeSetTextureCube(t[e]||emptyCubeTexture,i[e])}}function getPureArraySetter(e){switch(e){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35680:case 36300:case 36308:case 36293:return setValueT6Array}}function SingleUniform(e,t,n){this.id=e;this.addr=n;this.cache=[];this.setValue=getSingularSetter(t.type)}function PureArrayUniform(e,t,n){this.id=e;this.addr=n;this.cache=[];this.size=t.size;this.setValue=getPureArraySetter(t.type)}PureArrayUniform.prototype.updateCache=function(e){const t=this.cache;if(e instanceof Float32Array&&t.length!==e.length){this.cache=new Float32Array(e.length)}copyArray(t,e)};function StructuredUniform(e){this.id=e;this.seq=[];this.map={}}StructuredUniform.prototype.setValue=function(e,t,n){const r=this.seq;for(let i=0,a=r.length;i!==a;++i){const a=r[i];a.setValue(e,t[a.id],n)}};const RePathPart=/([\w\d_]+)(\])?(\[|\.)?/g;function addUniform(e,t){e.seq.push(t);e.map[t.id]=t}function parseUniform(e,t,n){const r=e.name,i=r.length;RePathPart.lastIndex=0;while(true){const a=RePathPart.exec(r),o=RePathPart.lastIndex;let s=a[1];const c=a[2]==="]",l=a[3];if(c)s=s|0;if(l===undefined||l==="["&&o+2===i){addUniform(n,l===undefined?new SingleUniform(s,e,t):new PureArrayUniform(s,e,t));break}else{const e=n.map;let t=e[s];if(t===undefined){t=new StructuredUniform(s);addUniform(n,t)}n=t}}}function WebGLUniforms(e,t){this.seq=[];this.map={};const n=e.getProgramParameter(t,35718);for(let r=0;r<n;++r){const n=e.getActiveUniform(t,r),i=e.getUniformLocation(t,n.name);parseUniform(n,i,this)}}WebGLUniforms.prototype.setValue=function(e,t,n,r){const i=this.map[t];if(i!==undefined)i.setValue(e,n,r)};WebGLUniforms.prototype.setOptional=function(e,t,n){const r=t[n];if(r!==undefined)this.setValue(e,n,r)};WebGLUniforms.upload=function(e,t,n,r){for(let i=0,a=t.length;i!==a;++i){const a=t[i],o=n[a.id];if(o.needsUpdate!==false){a.setValue(e,o.value,r)}}};WebGLUniforms.seqWithValue=function(e,t){const n=[];for(let r=0,i=e.length;r!==i;++r){const i=e[r];if(i.id in t)n.push(i)}return n};function WebGLShader(e,t,n){const r=e.createShader(t);e.shaderSource(r,n);e.compileShader(r);return r}let programIdCount=0;function addLineNumbers(e){const t=e.split("\n");for(let e=0;e<t.length;e++){t[e]=e+1+": "+t[e]}return t.join("\n")}function getEncodingComponents(e){switch(e){case LinearEncoding:return["Linear","( value )"];case sRGBEncoding:return["sRGB","( value )"];case RGBEEncoding:return["RGBE","( value )"];case RGBM7Encoding:return["RGBM","( value, 7.0 )"];case RGBM16Encoding:return["RGBM","( value, 16.0 )"];case RGBDEncoding:return["RGBD","( value, 256.0 )"];case GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case LogLuvEncoding:return["LogLuv","( value )"];default:console.warn("THREE.WebGLProgram: Unsupported encoding:",e);return["Linear","( value )"]}}function getShaderErrors(e,t,n){const r=e.getShaderParameter(t,35713);const i=e.getShaderInfoLog(t).trim();if(r&&i==="")return"";const a=e.getShaderSource(t);return"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+i+addLineNumbers(a)}function getTexelDecodingFunction(e,t){const n=getEncodingComponents(t);return"vec4 "+e+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function getTexelEncodingFunction(e,t){const n=getEncodingComponents(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function getToneMappingFunction(e,t){let n;switch(t){case LinearToneMapping:n="Linear";break;case ReinhardToneMapping:n="Reinhard";break;case CineonToneMapping:n="OptimizedCineon";break;case ACESFilmicToneMapping:n="ACESFilmic";break;case CustomToneMapping:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t);n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function generateExtensions(e){const t=[e.extensionDerivatives||e.envMapCubeUV||e.bumpMap||e.tangentSpaceNormalMap||e.clearcoatNormalMap||e.flatShading||e.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(e.extensionFragDepth||e.logarithmicDepthBuffer)&&e.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",e.extensionDrawBuffers&&e.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return t.filter(filterEmptyLine).join("\n")}function generateDefines(e){const t=[];for(const n in e){const r=e[n];if(r===false)continue;t.push("#define "+n+" "+r)}return t.join("\n")}function fetchAttributeLocations(e,t){const n={};const r=e.getProgramParameter(t,35721);for(let i=0;i<r;i++){const r=e.getActiveAttrib(t,i);const a=r.name;n[a]=e.getAttribLocation(t,a)}return n}function filterEmptyLine(e){return e!==""}function replaceLightNums(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function replaceClippingPlaneNums(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(e){return e.replace(includePattern,includeReplacer)}function includeReplacer(e,t){const n=ShaderChunk[t];if(n===undefined){throw new Error("Can not resolve #include <"+t+">")}return resolveIncludes(n)}const deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;const unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(e){return e.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer)}function deprecatedLoopReplacer(e,t,n,r){console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");return loopReplacer(e,t,n,r)}function loopReplacer(e,t,n,r){let i="";for(let e=parseInt(t);e<parseInt(n);e++){i+=r.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e)}return i}function generatePrecision(e){let t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";if(e.precision==="highp"){t+="\n#define HIGH_PRECISION"}else if(e.precision==="mediump"){t+="\n#define MEDIUM_PRECISION"}else if(e.precision==="lowp"){t+="\n#define LOW_PRECISION"}return t}function generateShadowMapTypeDefine(e){let t="SHADOWMAP_TYPE_BASIC";if(e.shadowMapType===PCFShadowMap){t="SHADOWMAP_TYPE_PCF"}else if(e.shadowMapType===PCFSoftShadowMap){t="SHADOWMAP_TYPE_PCF_SOFT"}else if(e.shadowMapType===VSMShadowMap){t="SHADOWMAP_TYPE_VSM"}return t}function generateEnvMapTypeDefine(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap){switch(e.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:t="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:t="ENVMAP_TYPE_CUBE_UV";break}}return t}function generateEnvMapModeDefine(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap){switch(e.envMapMode){case CubeRefractionMapping:case CubeUVRefractionMapping:t="ENVMAP_MODE_REFRACTION";break}}return t}function generateEnvMapBlendingDefine(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap){switch(e.combine){case MultiplyOperation:t="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:t="ENVMAP_BLENDING_MIX";break;case AddOperation:t="ENVMAP_BLENDING_ADD";break}}return t}function WebGLProgram(e,t,n,r){const i=e.getContext();const a=n.defines;let o=n.vertexShader;let s=n.fragmentShader;const c=generateShadowMapTypeDefine(n);const l=generateEnvMapTypeDefine(n);const u=generateEnvMapModeDefine(n);const h=generateEnvMapBlendingDefine(n);const f=e.gammaFactor>0?e.gammaFactor:1;const d=n.isWebGL2?"":generateExtensions(n);const p=generateDefines(a);const m=i.createProgram();let g,y;let v=n.glslVersion?"#version "+n.glslVersion+"\n":"";if(n.isRawShaderMaterial){g=[p].filter(filterEmptyLine).join("\n");if(g.length>0){g+="\n"}y=[d,p].filter(filterEmptyLine).join("\n");if(y.length>0){y+="\n"}}else{g=[generatePrecision(n),"#define SHADER_NAME "+n.shaderName,p,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+f,"#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===false?"#define USE_MORPHNORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","attribute vec4 tangent;","#endif","#ifdef USE_COLOR","attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","attribute vec3 morphTarget0;","attribute vec3 morphTarget1;","attribute vec3 morphTarget2;","attribute vec3 morphTarget3;","#ifdef USE_MORPHNORMALS","attribute vec3 morphNormal0;","attribute vec3 morphNormal1;","attribute vec3 morphNormal2;","attribute vec3 morphNormal3;","#else","attribute vec3 morphTarget4;","attribute vec3 morphTarget5;","attribute vec3 morphTarget6;","attribute vec3 morphTarget7;","#endif","#endif","#ifdef USE_SKINNING","attribute vec4 skinIndex;","attribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n");y=[d,generatePrecision(n),"#define SHADER_NAME "+n.shaderName,p,n.alphaTest?"#define ALPHATEST "+n.alphaTest+(n.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+f,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+l:"",n.envMap?"#define "+u:"",n.envMap?"#define "+h:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.sheen?"#define USE_SHEEN":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+c:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",n.toneMapping!==NoToneMapping?ShaderChunk["tonemapping_pars_fragment"]:"",n.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",ShaderChunk["encodings_pars_fragment"],n.map?getTexelDecodingFunction("mapTexelToLinear",n.mapEncoding):"",n.matcap?getTexelDecodingFunction("matcapTexelToLinear",n.matcapEncoding):"",n.envMap?getTexelDecodingFunction("envMapTexelToLinear",n.envMapEncoding):"",n.emissiveMap?getTexelDecodingFunction("emissiveMapTexelToLinear",n.emissiveMapEncoding):"",n.lightMap?getTexelDecodingFunction("lightMapTexelToLinear",n.lightMapEncoding):"",getTexelEncodingFunction("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")}o=resolveIncludes(o);o=replaceLightNums(o,n);o=replaceClippingPlaneNums(o,n);s=resolveIncludes(s);s=replaceLightNums(s,n);s=replaceClippingPlaneNums(s,n);o=unrollLoops(o);s=unrollLoops(s);if(n.isWebGL2&&n.isRawShaderMaterial!==true){v="#version 300 es\n";g=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g;y=["#define varying in",n.glslVersion===GLSL3?"":"out highp vec4 pc_fragColor;",n.glslVersion===GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+y}const _=v+g+o;const x=v+y+s;const b=WebGLShader(i,35633,_);const M=WebGLShader(i,35632,x);i.attachShader(m,b);i.attachShader(m,M);if(n.index0AttributeName!==undefined){i.bindAttribLocation(m,0,n.index0AttributeName)}else if(n.morphTargets===true){i.bindAttribLocation(m,0,"position")}i.linkProgram(m);if(e.debug.checkShaderErrors){const e=i.getProgramInfoLog(m).trim();const t=i.getShaderInfoLog(b).trim();const n=i.getShaderInfoLog(M).trim();let r=true;let a=true;if(i.getProgramParameter(m,35714)===false){r=false;const t=getShaderErrors(i,b,"vertex");const n=getShaderErrors(i,M,"fragment");console.error("THREE.WebGLProgram: shader error: ",i.getError(),"35715",i.getProgramParameter(m,35715),"gl.getProgramInfoLog",e,t,n)}else if(e!==""){console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",e)}else if(t===""||n===""){a=false}if(a){this.diagnostics={runnable:r,programLog:e,vertexShader:{log:t,prefix:g},fragmentShader:{log:n,prefix:y}}}}i.deleteShader(b);i.deleteShader(M);let w;this.getUniforms=function(){if(w===undefined){w=new WebGLUniforms(i,m)}return w};let S;this.getAttributes=function(){if(S===undefined){S=fetchAttributeLocations(i,m)}return S};this.destroy=function(){r.releaseStatesOfProgram(this);i.deleteProgram(m);this.program=undefined};this.name=n.shaderName;this.id=programIdCount++;this.cacheKey=t;this.usedTimes=1;this.program=m;this.vertexShader=b;this.fragmentShader=M;return this}function WebGLPrograms(e,t,n,r,i,a){const o=[];const s=r.isWebGL2;const c=r.logarithmicDepthBuffer;const l=r.floatVertexTextures;const u=r.maxVertexUniforms;const h=r.vertexTextures;let f=r.precision;const d={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};const p=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function m(e){const t=e.skeleton;const n=t.bones;if(l){return 1024}else{const e=u;const t=Math.floor((e-20)/4);const r=Math.min(t,n.length);if(r<n.length){console.warn("THREE.WebGLRenderer: Skeleton has "+n.length+" bones. This GPU supports "+r+".");return 0}return r}}function g(e){let t;if(!e){t=LinearEncoding}else if(e.isTexture){t=e.encoding}else if(e.isWebGLRenderTarget){console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");t=e.texture.encoding}return t}function y(i,o,u,p,y){const v=p.fog;const _=i.isMeshStandardMaterial?p.environment:null;const x=t.get(i.envMap||_);const b=d[i.type];const M=y.isSkinnedMesh?m(y):0;if(i.precision!==null){f=r.getMaxPrecision(i.precision);if(f!==i.precision){console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",f,"instead.")}}let w,S;if(b){const e=ShaderLib[b];w=e.vertexShader;S=e.fragmentShader}else{w=i.vertexShader;S=i.fragmentShader}const T=e.getRenderTarget();const E={isWebGL2:s,shaderID:b,shaderName:i.type,vertexShader:w,fragmentShader:S,defines:i.defines,isRawShaderMaterial:i.isRawShaderMaterial===true,glslVersion:i.glslVersion,precision:f,instancing:y.isInstancedMesh===true,instancingColor:y.isInstancedMesh===true&&y.instanceColor!==null,supportsVertexTextures:h,outputEncoding:T!==null?g(T.texture):e.outputEncoding,map:!!i.map,mapEncoding:g(i.map),matcap:!!i.matcap,matcapEncoding:g(i.matcap),envMap:!!x,envMapMode:x&&x.mapping,envMapEncoding:g(x),envMapCubeUV:!!x&&(x.mapping===CubeUVReflectionMapping||x.mapping===CubeUVRefractionMapping),lightMap:!!i.lightMap,lightMapEncoding:g(i.lightMap),aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,emissiveMapEncoding:g(i.emissiveMap),bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,objectSpaceNormalMap:i.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:i.normalMapType===TangentSpaceNormalMap,clearcoatMap:!!i.clearcoatMap,clearcoatRoughnessMap:!!i.clearcoatRoughnessMap,clearcoatNormalMap:!!i.clearcoatNormalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,alphaMap:!!i.alphaMap,gradientMap:!!i.gradientMap,sheen:!!i.sheen,transmissionMap:!!i.transmissionMap,combine:i.combine,vertexTangents:i.normalMap&&i.vertexTangents,vertexColors:i.vertexColors,vertexUvs:!!i.map||!!i.bumpMap||!!i.normalMap||!!i.specularMap||!!i.alphaMap||!!i.emissiveMap||!!i.roughnessMap||!!i.metalnessMap||!!i.clearcoatMap||!!i.clearcoatRoughnessMap||!!i.clearcoatNormalMap||!!i.displacementMap||!!i.transmissionMap,uvsVertexOnly:!(!!i.map||!!i.bumpMap||!!i.normalMap||!!i.specularMap||!!i.alphaMap||!!i.emissiveMap||!!i.roughnessMap||!!i.metalnessMap||!!i.clearcoatNormalMap||!!i.transmissionMap)&&!!i.displacementMap,fog:!!v,useFog:i.fog,fogExp2:v&&v.isFogExp2,flatShading:i.flatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:c,skinning:i.skinning&&M>0,maxBones:M,useVertexTexture:l,morphTargets:i.morphTargets,morphNormals:i.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:i.dithering,shadowMapEnabled:e.shadowMap.enabled&&u.length>0,shadowMapType:e.shadowMap.type,toneMapping:i.toneMapped?e.toneMapping:NoToneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,alphaTest:i.alphaTest,doubleSided:i.side===DoubleSide,flipSided:i.side===BackSide,depthPacking:i.depthPacking!==undefined?i.depthPacking:false,index0AttributeName:i.index0AttributeName,extensionDerivatives:i.extensions&&i.extensions.derivatives,extensionFragDepth:i.extensions&&i.extensions.fragDepth,extensionDrawBuffers:i.extensions&&i.extensions.drawBuffers,extensionShaderTextureLOD:i.extensions&&i.extensions.shaderTextureLOD,rendererExtensionFragDepth:s||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:s||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:s||n.has("EXT_shader_texture_lod"),customProgramCacheKey:i.customProgramCacheKey()};return E}function v(t){const n=[];if(t.shaderID){n.push(t.shaderID)}else{n.push(t.fragmentShader);n.push(t.vertexShader)}if(t.defines!==undefined){for(const e in t.defines){n.push(e);n.push(t.defines[e])}}if(t.isRawShaderMaterial===false){for(let e=0;e<p.length;e++){n.push(t[p[e]])}n.push(e.outputEncoding);n.push(e.gammaFactor)}n.push(t.customProgramCacheKey);return n.join()}function _(e){const t=d[e.type];let n;if(t){const e=ShaderLib[t];n=UniformsUtils.clone(e.uniforms)}else{n=e.uniforms}return n}function x(t,n){let r;for(let e=0,t=o.length;e<t;e++){const t=o[e];if(t.cacheKey===n){r=t;++r.usedTimes;break}}if(r===undefined){r=new WebGLProgram(e,n,t,i);o.push(r)}return r}function b(e){if(--e.usedTimes===0){const t=o.indexOf(e);o[t]=o[o.length-1];o.pop();e.destroy()}}return{getParameters:y,getProgramCacheKey:v,getUniforms:_,acquireProgram:x,releaseProgram:b,programs:o}}function WebGLProperties(){let e=new WeakMap;function t(t){let n=e.get(t);if(n===undefined){n={};e.set(t,n)}return n}function n(t){e.delete(t)}function r(t,n,r){e.get(t)[n]=r}function i(){e=new WeakMap}return{get:t,remove:n,update:r,dispose:i}}function painterSortStable(e,t){if(e.groupOrder!==t.groupOrder){return e.groupOrder-t.groupOrder}else if(e.renderOrder!==t.renderOrder){return e.renderOrder-t.renderOrder}else if(e.program!==t.program){return e.program.id-t.program.id}else if(e.material.id!==t.material.id){return e.material.id-t.material.id}else if(e.z!==t.z){return e.z-t.z}else{return e.id-t.id}}function reversePainterSortStable(e,t){if(e.groupOrder!==t.groupOrder){return e.groupOrder-t.groupOrder}else if(e.renderOrder!==t.renderOrder){return e.renderOrder-t.renderOrder}else if(e.z!==t.z){return t.z-e.z}else{return e.id-t.id}}function WebGLRenderList(e){const t=[];let n=0;const r=[];const i=[];const a={id:-1};function o(){n=0;r.length=0;i.length=0}function s(r,i,o,s,c,l){let u=t[n];const h=e.get(o);if(u===undefined){u={id:r.id,object:r,geometry:i,material:o,program:h.program||a,groupOrder:s,renderOrder:r.renderOrder,z:c,group:l};t[n]=u}else{u.id=r.id;u.object=r;u.geometry=i;u.material=o;u.program=h.program||a;u.groupOrder=s;u.renderOrder=r.renderOrder;u.z=c;u.group=l}n++;return u}function c(e,t,n,a,o,c){const l=s(e,t,n,a,o,c);(n.transparent===true?i:r).push(l)}function l(e,t,n,a,o,c){const l=s(e,t,n,a,o,c);(n.transparent===true?i:r).unshift(l)}function u(e,t){if(r.length>1)r.sort(e||painterSortStable);if(i.length>1)i.sort(t||reversePainterSortStable)}function h(){for(let e=n,r=t.length;e<r;e++){const n=t[e];if(n.id===null)break;n.id=null;n.object=null;n.geometry=null;n.material=null;n.program=null;n.group=null}}return{opaque:r,transparent:i,init:o,push:c,unshift:l,finish:h,sort:u}}function WebGLRenderLists(e){let t=new WeakMap;function n(n,r){const i=t.get(n);let a;if(i===undefined){a=new WebGLRenderList(e);t.set(n,new WeakMap);t.get(n).set(r,a)}else{a=i.get(r);if(a===undefined){a=new WebGLRenderList(e);i.set(r,a)}}return a}function r(){t=new WeakMap}return{get:n,dispose:r}}function UniformsCache(){const e={};return{get:function(t){if(e[t.id]!==undefined){return e[t.id]}let n;switch(t.type){case"DirectionalLight":n={direction:new Vector3,color:new Color};break;case"SpotLight":n={position:new Vector3,direction:new Vector3,color:new Color,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Vector3,color:new Color,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Vector3,skyColor:new Color,groundColor:new Color};break;case"RectAreaLight":n={color:new Color,position:new Vector3,halfWidth:new Vector3,halfHeight:new Vector3};break}e[t.id]=n;return n}}}function ShadowUniformsCache(){const e={};return{get:function(t){if(e[t.id]!==undefined){return e[t.id]}let n;switch(t.type){case"DirectionalLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2,shadowCameraNear:1,shadowCameraFar:1e3};break}e[t.id]=n;return n}}}let nextVersion=0;function shadowCastingLightsFirst(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function WebGLLights(){const e=new UniformsCache;const t=ShadowUniformsCache();const n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let e=0;e<9;e++)n.probe.push(new Vector3);const r=new Vector3;const i=new Matrix4;const a=new Matrix4;function o(o,s,c){let l=0,u=0,h=0;for(let e=0;e<9;e++)n.probe[e].set(0,0,0);let f=0;let d=0;let p=0;let m=0;let g=0;let y=0;let v=0;let _=0;const x=c.matrixWorldInverse;o.sort(shadowCastingLightsFirst);for(let s=0,c=o.length;s<c;s++){const c=o[s];const b=c.color;const M=c.intensity;const w=c.distance;const S=c.shadow&&c.shadow.map?c.shadow.map.texture:null;if(c.isAmbientLight){l+=b.r*M;u+=b.g*M;h+=b.b*M}else if(c.isLightProbe){for(let e=0;e<9;e++){n.probe[e].addScaledVector(c.sh.coefficients[e],M)}}else if(c.isDirectionalLight){const i=e.get(c);i.color.copy(c.color).multiplyScalar(c.intensity);i.direction.setFromMatrixPosition(c.matrixWorld);r.setFromMatrixPosition(c.target.matrixWorld);i.direction.sub(r);i.direction.transformDirection(x);if(c.castShadow){const e=c.shadow;const r=t.get(c);r.shadowBias=e.bias;r.shadowNormalBias=e.normalBias;r.shadowRadius=e.radius;r.shadowMapSize=e.mapSize;n.directionalShadow[f]=r;n.directionalShadowMap[f]=S;n.directionalShadowMatrix[f]=c.shadow.matrix;y++}n.directional[f]=i;f++}else if(c.isSpotLight){const i=e.get(c);i.position.setFromMatrixPosition(c.matrixWorld);i.position.applyMatrix4(x);i.color.copy(b).multiplyScalar(M);i.distance=w;i.direction.setFromMatrixPosition(c.matrixWorld);r.setFromMatrixPosition(c.target.matrixWorld);i.direction.sub(r);i.direction.transformDirection(x);i.coneCos=Math.cos(c.angle);i.penumbraCos=Math.cos(c.angle*(1-c.penumbra));i.decay=c.decay;if(c.castShadow){const e=c.shadow;const r=t.get(c);r.shadowBias=e.bias;r.shadowNormalBias=e.normalBias;r.shadowRadius=e.radius;r.shadowMapSize=e.mapSize;n.spotShadow[p]=r;n.spotShadowMap[p]=S;n.spotShadowMatrix[p]=c.shadow.matrix;_++}n.spot[p]=i;p++}else if(c.isRectAreaLight){const t=e.get(c);t.color.copy(b).multiplyScalar(M);t.position.setFromMatrixPosition(c.matrixWorld);t.position.applyMatrix4(x);a.identity();i.copy(c.matrixWorld);i.premultiply(x);a.extractRotation(i);t.halfWidth.set(c.width*.5,0,0);t.halfHeight.set(0,c.height*.5,0);t.halfWidth.applyMatrix4(a);t.halfHeight.applyMatrix4(a);n.rectArea[m]=t;m++}else if(c.isPointLight){const r=e.get(c);r.position.setFromMatrixPosition(c.matrixWorld);r.position.applyMatrix4(x);r.color.copy(c.color).multiplyScalar(c.intensity);r.distance=c.distance;r.decay=c.decay;if(c.castShadow){const e=c.shadow;const r=t.get(c);r.shadowBias=e.bias;r.shadowNormalBias=e.normalBias;r.shadowRadius=e.radius;r.shadowMapSize=e.mapSize;r.shadowCameraNear=e.camera.near;r.shadowCameraFar=e.camera.far;n.pointShadow[d]=r;n.pointShadowMap[d]=S;n.pointShadowMatrix[d]=c.shadow.matrix;v++}n.point[d]=r;d++}else if(c.isHemisphereLight){const t=e.get(c);t.direction.setFromMatrixPosition(c.matrixWorld);t.direction.transformDirection(x);t.direction.normalize();t.skyColor.copy(c.color).multiplyScalar(M);t.groundColor.copy(c.groundColor).multiplyScalar(M);n.hemi[g]=t;g++}}if(m>0){n.rectAreaLTC1=UniformsLib.LTC_1;n.rectAreaLTC2=UniformsLib.LTC_2}n.ambient[0]=l;n.ambient[1]=u;n.ambient[2]=h;const b=n.hash;if(b.directionalLength!==f||b.pointLength!==d||b.spotLength!==p||b.rectAreaLength!==m||b.hemiLength!==g||b.numDirectionalShadows!==y||b.numPointShadows!==v||b.numSpotShadows!==_){n.directional.length=f;n.spot.length=p;n.rectArea.length=m;n.point.length=d;n.hemi.length=g;n.directionalShadow.length=y;n.directionalShadowMap.length=y;n.pointShadow.length=v;n.pointShadowMap.length=v;n.spotShadow.length=_;n.spotShadowMap.length=_;n.directionalShadowMatrix.length=y;n.pointShadowMatrix.length=v;n.spotShadowMatrix.length=_;b.directionalLength=f;b.pointLength=d;b.spotLength=p;b.rectAreaLength=m;b.hemiLength=g;b.numDirectionalShadows=y;b.numPointShadows=v;b.numSpotShadows=_;n.version=nextVersion++}}return{setup:o,state:n}}function WebGLRenderState(){const e=new WebGLLights;const t=[];const n=[];function r(){t.length=0;n.length=0}function i(e){t.push(e)}function a(e){n.push(e)}function o(r){e.setup(t,n,r)}const s={lightsArray:t,shadowsArray:n,lights:e};return{init:r,state:s,setupLights:o,pushLight:i,pushShadow:a}}function WebGLRenderStates(){let e=new WeakMap;function t(t,n){let r;if(e.has(t)===false){r=new WebGLRenderState;e.set(t,new WeakMap);e.get(t).set(n,r)}else{if(e.get(t).has(n)===false){r=new WebGLRenderState;e.get(t).set(n,r)}else{r=e.get(t).get(n)}}return r}function n(){e=new WeakMap}return{get:t,dispose:n}}function MeshDepthMaterial(e){Material.call(this);this.type="MeshDepthMaterial";this.depthPacking=BasicDepthPacking;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.setValues(e)}MeshDepthMaterial.prototype=Object.create(Material.prototype);MeshDepthMaterial.prototype.constructor=MeshDepthMaterial;MeshDepthMaterial.prototype.isMeshDepthMaterial=true;MeshDepthMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.depthPacking=e.depthPacking;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;return this};function MeshDistanceMaterial(e){Material.call(this);this.type="MeshDistanceMaterial";this.referencePosition=new Vector3;this.nearDistance=1;this.farDistance=1e3;this.skinning=false;this.morphTargets=false;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.fog=false;this.setValues(e)}MeshDistanceMaterial.prototype=Object.create(Material.prototype);MeshDistanceMaterial.prototype.constructor=MeshDistanceMaterial;MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;MeshDistanceMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.referencePosition.copy(e.referencePosition);this.nearDistance=e.nearDistance;this.farDistance=e.farDistance;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;return this};var vsm_frag="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";var vsm_vert="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";function WebGLShadowMap(e,t,n){let r=new Frustum;const i=new Vector2,a=new Vector2,o=new Vector4,s=[],c=[],l={};const u={0:BackSide,1:FrontSide,2:DoubleSide};const h=new ShaderMaterial({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2},radius:{value:4}},vertexShader:vsm_vert,fragmentShader:vsm_frag});const f=h.clone();f.defines.HORIZONAL_PASS=1;const d=new BufferGeometry;d.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const p=new Mesh(d,h);const m=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(t,s,c){if(m.enabled===false)return;if(m.autoUpdate===false&&m.needsUpdate===false)return;if(t.length===0)return;const l=e.getRenderTarget();const u=e.getActiveCubeFace();const h=e.getActiveMipmapLevel();const f=e.state;f.setBlending(NoBlending);f.buffers.color.setClear(1,1,1,1);f.buffers.depth.setTest(true);f.setScissorTest(false);for(let l=0,u=t.length;l<u;l++){const u=t[l];const h=u.shadow;if(h===undefined){console.warn("THREE.WebGLShadowMap:",u,"has no shadow.");continue}if(h.autoUpdate===false&&h.needsUpdate===false)continue;i.copy(h.mapSize);const d=h.getFrameExtents();i.multiply(d);a.copy(h.mapSize);if(i.x>n||i.y>n){if(i.x>n){a.x=Math.floor(n/d.x);i.x=a.x*d.x;h.mapSize.x=a.x}if(i.y>n){a.y=Math.floor(n/d.y);i.y=a.y*d.y;h.mapSize.y=a.y}}if(h.map===null&&!h.isPointLightShadow&&this.type===VSMShadowMap){const e={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};h.map=new WebGLRenderTarget(i.x,i.y,e);h.map.texture.name=u.name+".shadowMap";h.mapPass=new WebGLRenderTarget(i.x,i.y,e);h.camera.updateProjectionMatrix()}if(h.map===null){const e={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};h.map=new WebGLRenderTarget(i.x,i.y,e);h.map.texture.name=u.name+".shadowMap";h.camera.updateProjectionMatrix()}e.setRenderTarget(h.map);e.clear();const p=h.getViewportCount();for(let e=0;e<p;e++){const t=h.getViewport(e);o.set(a.x*t.x,a.y*t.y,a.x*t.z,a.y*t.w);f.viewport(o);h.updateMatrices(u,e);r=h.getFrustum();x(s,c,h.camera,u,this.type)}if(!h.isPointLightShadow&&this.type===VSMShadowMap){g(h,c)}h.needsUpdate=false}m.needsUpdate=false;e.setRenderTarget(l,u,h)};function g(n,r){const i=t.update(p);h.uniforms.shadow_pass.value=n.map.texture;h.uniforms.resolution.value=n.mapSize;h.uniforms.radius.value=n.radius;e.setRenderTarget(n.mapPass);e.clear();e.renderBufferDirect(r,null,i,h,p,null);f.uniforms.shadow_pass.value=n.mapPass.texture;f.uniforms.resolution.value=n.mapSize;f.uniforms.radius.value=n.radius;e.setRenderTarget(n.map);e.clear();e.renderBufferDirect(r,null,i,f,p,null)}function y(e,t,n){const r=e<<0|t<<1|n<<2;let i=s[r];if(i===undefined){i=new MeshDepthMaterial({depthPacking:RGBADepthPacking,morphTargets:e,skinning:t});s[r]=i}return i}function v(e,t,n){const r=e<<0|t<<1|n<<2;let i=c[r];if(i===undefined){i=new MeshDistanceMaterial({morphTargets:e,skinning:t});c[r]=i}return i}function _(t,n,r,i,a,o,s){let c=null;let h=y;let f=t.customDepthMaterial;if(i.isPointLight===true){h=v;f=t.customDistanceMaterial}if(f===undefined){let e=false;if(r.morphTargets===true){e=n.morphAttributes&&n.morphAttributes.position&&n.morphAttributes.position.length>0}let i=false;if(t.isSkinnedMesh===true){if(r.skinning===true){i=true}else{console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t)}}const a=t.isInstancedMesh===true;c=h(e,i,a)}else{c=f}if(e.localClippingEnabled&&r.clipShadows===true&&r.clippingPlanes.length!==0){const e=c.uuid,t=r.uuid;let n=l[e];if(n===undefined){n={};l[e]=n}let i=n[t];if(i===undefined){i=c.clone();n[t]=i}c=i}c.visible=r.visible;c.wireframe=r.wireframe;if(s===VSMShadowMap){c.side=r.shadowSide!==null?r.shadowSide:r.side}else{c.side=r.shadowSide!==null?r.shadowSide:u[r.side]}c.clipShadows=r.clipShadows;c.clippingPlanes=r.clippingPlanes;c.clipIntersection=r.clipIntersection;c.wireframeLinewidth=r.wireframeLinewidth;c.linewidth=r.linewidth;if(i.isPointLight===true&&c.isMeshDistanceMaterial===true){c.referencePosition.setFromMatrixPosition(i.matrixWorld);c.nearDistance=a;c.farDistance=o}return c}function x(n,i,a,o,s){if(n.visible===false)return;const c=n.layers.test(i.layers);if(c&&(n.isMesh||n.isLine||n.isPoints)){if((n.castShadow||n.receiveShadow&&s===VSMShadowMap)&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const r=t.update(n);const i=n.material;if(Array.isArray(i)){const t=r.groups;for(let c=0,l=t.length;c<l;c++){const l=t[c];const u=i[l.materialIndex];if(u&&u.visible){const t=_(n,r,u,o,a.near,a.far,s);e.renderBufferDirect(a,null,r,t,n,l)}}}else if(i.visible){const t=_(n,r,i,o,a.near,a.far,s);e.renderBufferDirect(a,null,r,t,n,null)}}}const l=n.children;for(let e=0,t=l.length;e<t;e++){x(l[e],i,a,o,s)}}}function WebGLState(e,t,n){const r=n.isWebGL2;function i(){let t=false;const n=new Vector4;let r=null;const i=new Vector4(0,0,0,0);return{setMask:function(n){if(r!==n&&!t){e.colorMask(n,n,n,n);r=n}},setLocked:function(e){t=e},setClear:function(t,r,a,o,s){if(s===true){t*=o;r*=o;a*=o}n.set(t,r,a,o);if(i.equals(n)===false){e.clearColor(t,r,a,o);i.copy(n)}},reset:function(){t=false;r=null;i.set(-1,0,0,0)}}}function a(){let t=false;let n=null;let r=null;let i=null;return{setTest:function(e){if(e){O(2929)}else{F(2929)}},setMask:function(r){if(n!==r&&!t){e.depthMask(r);n=r}},setFunc:function(t){if(r!==t){if(t){switch(t){case NeverDepth:e.depthFunc(512);break;case AlwaysDepth:e.depthFunc(519);break;case LessDepth:e.depthFunc(513);break;case LessEqualDepth:e.depthFunc(515);break;case EqualDepth:e.depthFunc(514);break;case GreaterEqualDepth:e.depthFunc(518);break;case GreaterDepth:e.depthFunc(516);break;case NotEqualDepth:e.depthFunc(517);break;default:e.depthFunc(515)}}else{e.depthFunc(515)}r=t}},setLocked:function(e){t=e},setClear:function(t){if(i!==t){e.clearDepth(t);i=t}},reset:function(){t=false;n=null;r=null;i=null}}}function o(){let t=false;let n=null;let r=null;let i=null;let a=null;let o=null;let s=null;let c=null;let l=null;return{setTest:function(e){if(!t){if(e){O(2960)}else{F(2960)}}},setMask:function(r){if(n!==r&&!t){e.stencilMask(r);n=r}},setFunc:function(t,n,o){if(r!==t||i!==n||a!==o){e.stencilFunc(t,n,o);r=t;i=n;a=o}},setOp:function(t,n,r){if(o!==t||s!==n||c!==r){e.stencilOp(t,n,r);o=t;s=n;c=r}},setLocked:function(e){t=e},setClear:function(t){if(l!==t){e.clearStencil(t);l=t}},reset:function(){t=false;n=null;r=null;i=null;a=null;o=null;s=null;c=null;l=null}}}const s=new i;const c=new a;const l=new o;let u={};let h=null;let f=null;let d=null;let p=null;let m=null;let g=null;let y=null;let v=null;let _=null;let x=false;let b=null;let M=null;let w=null;let S=null;let T=null;const E=e.getParameter(35661);let A=false;let L=0;const C=e.getParameter(7938);if(C.indexOf("WebGL")!==-1){L=parseFloat(/^WebGL\ ([0-9])/.exec(C)[1]);A=L>=1}else if(C.indexOf("OpenGL ES")!==-1){L=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(C)[1]);A=L>=2}let R=null;let P={};const B=new Vector4;const D=new Vector4;function G(t,n,r){const i=new Uint8Array(4);const a=e.createTexture();e.bindTexture(t,a);e.texParameteri(t,10241,9728);e.texParameteri(t,10240,9728);for(let t=0;t<r;t++){e.texImage2D(n+t,0,6408,1,1,0,6408,5121,i)}return a}const I={};I[3553]=G(3553,3553,1);I[34067]=G(34067,34069,6);s.setClear(0,0,0,1);c.setClear(1);l.setClear(0);O(2929);c.setFunc(LessEqualDepth);k(false);W(CullFaceBack);O(2884);z(NoBlending);function O(t){if(u[t]!==true){e.enable(t);u[t]=true}}function F(t){if(u[t]!==false){e.disable(t);u[t]=false}}function N(t){if(h!==t){e.useProgram(t);h=t;return true}return false}const U={[AddEquation]:32774,[SubtractEquation]:32778,[ReverseSubtractEquation]:32779};if(r){U[MinEquation]=32775;U[MaxEquation]=32776}else{const e=t.get("EXT_blend_minmax");if(e!==null){U[MinEquation]=e.MIN_EXT;U[MaxEquation]=e.MAX_EXT}}const V={[ZeroFactor]:0,[OneFactor]:1,[SrcColorFactor]:768,[SrcAlphaFactor]:770,[SrcAlphaSaturateFactor]:776,[DstColorFactor]:774,[DstAlphaFactor]:772,[OneMinusSrcColorFactor]:769,[OneMinusSrcAlphaFactor]:771,[OneMinusDstColorFactor]:775,[OneMinusDstAlphaFactor]:773};function z(t,n,r,i,a,o,s,c){if(t===NoBlending){if(f){F(3042);f=false}return}if(!f){O(3042);f=true}if(t!==CustomBlending){if(t!==d||c!==x){if(p!==AddEquation||y!==AddEquation){e.blendEquation(32774);p=AddEquation;y=AddEquation}if(c){switch(t){case NormalBlending:e.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:e.blendFunc(1,1);break;case SubtractiveBlending:e.blendFuncSeparate(0,0,769,771);break;case MultiplyBlending:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}}else{switch(t){case NormalBlending:e.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:e.blendFunc(770,1);break;case SubtractiveBlending:e.blendFunc(0,769);break;case MultiplyBlending:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}}m=null;g=null;v=null;_=null;d=t;x=c}return}a=a||n;o=o||r;s=s||i;if(n!==p||a!==y){e.blendEquationSeparate(U[n],U[a]);p=n;y=a}if(r!==m||i!==g||o!==v||s!==_){e.blendFuncSeparate(V[r],V[i],V[o],V[s]);m=r;g=i;v=o;_=s}d=t;x=null}function H(e,t){e.side===DoubleSide?F(2884):O(2884);let n=e.side===BackSide;if(t)n=!n;k(n);e.blending===NormalBlending&&e.transparent===false?z(NoBlending):z(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha);c.setFunc(e.depthFunc);c.setTest(e.depthTest);c.setMask(e.depthWrite);s.setMask(e.colorWrite);const r=e.stencilWrite;l.setTest(r);if(r){l.setMask(e.stencilWriteMask);l.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask);l.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)}q(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)}function k(t){if(b!==t){if(t){e.frontFace(2304)}else{e.frontFace(2305)}b=t}}function W(t){if(t!==CullFaceNone){O(2884);if(t!==M){if(t===CullFaceBack){e.cullFace(1029)}else if(t===CullFaceFront){e.cullFace(1028)}else{e.cullFace(1032)}}}else{F(2884)}M=t}function j(t){if(t!==w){if(A)e.lineWidth(t);w=t}}function q(t,n,r){if(t){O(32823);if(S!==n||T!==r){e.polygonOffset(n,r);S=n;T=r}}else{F(32823)}}function X(e){if(e){O(3089)}else{F(3089)}}function $(t){if(t===undefined)t=33984+E-1;if(R!==t){e.activeTexture(t);R=t}}function Y(t,n){if(R===null){$()}let r=P[R];if(r===undefined){r={type:undefined,texture:undefined};P[R]=r}if(r.type!==t||r.texture!==n){e.bindTexture(t,n||I[t]);r.type=t;r.texture=n}}function Z(){const t=P[R];if(t!==undefined&&t.type!==undefined){e.bindTexture(t.type,null);t.type=undefined;t.texture=undefined}}function J(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function Q(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function K(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ee(t){if(B.equals(t)===false){e.scissor(t.x,t.y,t.z,t.w);B.copy(t)}}function te(t){if(D.equals(t)===false){e.viewport(t.x,t.y,t.z,t.w);D.copy(t)}}function ne(){u={};R=null;P={};h=null;d=null;b=null;M=null;s.reset();c.reset();l.reset()}return{buffers:{color:s,depth:c,stencil:l},enable:O,disable:F,useProgram:N,setBlending:z,setMaterial:H,setFlipSided:k,setCullFace:W,setLineWidth:j,setPolygonOffset:q,setScissorTest:X,activeTexture:$,bindTexture:Y,unbindTexture:Z,compressedTexImage2D:J,texImage2D:Q,texImage3D:K,scissor:ee,viewport:te,reset:ne}}function WebGLTextures(e,t,n,r,i,a,o){const s=i.isWebGL2;const c=i.maxTextures;const l=i.maxCubemapSize;const u=i.maxTextureSize;const h=i.maxSamples;const f=new WeakMap;let d;let p=false;try{p=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(e){}function m(e,t){return p?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function g(e,t,n,r){let i=1;if(e.width>r||e.height>r){i=r/Math.max(e.width,e.height)}if(i<1||t===true){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){const r=t?MathUtils.floorPowerOfTwo:Math.floor;const a=r(i*e.width);const o=r(i*e.height);if(d===undefined)d=m(a,o);const s=n?m(a,o):d;s.width=a;s.height=o;const c=s.getContext("2d");c.drawImage(e,0,0,a,o);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+a+"x"+o+").");return s}else{if("data"in e){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+").")}return e}}return e}function y(e){return MathUtils.isPowerOfTwo(e.width)&&MathUtils.isPowerOfTwo(e.height)}function v(e){if(s)return false;return e.wrapS!==ClampToEdgeWrapping||e.wrapT!==ClampToEdgeWrapping||e.minFilter!==NearestFilter&&e.minFilter!==LinearFilter}function _(e,t){return e.generateMipmaps&&t&&e.minFilter!==NearestFilter&&e.minFilter!==LinearFilter}function x(t,n,i,a){e.generateMipmap(t);const o=r.get(n);o.__maxMipLevel=Math.log(Math.max(i,a))*Math.LOG2E}function b(n,r,i){if(s===false)return r;if(n!==null){if(e[n]!==undefined)return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let a=r;if(r===6403){if(i===5126)a=33326;if(i===5131)a=33325;if(i===5121)a=33321}if(r===6407){if(i===5126)a=34837;if(i===5131)a=34843;if(i===5121)a=32849}if(r===6408){if(i===5126)a=34836;if(i===5131)a=34842;if(i===5121)a=32856}if(a===33325||a===33326||a===34842||a===34836){t.get("EXT_color_buffer_float")}return a}function M(e){if(e===NearestFilter||e===NearestMipmapNearestFilter||e===NearestMipmapLinearFilter){return 9728}return 9729}function w(e){const t=e.target;t.removeEventListener("dispose",w);T(t);if(t.isVideoTexture){f.delete(t)}o.memory.textures--}function S(e){const t=e.target;t.removeEventListener("dispose",S);E(t);o.memory.textures--}function T(t){const n=r.get(t);if(n.__webglInit===undefined)return;e.deleteTexture(n.__webglTexture);r.remove(t)}function E(t){const n=r.get(t);const i=r.get(t.texture);if(!t)return;if(i.__webglTexture!==undefined){e.deleteTexture(i.__webglTexture)}if(t.depthTexture){t.depthTexture.dispose()}if(t.isWebGLCubeRenderTarget){for(let t=0;t<6;t++){e.deleteFramebuffer(n.__webglFramebuffer[t]);if(n.__webglDepthbuffer)e.deleteRenderbuffer(n.__webglDepthbuffer[t])}}else{e.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer)e.deleteRenderbuffer(n.__webglDepthbuffer);if(n.__webglMultisampledFramebuffer)e.deleteFramebuffer(n.__webglMultisampledFramebuffer);if(n.__webglColorRenderbuffer)e.deleteRenderbuffer(n.__webglColorRenderbuffer);if(n.__webglDepthRenderbuffer)e.deleteRenderbuffer(n.__webglDepthRenderbuffer)}r.remove(t.texture);r.remove(t)}let A=0;function L(){A=0}function C(){const e=A;if(e>=c){console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+c)}A+=1;return e}function R(e,t){const i=r.get(e);if(e.isVideoTexture)$(e);if(e.version>0&&i.__version!==e.version){const n=e.image;if(n===undefined){console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined")}else if(n.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{U(i,e,t);return}}n.activeTexture(33984+t);n.bindTexture(3553,i.__webglTexture)}function P(e,t){const i=r.get(e);if(e.version>0&&i.__version!==e.version){U(i,e,t);return}n.activeTexture(33984+t);n.bindTexture(35866,i.__webglTexture)}function B(e,t){const i=r.get(e);if(e.version>0&&i.__version!==e.version){U(i,e,t);return}n.activeTexture(33984+t);n.bindTexture(32879,i.__webglTexture)}function D(t,i){if(t.image.length!==6)return;const o=r.get(t);if(t.version>0&&o.__version!==t.version){N(o,t);n.activeTexture(33984+i);n.bindTexture(34067,o.__webglTexture);e.pixelStorei(37440,t.flipY);const r=t&&(t.isCompressedTexture||t.image[0].isCompressedTexture);const c=t.image[0]&&t.image[0].isDataTexture;const u=[];for(let e=0;e<6;e++){if(!r&&!c){u[e]=g(t.image[e],false,true,l)}else{u[e]=c?t.image[e].image:t.image[e]}}const h=u[0],f=y(h)||s,d=a.convert(t.format),p=a.convert(t.type),m=b(t.internalFormat,d,p);F(34067,t,f);let v;if(r){for(let e=0;e<6;e++){v=u[e].mipmaps;for(let r=0;r<v.length;r++){const i=v[r];if(t.format!==RGBAFormat&&t.format!==RGBFormat){if(d!==null){n.compressedTexImage2D(34069+e,r,m,i.width,i.height,0,i.data)}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{n.texImage2D(34069+e,r,m,i.width,i.height,0,d,p,i.data)}}}o.__maxMipLevel=v.length-1}else{v=t.mipmaps;for(let e=0;e<6;e++){if(c){n.texImage2D(34069+e,0,m,u[e].width,u[e].height,0,d,p,u[e].data);for(let t=0;t<v.length;t++){const r=v[t];const i=r.image[e].image;n.texImage2D(34069+e,t+1,m,i.width,i.height,0,d,p,i.data)}}else{n.texImage2D(34069+e,0,m,d,p,u[e]);for(let t=0;t<v.length;t++){const r=v[t];n.texImage2D(34069+e,t+1,m,d,p,r.image[e])}}}o.__maxMipLevel=v.length}if(_(t,f)){x(34067,t,h.width,h.height)}o.__version=t.version;if(t.onUpdate)t.onUpdate(t)}else{n.activeTexture(33984+i);n.bindTexture(34067,o.__webglTexture)}}function G(e,t){n.activeTexture(33984+t);n.bindTexture(34067,r.get(e).__webglTexture)}const I={[RepeatWrapping]:10497,[ClampToEdgeWrapping]:33071,[MirroredRepeatWrapping]:33648};const O={[NearestFilter]:9728,[NearestMipmapNearestFilter]:9984,[NearestMipmapLinearFilter]:9986,[LinearFilter]:9729,[LinearMipmapNearestFilter]:9985,[LinearMipmapLinearFilter]:9987};function F(n,a,o){if(o){e.texParameteri(n,10242,I[a.wrapS]);e.texParameteri(n,10243,I[a.wrapT]);if(n===32879||n===35866){e.texParameteri(n,32882,I[a.wrapR])}e.texParameteri(n,10240,O[a.magFilter]);e.texParameteri(n,10241,O[a.minFilter])}else{e.texParameteri(n,10242,33071);e.texParameteri(n,10243,33071);if(n===32879||n===35866){e.texParameteri(n,32882,33071)}if(a.wrapS!==ClampToEdgeWrapping||a.wrapT!==ClampToEdgeWrapping){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.")}e.texParameteri(n,10240,M(a.magFilter));e.texParameteri(n,10241,M(a.minFilter));if(a.minFilter!==NearestFilter&&a.minFilter!==LinearFilter){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")}}const c=t.get("EXT_texture_filter_anisotropic");if(c){if(a.type===FloatType&&t.get("OES_texture_float_linear")===null)return;if(a.type===HalfFloatType&&(s||t.get("OES_texture_half_float_linear"))===null)return;if(a.anisotropy>1||r.get(a).__currentAnisotropy){e.texParameterf(n,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy()));r.get(a).__currentAnisotropy=a.anisotropy}}}function N(t,n){if(t.__webglInit===undefined){t.__webglInit=true;n.addEventListener("dispose",w);t.__webglTexture=e.createTexture();o.memory.textures++}}function U(t,r,i){let o=3553;if(r.isDataTexture2DArray)o=35866;if(r.isDataTexture3D)o=32879;N(t,r);n.activeTexture(33984+i);n.bindTexture(o,t.__webglTexture);e.pixelStorei(37440,r.flipY);e.pixelStorei(37441,r.premultiplyAlpha);e.pixelStorei(3317,r.unpackAlignment);const c=v(r)&&y(r.image)===false;const l=g(r.image,c,false,u);const h=y(l)||s,f=a.convert(r.format);let d=a.convert(r.type),p=b(r.internalFormat,f,d);F(o,r,h);let m;const M=r.mipmaps;if(r.isDepthTexture){p=6402;if(s){if(r.type===FloatType){p=36012}else if(r.type===UnsignedIntType){p=33190}else if(r.type===UnsignedInt248Type){p=35056}else{p=33189}}else{if(r.type===FloatType){console.error("WebGLRenderer: Floating point depth texture requires WebGL2.")}}if(r.format===DepthFormat&&p===6402){if(r.type!==UnsignedShortType&&r.type!==UnsignedIntType){console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");r.type=UnsignedShortType;d=a.convert(r.type)}}if(r.format===DepthStencilFormat&&p===6402){p=34041;if(r.type!==UnsignedInt248Type){console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");r.type=UnsignedInt248Type;d=a.convert(r.type)}}n.texImage2D(3553,0,p,l.width,l.height,0,f,d,null)}else if(r.isDataTexture){if(M.length>0&&h){for(let e=0,t=M.length;e<t;e++){m=M[e];n.texImage2D(3553,e,p,m.width,m.height,0,f,d,m.data)}r.generateMipmaps=false;t.__maxMipLevel=M.length-1}else{n.texImage2D(3553,0,p,l.width,l.height,0,f,d,l.data);t.__maxMipLevel=0}}else if(r.isCompressedTexture){for(let e=0,t=M.length;e<t;e++){m=M[e];if(r.format!==RGBAFormat&&r.format!==RGBFormat){if(f!==null){n.compressedTexImage2D(3553,e,p,m.width,m.height,0,m.data)}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{n.texImage2D(3553,e,p,m.width,m.height,0,f,d,m.data)}}t.__maxMipLevel=M.length-1}else if(r.isDataTexture2DArray){n.texImage3D(35866,0,p,l.width,l.height,l.depth,0,f,d,l.data);t.__maxMipLevel=0}else if(r.isDataTexture3D){n.texImage3D(32879,0,p,l.width,l.height,l.depth,0,f,d,l.data);t.__maxMipLevel=0}else{if(M.length>0&&h){for(let e=0,t=M.length;e<t;e++){m=M[e];n.texImage2D(3553,e,p,f,d,m)}r.generateMipmaps=false;t.__maxMipLevel=M.length-1}else{n.texImage2D(3553,0,p,f,d,l);t.__maxMipLevel=0}}if(_(r,h)){x(o,r,l.width,l.height)}t.__version=r.version;if(r.onUpdate)r.onUpdate(r)}function V(t,i,o,s){const c=a.convert(i.texture.format);const l=a.convert(i.texture.type);const u=b(i.texture.internalFormat,c,l);n.texImage2D(s,0,u,i.width,i.height,0,c,l,null);e.bindFramebuffer(36160,t);e.framebufferTexture2D(36160,o,s,r.get(i.texture).__webglTexture,0);e.bindFramebuffer(36160,null)}function z(t,n,r){e.bindRenderbuffer(36161,t);if(n.depthBuffer&&!n.stencilBuffer){let i=33189;if(r){const t=n.depthTexture;if(t&&t.isDepthTexture){if(t.type===FloatType){i=36012}else if(t.type===UnsignedIntType){i=33190}}const r=X(n);e.renderbufferStorageMultisample(36161,r,i,n.width,n.height)}else{e.renderbufferStorage(36161,i,n.width,n.height)}e.framebufferRenderbuffer(36160,36096,36161,t)}else if(n.depthBuffer&&n.stencilBuffer){if(r){const t=X(n);e.renderbufferStorageMultisample(36161,t,35056,n.width,n.height)}else{e.renderbufferStorage(36161,34041,n.width,n.height)}e.framebufferRenderbuffer(36160,33306,36161,t)}else{const t=a.convert(n.texture.format);const i=a.convert(n.texture.type);const o=b(n.texture.internalFormat,t,i);if(r){const t=X(n);e.renderbufferStorageMultisample(36161,t,o,n.width,n.height)}else{e.renderbufferStorage(36161,o,n.width,n.height)}}e.bindRenderbuffer(36161,null)}function H(t,n){const i=n&&n.isWebGLCubeRenderTarget;if(i)throw new Error("Depth Texture with cube render targets is not supported");e.bindFramebuffer(36160,t);if(!(n.depthTexture&&n.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}if(!r.get(n.depthTexture).__webglTexture||n.depthTexture.image.width!==n.width||n.depthTexture.image.height!==n.height){n.depthTexture.image.width=n.width;n.depthTexture.image.height=n.height;n.depthTexture.needsUpdate=true}R(n.depthTexture,0);const a=r.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===DepthFormat){e.framebufferTexture2D(36160,36096,3553,a,0)}else if(n.depthTexture.format===DepthStencilFormat){e.framebufferTexture2D(36160,33306,3553,a,0)}else{throw new Error("Unknown depthTexture format")}}function k(t){const n=r.get(t);const i=t.isWebGLCubeRenderTarget===true;if(t.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");H(n.__webglFramebuffer,t)}else{if(i){n.__webglDepthbuffer=[];for(let r=0;r<6;r++){e.bindFramebuffer(36160,n.__webglFramebuffer[r]);n.__webglDepthbuffer[r]=e.createRenderbuffer();z(n.__webglDepthbuffer[r],t,false)}}else{e.bindFramebuffer(36160,n.__webglFramebuffer);n.__webglDepthbuffer=e.createRenderbuffer();z(n.__webglDepthbuffer,t,false)}}e.bindFramebuffer(36160,null)}function W(t){const i=r.get(t);const c=r.get(t.texture);t.addEventListener("dispose",S);c.__webglTexture=e.createTexture();o.memory.textures++;const l=t.isWebGLCubeRenderTarget===true;const u=t.isWebGLMultisampleRenderTarget===true;const h=y(t)||s;if(s&&t.texture.format===RGBFormat&&(t.texture.type===FloatType||t.texture.type===HalfFloatType)){t.texture.format=RGBAFormat;console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")}if(l){i.__webglFramebuffer=[];for(let t=0;t<6;t++){i.__webglFramebuffer[t]=e.createFramebuffer()}}else{i.__webglFramebuffer=e.createFramebuffer();if(u){if(s){i.__webglMultisampledFramebuffer=e.createFramebuffer();i.__webglColorRenderbuffer=e.createRenderbuffer();e.bindRenderbuffer(36161,i.__webglColorRenderbuffer);const n=a.convert(t.texture.format);const r=a.convert(t.texture.type);const o=b(t.texture.internalFormat,n,r);const s=X(t);e.renderbufferStorageMultisample(36161,s,o,t.width,t.height);e.bindFramebuffer(36160,i.__webglMultisampledFramebuffer);e.framebufferRenderbuffer(36160,36064,36161,i.__webglColorRenderbuffer);e.bindRenderbuffer(36161,null);if(t.depthBuffer){i.__webglDepthRenderbuffer=e.createRenderbuffer();z(i.__webglDepthRenderbuffer,t,true)}e.bindFramebuffer(36160,null)}else{console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}}}if(l){n.bindTexture(34067,c.__webglTexture);F(34067,t.texture,h);for(let e=0;e<6;e++){V(i.__webglFramebuffer[e],t,36064,34069+e)}if(_(t.texture,h)){x(34067,t.texture,t.width,t.height)}n.bindTexture(34067,null)}else{n.bindTexture(3553,c.__webglTexture);F(3553,t.texture,h);V(i.__webglFramebuffer,t,36064,3553);if(_(t.texture,h)){x(3553,t.texture,t.width,t.height)}n.bindTexture(3553,null)}if(t.depthBuffer){k(t)}}function j(e){const t=e.texture;const i=y(e)||s;if(_(t,i)){const i=e.isWebGLCubeRenderTarget?34067:3553;const a=r.get(t).__webglTexture;n.bindTexture(i,a);x(i,t,e.width,e.height);n.bindTexture(i,null)}}function q(t){if(t.isWebGLMultisampleRenderTarget){if(s){const n=r.get(t);e.bindFramebuffer(36008,n.__webglMultisampledFramebuffer);e.bindFramebuffer(36009,n.__webglFramebuffer);const i=t.width;const a=t.height;let o=16384;if(t.depthBuffer)o|=256;if(t.stencilBuffer)o|=1024;e.blitFramebuffer(0,0,i,a,0,0,i,a,o,9728);e.bindFramebuffer(36160,n.__webglMultisampledFramebuffer)}else{console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}}}function X(e){return s&&e.isWebGLMultisampleRenderTarget?Math.min(h,e.samples):0}function $(e){const t=o.render.frame;if(f.get(e)!==t){f.set(e,t);e.update()}}let Y=false;let Z=false;function J(e,t){if(e&&e.isWebGLRenderTarget){if(Y===false){console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");Y=true}e=e.texture}R(e,t)}function Q(e,t){if(e&&e.isWebGLCubeRenderTarget){if(Z===false){console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");Z=true}e=e.texture}if(e&&e.isCubeTexture||Array.isArray(e.image)&&e.image.length===6){D(e,t)}else{G(e,t)}}this.allocateTextureUnit=C;this.resetTextureUnits=L;this.setTexture2D=R;this.setTexture2DArray=P;this.setTexture3D=B;this.setTextureCube=D;this.setTextureCubeDynamic=G;this.setupRenderTarget=W;this.updateRenderTargetMipmap=j;this.updateMultisampleRenderTarget=q;this.safeSetTexture2D=J;this.safeSetTextureCube=Q}function WebGLUtils(e,t,n){const r=n.isWebGL2;function i(e){let n;if(e===UnsignedByteType)return 5121;if(e===UnsignedShort4444Type)return 32819;if(e===UnsignedShort5551Type)return 32820;if(e===UnsignedShort565Type)return 33635;if(e===ByteType)return 5120;if(e===ShortType)return 5122;if(e===UnsignedShortType)return 5123;if(e===IntType)return 5124;if(e===UnsignedIntType)return 5125;if(e===FloatType)return 5126;if(e===HalfFloatType){if(r)return 5131;n=t.get("OES_texture_half_float");if(n!==null){return n.HALF_FLOAT_OES}else{return null}}if(e===AlphaFormat)return 6406;if(e===RGBFormat)return 6407;if(e===RGBAFormat)return 6408;if(e===LuminanceFormat)return 6409;if(e===LuminanceAlphaFormat)return 6410;if(e===DepthFormat)return 6402;if(e===DepthStencilFormat)return 34041;if(e===RedFormat)return 6403;if(e===RedIntegerFormat)return 36244;if(e===RGFormat)return 33319;if(e===RGIntegerFormat)return 33320;if(e===RGBIntegerFormat)return 36248;if(e===RGBAIntegerFormat)return 36249;if(e===RGB_S3TC_DXT1_Format||e===RGBA_S3TC_DXT1_Format||e===RGBA_S3TC_DXT3_Format||e===RGBA_S3TC_DXT5_Format){n=t.get("WEBGL_compressed_texture_s3tc");if(n!==null){if(e===RGB_S3TC_DXT1_Format)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT1_Format)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===RGBA_S3TC_DXT3_Format)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===RGBA_S3TC_DXT5_Format)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}if(e===RGB_PVRTC_4BPPV1_Format||e===RGB_PVRTC_2BPPV1_Format||e===RGBA_PVRTC_4BPPV1_Format||e===RGBA_PVRTC_2BPPV1_Format){n=t.get("WEBGL_compressed_texture_pvrtc");if(n!==null){if(e===RGB_PVRTC_4BPPV1_Format)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===RGB_PVRTC_2BPPV1_Format)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===RGBA_PVRTC_4BPPV1_Format)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===RGBA_PVRTC_2BPPV1_Format)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(e===RGB_ETC1_Format){n=t.get("WEBGL_compressed_texture_etc1");if(n!==null){return n.COMPRESSED_RGB_ETC1_WEBGL}else{return null}}if(e===RGB_ETC2_Format||e===RGBA_ETC2_EAC_Format){n=t.get("WEBGL_compressed_texture_etc");if(n!==null){if(e===RGB_ETC2_Format)return n.COMPRESSED_RGB8_ETC2;if(e===RGBA_ETC2_EAC_Format)return n.COMPRESSED_RGBA8_ETC2_EAC}}if(e===RGBA_ASTC_4x4_Format||e===RGBA_ASTC_5x4_Format||e===RGBA_ASTC_5x5_Format||e===RGBA_ASTC_6x5_Format||e===RGBA_ASTC_6x6_Format||e===RGBA_ASTC_8x5_Format||e===RGBA_ASTC_8x6_Format||e===RGBA_ASTC_8x8_Format||e===RGBA_ASTC_10x5_Format||e===RGBA_ASTC_10x6_Format||e===RGBA_ASTC_10x8_Format||e===RGBA_ASTC_10x10_Format||e===RGBA_ASTC_12x10_Format||e===RGBA_ASTC_12x12_Format||e===SRGB8_ALPHA8_ASTC_4x4_Format||e===SRGB8_ALPHA8_ASTC_5x4_Format||e===SRGB8_ALPHA8_ASTC_5x5_Format||e===SRGB8_ALPHA8_ASTC_6x5_Format||e===SRGB8_ALPHA8_ASTC_6x6_Format||e===SRGB8_ALPHA8_ASTC_8x5_Format||e===SRGB8_ALPHA8_ASTC_8x6_Format||e===SRGB8_ALPHA8_ASTC_8x8_Format||e===SRGB8_ALPHA8_ASTC_10x5_Format||e===SRGB8_ALPHA8_ASTC_10x6_Format||e===SRGB8_ALPHA8_ASTC_10x8_Format||e===SRGB8_ALPHA8_ASTC_10x10_Format||e===SRGB8_ALPHA8_ASTC_12x10_Format||e===SRGB8_ALPHA8_ASTC_12x12_Format){n=t.get("WEBGL_compressed_texture_astc");if(n!==null){return e}else{return null}}if(e===RGBA_BPTC_Format){n=t.get("EXT_texture_compression_bptc");if(n!==null){return e}else{return null}}if(e===UnsignedInt248Type){if(r)return 34042;n=t.get("WEBGL_depth_texture");if(n!==null){return n.UNSIGNED_INT_24_8_WEBGL}else{return null}}}return{convert:i}}function ArrayCamera(e){PerspectiveCamera.call(this);this.cameras=e||[]}ArrayCamera.prototype=Object.assign(Object.create(PerspectiveCamera.prototype),{constructor:ArrayCamera,isArrayCamera:true});function Group(){Object3D.call(this);this.type="Group"}Group.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Group,isGroup:true});function WebXRController(){this._targetRay=null;this._grip=null;this._hand=null}Object.assign(WebXRController.prototype,{constructor:WebXRController,getHandSpace:function(){if(this._hand===null){this._hand=new Group;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints=[];this._hand.inputState={pinching:false};if(window.XRHand){for(let e=0;e<=window.XRHand.LITTLE_PHALANX_TIP;e++){const e=new Group;e.matrixAutoUpdate=false;e.visible=false;this._hand.joints.push(e);this._hand.add(e)}}}return this._hand},getTargetRaySpace:function(){if(this._targetRay===null){this._targetRay=new Group;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false}return this._targetRay},getGripSpace:function(){if(this._grip===null){this._grip=new Group;this._grip.matrixAutoUpdate=false;this._grip.visible=false}return this._grip},dispatchEvent:function(e){if(this._targetRay!==null){this._targetRay.dispatchEvent(e)}if(this._grip!==null){this._grip.dispatchEvent(e)}if(this._hand!==null){this._hand.dispatchEvent(e)}return this},disconnect:function(e){this.dispatchEvent({type:"disconnected",data:e});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this},update:function(e,t,n){let r=null;let i=null;let a=null;const o=this._targetRay;const s=this._grip;const c=this._hand;if(e){if(c&&e.hand){a=true;for(let r=0;r<=window.XRHand.LITTLE_PHALANX_TIP;r++){if(e.hand[r]){const i=t.getJointPose(e.hand[r],n);const a=c.joints[r];if(i!==null){a.matrix.fromArray(i.transform.matrix);a.matrix.decompose(a.position,a.rotation,a.scale);a.jointRadius=i.radius}a.visible=i!==null;const o=c.joints[window.XRHand.INDEX_PHALANX_TIP];const s=c.joints[window.XRHand.THUMB_PHALANX_TIP];const l=o.position.distanceTo(s.position);const u=.02;const h=.005;if(c.inputState.pinching&&l>u+h){c.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})}else if(!c.inputState.pinching&&l<=u-h){c.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this})}}}}else{if(o!==null){r=t.getPose(e.targetRaySpace,n);if(r!==null){o.matrix.fromArray(r.transform.matrix);o.matrix.decompose(o.position,o.rotation,o.scale)}}if(s!==null&&e.gripSpace){i=t.getPose(e.gripSpace,n);if(i!==null){s.matrix.fromArray(i.transform.matrix);s.matrix.decompose(s.position,s.rotation,s.scale)}}}}if(o!==null){o.visible=r!==null}if(s!==null){s.visible=i!==null}if(c!==null){c.visible=a!==null}return this}});function WebXRManager(e,t){const n=this;let r=null;let i=1;let a=null;let o="local-floor";let s=null;const c=[];const l=new Map;const u=new PerspectiveCamera;u.layers.enable(1);u.viewport=new Vector4;const h=new PerspectiveCamera;h.layers.enable(2);h.viewport=new Vector4;const f=[u,h];const d=new ArrayCamera;d.layers.enable(1);d.layers.enable(2);let p=null;let m=null;this.enabled=false;this.isPresenting=false;this.getController=function(e){let t=c[e];if(t===undefined){t=new WebXRController;c[e]=t}return t.getTargetRaySpace()};this.getControllerGrip=function(e){let t=c[e];if(t===undefined){t=new WebXRController;c[e]=t}return t.getGripSpace()};this.getHand=function(e){let t=c[e];if(t===undefined){t=new WebXRController;c[e]=t}return t.getHandSpace()};function g(e){const t=l.get(e.inputSource);if(t){t.dispatchEvent({type:e.type})}}function y(){l.forEach((function(e,t){e.disconnect(t)}));l.clear();e.setFramebuffer(null);e.setRenderTarget(e.getRenderTarget());E.stop();n.isPresenting=false;n.dispatchEvent({type:"sessionend"})}function v(e){a=e;E.setContext(r);E.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}this.setFramebufferScaleFactor=function(e){i=e;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(e){o=e;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return a};this.getSession=function(){return r};this.setSession=function(e){r=e;if(r!==null){r.addEventListener("select",g);r.addEventListener("selectstart",g);r.addEventListener("selectend",g);r.addEventListener("squeeze",g);r.addEventListener("squeezestart",g);r.addEventListener("squeezeend",g);r.addEventListener("end",y);const e=t.getContextAttributes();if(e.xrCompatible!==true){t.makeXRCompatible()}const n={antialias:e.antialias,alpha:e.alpha,depth:e.depth,stencil:e.stencil,framebufferScaleFactor:i};const a=new XRWebGLLayer(r,t,n);r.updateRenderState({baseLayer:a});r.requestReferenceSpace(o).then(v);r.addEventListener("inputsourceschange",_)}};function _(e){const t=r.inputSources;for(let e=0;e<c.length;e++){l.set(t[e],c[e])}for(let t=0;t<e.removed.length;t++){const n=e.removed[t];const r=l.get(n);if(r){r.dispatchEvent({type:"disconnected",data:n});l.delete(n)}}for(let t=0;t<e.added.length;t++){const n=e.added[t];const r=l.get(n);if(r){r.dispatchEvent({type:"connected",data:n})}}}const x=new Vector3;const b=new Vector3;function M(e,t,n){x.setFromMatrixPosition(t.matrixWorld);b.setFromMatrixPosition(n.matrixWorld);const r=x.distanceTo(b);const i=t.projectionMatrix.elements;const a=n.projectionMatrix.elements;const o=i[14]/(i[10]-1);const s=i[14]/(i[10]+1);const c=(i[9]+1)/i[5];const l=(i[9]-1)/i[5];const u=(i[8]-1)/i[0];const h=(a[8]+1)/a[0];const f=o*u;const d=o*h;const p=r/(-u+h);const m=p*-u;t.matrixWorld.decompose(e.position,e.quaternion,e.scale);e.translateX(m);e.translateZ(p);e.matrixWorld.compose(e.position,e.quaternion,e.scale);e.matrixWorldInverse.getInverse(e.matrixWorld);const g=o+p;const y=s+p;const v=f-m;const _=d+(r-m);const M=c*s/y*g;const w=l*s/y*g;e.projectionMatrix.makePerspective(v,_,M,w,g,y)}function w(e,t){if(t===null){e.matrixWorld.copy(e.matrix)}else{e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix)}e.matrixWorldInverse.getInverse(e.matrixWorld)}this.getCamera=function(e){d.near=h.near=u.near=e.near;d.far=h.far=u.far=e.far;if(p!==d.near||m!==d.far){r.updateRenderState({depthNear:d.near,depthFar:d.far});p=d.near;m=d.far}const t=e.parent;const n=d.cameras;w(d,t);for(let e=0;e<n.length;e++){w(n[e],t)}e.matrixWorld.copy(d.matrixWorld);const i=e.children;for(let e=0,t=i.length;e<t;e++){i[e].updateMatrixWorld(true)}if(n.length===2){M(d,u,h)}else{d.projectionMatrix.copy(u.projectionMatrix)}return d};let S=null;function T(t,n){s=n.getViewerPose(a);if(s!==null){const t=s.views;const n=r.renderState.baseLayer;e.setFramebuffer(n.framebuffer);let i=false;if(t.length!==d.cameras.length){d.cameras.length=0;i=true}for(let e=0;e<t.length;e++){const r=t[e];const a=n.getViewport(r);const o=f[e];o.matrix.fromArray(r.transform.matrix);o.projectionMatrix.fromArray(r.projectionMatrix);o.viewport.set(a.x,a.y,a.width,a.height);if(e===0){d.matrix.copy(o.matrix)}if(i===true){d.cameras.push(o)}}}const i=r.inputSources;for(let e=0;e<c.length;e++){const t=c[e];const r=i[e];t.update(r,n,a)}if(S)S(t,n)}const E=new WebGLAnimation;E.setAnimationLoop(T);this.setAnimationLoop=function(e){S=e};this.dispose=function(){}}Object.assign(WebXRManager.prototype,EventDispatcher.prototype);function WebGLMaterials(e){function t(e,t){e.fogColor.value.copy(t.color);if(t.isFog){e.fogNear.value=t.near;e.fogFar.value=t.far}else if(t.isFogExp2){e.fogDensity.value=t.density}}function n(e,t,n,y){if(t.isMeshBasicMaterial){r(e,t)}else if(t.isMeshLambertMaterial){r(e,t);c(e,t)}else if(t.isMeshToonMaterial){r(e,t);u(e,t)}else if(t.isMeshPhongMaterial){r(e,t);l(e,t)}else if(t.isMeshStandardMaterial){r(e,t);if(t.isMeshPhysicalMaterial){f(e,t)}else{h(e,t)}}else if(t.isMeshMatcapMaterial){r(e,t);d(e,t)}else if(t.isMeshDepthMaterial){r(e,t);p(e,t)}else if(t.isMeshDistanceMaterial){r(e,t);m(e,t)}else if(t.isMeshNormalMaterial){r(e,t);g(e,t)}else if(t.isLineBasicMaterial){i(e,t);if(t.isLineDashedMaterial){a(e,t)}}else if(t.isPointsMaterial){o(e,t,n,y)}else if(t.isSpriteMaterial){s(e,t)}else if(t.isShadowMaterial){e.color.value.copy(t.color);e.opacity.value=t.opacity}else if(t.isShaderMaterial){t.uniformsNeedUpdate=false}}function r(t,n){t.opacity.value=n.opacity;if(n.color){t.diffuse.value.copy(n.color)}if(n.emissive){t.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity)}if(n.map){t.map.value=n.map}if(n.alphaMap){t.alphaMap.value=n.alphaMap}if(n.specularMap){t.specularMap.value=n.specularMap}const r=e.get(n).envMap;if(r){t.envMap.value=r;t.flipEnvMap.value=r.isCubeTexture?-1:1;t.reflectivity.value=n.reflectivity;t.refractionRatio.value=n.refractionRatio;const i=e.get(r).__maxMipLevel;if(i!==undefined){t.maxMipLevel.value=i}}if(n.lightMap){t.lightMap.value=n.lightMap;t.lightMapIntensity.value=n.lightMapIntensity}if(n.aoMap){t.aoMap.value=n.aoMap;t.aoMapIntensity.value=n.aoMapIntensity}let i;if(n.map){i=n.map}else if(n.specularMap){i=n.specularMap}else if(n.displacementMap){i=n.displacementMap}else if(n.normalMap){i=n.normalMap}else if(n.bumpMap){i=n.bumpMap}else if(n.roughnessMap){i=n.roughnessMap}else if(n.metalnessMap){i=n.metalnessMap}else if(n.alphaMap){i=n.alphaMap}else if(n.emissiveMap){i=n.emissiveMap}else if(n.clearcoatMap){i=n.clearcoatMap}else if(n.clearcoatNormalMap){i=n.clearcoatNormalMap}else if(n.clearcoatRoughnessMap){i=n.clearcoatRoughnessMap}if(i!==undefined){if(i.isWebGLRenderTarget){i=i.texture}if(i.matrixAutoUpdate===true){i.updateMatrix()}t.uvTransform.value.copy(i.matrix)}let a;if(n.aoMap){a=n.aoMap}else if(n.lightMap){a=n.lightMap}if(a!==undefined){if(a.isWebGLRenderTarget){a=a.texture}if(a.matrixAutoUpdate===true){a.updateMatrix()}t.uv2Transform.value.copy(a.matrix)}}function i(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity}function a(e,t){e.dashSize.value=t.dashSize;e.totalSize.value=t.dashSize+t.gapSize;e.scale.value=t.scale}function o(e,t,n,r){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.size.value=t.size*n;e.scale.value=r*.5;if(t.map){e.map.value=t.map}if(t.alphaMap){e.alphaMap.value=t.alphaMap}let i;if(t.map){i=t.map}else if(t.alphaMap){i=t.alphaMap}if(i!==undefined){if(i.matrixAutoUpdate===true){i.updateMatrix()}e.uvTransform.value.copy(i.matrix)}}function s(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.rotation.value=t.rotation;if(t.map){e.map.value=t.map}if(t.alphaMap){e.alphaMap.value=t.alphaMap}let n;if(t.map){n=t.map}else if(t.alphaMap){n=t.alphaMap}if(n!==undefined){if(n.matrixAutoUpdate===true){n.updateMatrix()}e.uvTransform.value.copy(n.matrix)}}function c(e,t){if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap}}function l(e,t){e.specular.value.copy(t.specular);e.shininess.value=Math.max(t.shininess,1e-4);if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap}if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function u(e,t){if(t.gradientMap){e.gradientMap.value=t.gradientMap}if(t.emissiveMap){e.emissiveMap.value=t.emissiveMap}if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function h(t,n){t.roughness.value=n.roughness;t.metalness.value=n.metalness;if(n.roughnessMap){t.roughnessMap.value=n.roughnessMap}if(n.metalnessMap){t.metalnessMap.value=n.metalnessMap}if(n.emissiveMap){t.emissiveMap.value=n.emissiveMap}if(n.bumpMap){t.bumpMap.value=n.bumpMap;t.bumpScale.value=n.bumpScale;if(n.side===BackSide)t.bumpScale.value*=-1}if(n.normalMap){t.normalMap.value=n.normalMap;t.normalScale.value.copy(n.normalScale);if(n.side===BackSide)t.normalScale.value.negate()}if(n.displacementMap){t.displacementMap.value=n.displacementMap;t.displacementScale.value=n.displacementScale;t.displacementBias.value=n.displacementBias}const r=e.get(n).envMap;if(r){t.envMapIntensity.value=n.envMapIntensity}}function f(e,t){h(e,t);e.reflectivity.value=t.reflectivity;e.clearcoat.value=t.clearcoat;e.clearcoatRoughness.value=t.clearcoatRoughness;if(t.sheen)e.sheen.value.copy(t.sheen);if(t.clearcoatMap){e.clearcoatMap.value=t.clearcoatMap}if(t.clearcoatRoughnessMap){e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap}if(t.clearcoatNormalMap){e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale);e.clearcoatNormalMap.value=t.clearcoatNormalMap;if(t.side===BackSide){e.clearcoatNormalScale.value.negate()}}e.transmission.value=t.transmission;if(t.transmissionMap){e.transmissionMap.value=t.transmissionMap}}function d(e,t){if(t.matcap){e.matcap.value=t.matcap}if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function p(e,t){if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}function m(e,t){if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}e.referencePosition.value.copy(t.referencePosition);e.nearDistance.value=t.nearDistance;e.farDistance.value=t.farDistance}function g(e,t){if(t.bumpMap){e.bumpMap.value=t.bumpMap;e.bumpScale.value=t.bumpScale;if(t.side===BackSide)e.bumpScale.value*=-1}if(t.normalMap){e.normalMap.value=t.normalMap;e.normalScale.value.copy(t.normalScale);if(t.side===BackSide)e.normalScale.value.negate()}if(t.displacementMap){e.displacementMap.value=t.displacementMap;e.displacementScale.value=t.displacementScale;e.displacementBias.value=t.displacementBias}}return{refreshFogUniforms:t,refreshMaterialUniforms:n}}function WebGLRenderer(e){e=e||{};const t=e.canvas!==undefined?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=e.context!==undefined?e.context:null,r=e.alpha!==undefined?e.alpha:false,i=e.depth!==undefined?e.depth:true,a=e.stencil!==undefined?e.stencil:true,o=e.antialias!==undefined?e.antialias:false,s=e.premultipliedAlpha!==undefined?e.premultipliedAlpha:true,c=e.preserveDrawingBuffer!==undefined?e.preserveDrawingBuffer:false,l=e.powerPreference!==undefined?e.powerPreference:"default",u=e.failIfMajorPerformanceCaveat!==undefined?e.failIfMajorPerformanceCaveat:false;let h=null;let f=null;this.domElement=t;this.debug={checkShaderErrors:true};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this.gammaFactor=2;this.outputEncoding=LinearEncoding;this.physicallyCorrectLights=false;this.toneMapping=NoToneMapping;this.toneMappingExposure=1;this.maxMorphTargets=8;this.maxMorphNormals=4;const d=this;let p=false;let m=null;let g=0;let y=0;let v=null;let _=null;let x=-1;let b=null;let M=null;const w=new Vector4;const S=new Vector4;let T=null;let E=t.width;let A=t.height;let L=1;let C=null;let R=null;const P=new Vector4(0,0,E,A);const B=new Vector4(0,0,E,A);let D=false;const G=new Frustum;let I=false;let O=false;const F=new Matrix4;const N=new Vector3;const U={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function V(){return v===null?L:1}let z=n;function H(e,n){for(let r=0;r<e.length;r++){const i=e[r];const a=t.getContext(i,n);if(a!==null)return a}return null}try{const e={alpha:r,depth:i,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:c,powerPreference:l,failIfMajorPerformanceCaveat:u};t.addEventListener("webglcontextlost",de,false);t.addEventListener("webglcontextrestored",pe,false);if(z===null){const t=["webgl2","webgl","experimental-webgl"];if(d.isWebGL1Renderer===true){t.shift()}z=H(t,e);if(z===null){if(H(t)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}if(z.getShaderPrecisionFormat===undefined){z.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}}}catch(e){console.error("THREE.WebGLRenderer: "+e.message);throw e}let k,W,j,q;let X,$,Y,Z,J,Q;let K,ee,te,ne,re;let ie,ae,oe,se;let ce,le;function ue(){k=new WebGLExtensions(z);W=new WebGLCapabilities(z,k,e);if(W.isWebGL2===false){k.get("WEBGL_depth_texture");k.get("OES_texture_float");k.get("OES_texture_half_float");k.get("OES_texture_half_float_linear");k.get("OES_standard_derivatives");k.get("OES_element_index_uint");k.get("OES_vertex_array_object");k.get("ANGLE_instanced_arrays")}k.get("OES_texture_float_linear");ce=new WebGLUtils(z,k,W);j=new WebGLState(z,k,W);j.scissor(S.copy(B).multiplyScalar(L).floor());j.viewport(w.copy(P).multiplyScalar(L).floor());q=new WebGLInfo(z);X=new WebGLProperties;$=new WebGLTextures(z,k,j,X,W,ce,q);Y=new WebGLCubeMaps(d);Z=new WebGLAttributes(z,W);le=new WebGLBindingStates(z,k,Z,W);J=new WebGLGeometries(z,Z,q,le);Q=new WebGLObjects(z,J,Z,q);ae=new WebGLMorphtargets(z);re=new WebGLClipping(X);K=new WebGLPrograms(d,Y,k,W,le,re);ee=new WebGLMaterials(X);te=new WebGLRenderLists(X);ne=new WebGLRenderStates;ie=new WebGLBackground(d,Y,j,Q,s);oe=new WebGLBufferRenderer(z,k,q,W);se=new WebGLIndexedBufferRenderer(z,k,q,W);q.programs=K.programs;d.capabilities=W;d.extensions=k;d.properties=X;d.renderLists=te;d.state=j;d.info=q}ue();const he=new WebXRManager(d,z);this.xr=he;const fe=new WebGLShadowMap(d,Q,W.maxTextureSize);this.shadowMap=fe;this.getContext=function(){return z};this.getContextAttributes=function(){return z.getContextAttributes()};this.forceContextLoss=function(){const e=k.get("WEBGL_lose_context");if(e)e.loseContext()};this.forceContextRestore=function(){const e=k.get("WEBGL_lose_context");if(e)e.restoreContext()};this.getPixelRatio=function(){return L};this.setPixelRatio=function(e){if(e===undefined)return;L=e;this.setSize(E,A,false)};this.getSize=function(e){if(e===undefined){console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument");e=new Vector2}return e.set(E,A)};this.setSize=function(e,n,r){if(he.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}E=e;A=n;t.width=Math.floor(e*L);t.height=Math.floor(n*L);if(r!==false){t.style.width=e+"px";t.style.height=n+"px"}this.setViewport(0,0,e,n)};this.getDrawingBufferSize=function(e){if(e===undefined){console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument");e=new Vector2}return e.set(E*L,A*L).floor()};this.setDrawingBufferSize=function(e,n,r){E=e;A=n;L=r;t.width=Math.floor(e*r);t.height=Math.floor(n*r);this.setViewport(0,0,e,n)};this.getCurrentViewport=function(e){if(e===undefined){console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument");e=new Vector4}return e.copy(w)};this.getViewport=function(e){return e.copy(P)};this.setViewport=function(e,t,n,r){if(e.isVector4){P.set(e.x,e.y,e.z,e.w)}else{P.set(e,t,n,r)}j.viewport(w.copy(P).multiplyScalar(L).floor())};this.getScissor=function(e){return e.copy(B)};this.setScissor=function(e,t,n,r){if(e.isVector4){B.set(e.x,e.y,e.z,e.w)}else{B.set(e,t,n,r)}j.scissor(S.copy(B).multiplyScalar(L).floor())};this.getScissorTest=function(){return D};this.setScissorTest=function(e){j.setScissorTest(D=e)};this.setOpaqueSort=function(e){C=e};this.setTransparentSort=function(e){R=e};this.getClearColor=function(){return ie.getClearColor()};this.setClearColor=function(){ie.setClearColor.apply(ie,arguments)};this.getClearAlpha=function(){return ie.getClearAlpha()};this.setClearAlpha=function(){ie.setClearAlpha.apply(ie,arguments)};this.clear=function(e,t,n){let r=0;if(e===undefined||e)r|=16384;if(t===undefined||t)r|=256;if(n===undefined||n)r|=1024;z.clear(r)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){t.removeEventListener("webglcontextlost",de,false);t.removeEventListener("webglcontextrestored",pe,false);te.dispose();ne.dispose();X.dispose();Y.dispose();Q.dispose();le.dispose();he.dispose();be.stop()};function de(e){e.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");p=true}function pe(){console.log("THREE.WebGLRenderer: Context Restored.");p=false;ue()}function me(e){const t=e.target;t.removeEventListener("dispose",me);ge(t)}function ge(e){ye(e);X.remove(e)}function ye(e){const t=X.get(e).program;if(t!==undefined){K.releaseProgram(t)}}function ve(e,t){e.render((function(e){d.renderBufferImmediate(e,t)}))}this.renderBufferImmediate=function(e,t){le.initAttributes();const n=X.get(e);if(e.hasPositions&&!n.position)n.position=z.createBuffer();if(e.hasNormals&&!n.normal)n.normal=z.createBuffer();if(e.hasUvs&&!n.uv)n.uv=z.createBuffer();if(e.hasColors&&!n.color)n.color=z.createBuffer();const r=t.getAttributes();if(e.hasPositions){z.bindBuffer(34962,n.position);z.bufferData(34962,e.positionArray,35048);le.enableAttribute(r.position);z.vertexAttribPointer(r.position,3,5126,false,0,0)}if(e.hasNormals){z.bindBuffer(34962,n.normal);z.bufferData(34962,e.normalArray,35048);le.enableAttribute(r.normal);z.vertexAttribPointer(r.normal,3,5126,false,0,0)}if(e.hasUvs){z.bindBuffer(34962,n.uv);z.bufferData(34962,e.uvArray,35048);le.enableAttribute(r.uv);z.vertexAttribPointer(r.uv,2,5126,false,0,0)}if(e.hasColors){z.bindBuffer(34962,n.color);z.bufferData(34962,e.colorArray,35048);le.enableAttribute(r.color);z.vertexAttribPointer(r.color,3,5126,false,0,0)}le.disableUnusedAttributes();z.drawArrays(4,0,e.count);e.count=0};this.renderBufferDirect=function(e,t,n,r,i,a){if(t===null)t=U;const o=i.isMesh&&i.matrixWorld.determinant()<0;const s=Ee(e,t,r,i);j.setMaterial(r,o);let c=n.index;const l=n.attributes.position;if(c===null){if(l===undefined||l.count===0)return}else if(c.count===0){return}let u=1;if(r.wireframe===true){c=J.getWireframeAttribute(n);u=2}if(r.morphTargets||r.morphNormals){ae.update(i,n,r,s)}le.setup(i,r,s,n,c);let h;let f=oe;if(c!==null){h=Z.get(c);f=se;f.setIndex(h)}const d=c!==null?c.count:l.count;const p=n.drawRange.start*u;const m=n.drawRange.count*u;const g=a!==null?a.start*u:0;const y=a!==null?a.count*u:Infinity;const v=Math.max(p,g);const _=Math.min(d,p+m,g+y)-1;const x=Math.max(0,_-v+1);if(x===0)return;if(i.isMesh){if(r.wireframe===true){j.setLineWidth(r.wireframeLinewidth*V());f.setMode(1)}else{f.setMode(4)}}else if(i.isLine){let e=r.linewidth;if(e===undefined)e=1;j.setLineWidth(e*V());if(i.isLineSegments){f.setMode(1)}else if(i.isLineLoop){f.setMode(2)}else{f.setMode(3)}}else if(i.isPoints){f.setMode(0)}else if(i.isSprite){f.setMode(4)}if(i.isInstancedMesh){f.renderInstances(v,x,i.count)}else if(n.isInstancedBufferGeometry){const e=Math.min(n.instanceCount,n._maxInstanceCount);f.renderInstances(v,x,e)}else{f.render(v,x)}};this.compile=function(e,t){f=ne.get(e,t);f.init();e.traverse((function(e){if(e.isLight){f.pushLight(e);if(e.castShadow){f.pushShadow(e)}}}));f.setupLights(t);const n=new WeakMap;e.traverse((function(t){const r=t.material;if(r){if(Array.isArray(r)){for(let i=0;i<r.length;i++){const a=r[i];if(n.has(a)===false){Te(a,e,t);n.set(a)}}}else if(n.has(r)===false){Te(r,e,t);n.set(r)}}}))};let _e=null;function xe(e){if(he.isPresenting)return;if(_e)_e(e)}const be=new WebGLAnimation;be.setAnimationLoop(xe);if(typeof window!=="undefined")be.setContext(window);this.setAnimationLoop=function(e){_e=e;he.setAnimationLoop(e);e===null?be.stop():be.start()};this.render=function(e,t){let n,r;if(arguments[2]!==undefined){console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");n=arguments[2]}if(arguments[3]!==undefined){console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");r=arguments[3]}if(t!==undefined&&t.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(p===true)return;le.resetDefaultState();x=-1;b=null;if(e.autoUpdate===true)e.updateMatrixWorld();if(t.parent===null)t.updateMatrixWorld();if(he.enabled===true&&he.isPresenting===true){t=he.getCamera(t)}if(e.isScene===true)e.onBeforeRender(d,e,t,n||v);f=ne.get(e,t);f.init();F.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);G.setFromProjectionMatrix(F);O=this.localClippingEnabled;I=re.init(this.clippingPlanes,O,t);h=te.get(e,t);h.init();Me(e,t,0,d.sortObjects);h.finish();if(d.sortObjects===true){h.sort(C,R)}if(I===true)re.beginShadows();const i=f.state.shadowsArray;fe.render(i,e,t);f.setupLights(t);if(I===true)re.endShadows();if(this.info.autoReset===true)this.info.reset();if(n!==undefined){this.setRenderTarget(n)}ie.render(h,e,t,r);const a=h.opaque;const o=h.transparent;if(a.length>0)we(a,e,t);if(o.length>0)we(o,e,t);if(e.isScene===true)e.onAfterRender(d,e,t);if(v!==null){$.updateRenderTargetMipmap(v);$.updateMultisampleRenderTarget(v)}j.buffers.depth.setTest(true);j.buffers.depth.setMask(true);j.buffers.color.setMask(true);j.setPolygonOffset(false);h=null;f=null};function Me(e,t,n,r){if(e.visible===false)return;const i=e.layers.test(t.layers);if(i){if(e.isGroup){n=e.renderOrder}else if(e.isLOD){if(e.autoUpdate===true)e.update(t)}else if(e.isLight){f.pushLight(e);if(e.castShadow){f.pushShadow(e)}}else if(e.isSprite){if(!e.frustumCulled||G.intersectsSprite(e)){if(r){N.setFromMatrixPosition(e.matrixWorld).applyMatrix4(F)}const t=Q.update(e);const i=e.material;if(i.visible){h.push(e,t,i,n,N.z,null)}}}else if(e.isImmediateRenderObject){if(r){N.setFromMatrixPosition(e.matrixWorld).applyMatrix4(F)}h.push(e,null,e.material,n,N.z,null)}else if(e.isMesh||e.isLine||e.isPoints){if(e.isSkinnedMesh){if(e.skeleton.frame!==q.render.frame){e.skeleton.update();e.skeleton.frame=q.render.frame}}if(!e.frustumCulled||G.intersectsObject(e)){if(r){N.setFromMatrixPosition(e.matrixWorld).applyMatrix4(F)}const t=Q.update(e);const i=e.material;if(Array.isArray(i)){const r=t.groups;for(let a=0,o=r.length;a<o;a++){const o=r[a];const s=i[o.materialIndex];if(s&&s.visible){h.push(e,t,s,n,N.z,o)}}}else if(i.visible){h.push(e,t,i,n,N.z,null)}}}}const a=e.children;for(let e=0,i=a.length;e<i;e++){Me(a[e],t,n,r)}}function we(e,t,n){const r=t.isScene===true?t.overrideMaterial:null;for(let i=0,a=e.length;i<a;i++){const a=e[i];const o=a.object;const s=a.geometry;const c=r===null?a.material:r;const l=a.group;if(n.isArrayCamera){M=n;const e=n.cameras;for(let n=0,r=e.length;n<r;n++){const r=e[n];if(o.layers.test(r.layers)){j.viewport(w.copy(r.viewport));f.setupLights(r);Se(o,t,r,s,c,l)}}}else{M=null;Se(o,t,n,s,c,l)}}}function Se(e,t,n,r,i,a){e.onBeforeRender(d,t,n,r,i,a);f=ne.get(t,M||n);e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld);e.normalMatrix.getNormalMatrix(e.modelViewMatrix);if(e.isImmediateRenderObject){const r=Ee(n,t,i,e);j.setMaterial(i);le.reset();ve(e,r)}else{d.renderBufferDirect(n,t,r,i,e,a)}e.onAfterRender(d,t,n,r,i,a);f=ne.get(t,M||n)}function Te(e,t,n){if(t.isScene!==true)t=U;const r=X.get(e);const i=f.state.lights;const a=f.state.shadowsArray;const o=i.state.version;const s=K.getParameters(e,i.state,a,t,n);const c=K.getProgramCacheKey(s);let l=r.program;let u=true;if(l===undefined){e.addEventListener("dispose",me)}else if(l.cacheKey!==c){ye(e)}else if(r.lightsStateVersion!==o){u=false}else if(s.shaderID!==undefined){const n=e.isMeshStandardMaterial?t.environment:null;r.envMap=Y.get(e.envMap||n);return}else{u=false}if(u){s.uniforms=K.getUniforms(e);e.onBeforeCompile(s,d);l=K.acquireProgram(s,c);r.program=l;r.uniforms=s.uniforms;r.outputEncoding=s.outputEncoding}const h=r.uniforms;if(!e.isShaderMaterial&&!e.isRawShaderMaterial||e.clipping===true){r.numClippingPlanes=re.numPlanes;r.numIntersection=re.numIntersection;h.clippingPlanes=re.uniform}r.environment=e.isMeshStandardMaterial?t.environment:null;r.fog=t.fog;r.envMap=Y.get(e.envMap||r.environment);r.needsLights=Le(e);r.lightsStateVersion=o;if(r.needsLights){h.ambientLightColor.value=i.state.ambient;h.lightProbe.value=i.state.probe;h.directionalLights.value=i.state.directional;h.directionalLightShadows.value=i.state.directionalShadow;h.spotLights.value=i.state.spot;h.spotLightShadows.value=i.state.spotShadow;h.rectAreaLights.value=i.state.rectArea;h.ltc_1.value=i.state.rectAreaLTC1;h.ltc_2.value=i.state.rectAreaLTC2;h.pointLights.value=i.state.point;h.pointLightShadows.value=i.state.pointShadow;h.hemisphereLights.value=i.state.hemi;h.directionalShadowMap.value=i.state.directionalShadowMap;h.directionalShadowMatrix.value=i.state.directionalShadowMatrix;h.spotShadowMap.value=i.state.spotShadowMap;h.spotShadowMatrix.value=i.state.spotShadowMatrix;h.pointShadowMap.value=i.state.pointShadowMap;h.pointShadowMatrix.value=i.state.pointShadowMatrix}const p=r.program.getUniforms();const m=WebGLUniforms.seqWithValue(p.seq,h);r.uniformsList=m}function Ee(e,t,n,r){if(t.isScene!==true)t=U;$.resetTextureUnits();const i=t.fog;const a=n.isMeshStandardMaterial?t.environment:null;const o=v===null?d.outputEncoding:v.texture.encoding;const s=Y.get(n.envMap||a);const c=X.get(n);const l=f.state.lights;if(I===true){if(O===true||e!==b){const t=e===b&&n.id===x;re.setState(n,e,t)}}if(n.version===c.__version){if(n.fog&&c.fog!==i){Te(n,t,r)}else if(c.environment!==a){Te(n,t,r)}else if(c.needsLights&&c.lightsStateVersion!==l.state.version){Te(n,t,r)}else if(c.numClippingPlanes!==undefined&&(c.numClippingPlanes!==re.numPlanes||c.numIntersection!==re.numIntersection)){Te(n,t,r)}else if(c.outputEncoding!==o){Te(n,t,r)}else if(c.envMap!==s){Te(n,t,r)}}else{Te(n,t,r);c.__version=n.version}let u=false;let h=false;let p=false;const m=c.program,g=m.getUniforms(),y=c.uniforms;if(j.useProgram(m.program)){u=true;h=true;p=true}if(n.id!==x){x=n.id;h=true}if(u||b!==e){g.setValue(z,"projectionMatrix",e.projectionMatrix);if(W.logarithmicDepthBuffer){g.setValue(z,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2))}if(b!==e){b=e;h=true;p=true}if(n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const t=g.map.cameraPosition;if(t!==undefined){t.setValue(z,N.setFromMatrixPosition(e.matrixWorld))}}if(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial){g.setValue(z,"isOrthographic",e.isOrthographicCamera===true)}if(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||n.skinning){g.setValue(z,"viewMatrix",e.matrixWorldInverse)}}if(n.skinning){g.setOptional(z,r,"bindMatrix");g.setOptional(z,r,"bindMatrixInverse");const e=r.skeleton;if(e){const t=e.bones;if(W.floatVertexTextures){if(e.boneTexture===undefined){let n=Math.sqrt(t.length*4);n=MathUtils.ceilPowerOfTwo(n);n=Math.max(n,4);const r=new Float32Array(n*n*4);r.set(e.boneMatrices);const i=new DataTexture(r,n,n,RGBAFormat,FloatType);e.boneMatrices=r;e.boneTexture=i;e.boneTextureSize=n}g.setValue(z,"boneTexture",e.boneTexture,$);g.setValue(z,"boneTextureSize",e.boneTextureSize)}else{g.setOptional(z,e,"boneMatrices")}}}if(h||c.receiveShadow!==r.receiveShadow){c.receiveShadow=r.receiveShadow;g.setValue(z,"receiveShadow",r.receiveShadow)}if(h){g.setValue(z,"toneMappingExposure",d.toneMappingExposure);if(c.needsLights){Ae(y,p)}if(i&&n.fog){ee.refreshFogUniforms(y,i)}ee.refreshMaterialUniforms(y,n,L,A);WebGLUniforms.upload(z,c.uniformsList,y,$)}if(n.isShaderMaterial&&n.uniformsNeedUpdate===true){WebGLUniforms.upload(z,c.uniformsList,y,$);n.uniformsNeedUpdate=false}if(n.isSpriteMaterial){g.setValue(z,"center",r.center)}g.setValue(z,"modelViewMatrix",r.modelViewMatrix);g.setValue(z,"normalMatrix",r.normalMatrix);g.setValue(z,"modelMatrix",r.matrixWorld);return m}function Ae(e,t){e.ambientLightColor.needsUpdate=t;e.lightProbe.needsUpdate=t;e.directionalLights.needsUpdate=t;e.directionalLightShadows.needsUpdate=t;e.pointLights.needsUpdate=t;e.pointLightShadows.needsUpdate=t;e.spotLights.needsUpdate=t;e.spotLightShadows.needsUpdate=t;e.rectAreaLights.needsUpdate=t;e.hemisphereLights.needsUpdate=t}function Le(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&e.lights===true}this.setFramebuffer=function(e){if(m!==e&&v===null)z.bindFramebuffer(36160,e);m=e};this.getActiveCubeFace=function(){return g};this.getActiveMipmapLevel=function(){return y};this.getRenderList=function(){return h};this.setRenderList=function(e){h=e};this.getRenderState=function(){return f};this.setRenderState=function(e){f=e};this.getRenderTarget=function(){return v};this.setRenderTarget=function(e,t=0,n=0){v=e;g=t;y=n;if(e&&X.get(e).__webglFramebuffer===undefined){$.setupRenderTarget(e)}let r=m;let i=false;if(e){const n=X.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget){r=n[t];i=true}else if(e.isWebGLMultisampleRenderTarget){r=X.get(e).__webglMultisampledFramebuffer}else{r=n}w.copy(e.viewport);S.copy(e.scissor);T=e.scissorTest}else{w.copy(P).multiplyScalar(L).floor();S.copy(B).multiplyScalar(L).floor();T=D}if(_!==r){z.bindFramebuffer(36160,r);_=r}j.viewport(w);j.scissor(S);j.setScissorTest(T);if(i){const r=X.get(e.texture);z.framebufferTexture2D(36160,36064,34069+t,r.__webglTexture,n)}};this.readRenderTargetPixels=function(e,t,n,r,i,a,o){if(!(e&&e.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let s=X.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget&&o!==undefined){s=s[o]}if(s){let o=false;if(s!==_){z.bindFramebuffer(36160,s);o=true}try{const s=e.texture;const c=s.format;const l=s.type;if(c!==RGBAFormat&&ce.convert(c)!==z.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(l!==UnsignedByteType&&ce.convert(l)!==z.getParameter(35738)&&!(l===FloatType&&(W.isWebGL2||k.get("OES_texture_float")||k.get("WEBGL_color_buffer_float")))&&!(l===HalfFloatType&&(W.isWebGL2?k.get("EXT_color_buffer_float"):k.get("EXT_color_buffer_half_float")))){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(z.checkFramebufferStatus(36160)===36053){if(t>=0&&t<=e.width-r&&(n>=0&&n<=e.height-i)){z.readPixels(t,n,r,i,ce.convert(c),ce.convert(l),a)}}else{console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}}finally{if(o){z.bindFramebuffer(36160,_)}}}};this.copyFramebufferToTexture=function(e,t,n){if(n===undefined)n=0;const r=Math.pow(2,-n);const i=Math.floor(t.image.width*r);const a=Math.floor(t.image.height*r);const o=ce.convert(t.format);$.setTexture2D(t,0);z.copyTexImage2D(3553,n,o,e.x,e.y,i,a,0);j.unbindTexture()};this.copyTextureToTexture=function(e,t,n,r){if(r===undefined)r=0;const i=t.image.width;const a=t.image.height;const o=ce.convert(n.format);const s=ce.convert(n.type);$.setTexture2D(n,0);z.pixelStorei(37440,n.flipY);z.pixelStorei(37441,n.premultiplyAlpha);z.pixelStorei(3317,n.unpackAlignment);if(t.isDataTexture){z.texSubImage2D(3553,r,e.x,e.y,i,a,o,s,t.image.data)}else{if(t.isCompressedTexture){z.compressedTexSubImage2D(3553,r,e.x,e.y,t.mipmaps[0].width,t.mipmaps[0].height,o,t.mipmaps[0].data)}else{z.texSubImage2D(3553,r,e.x,e.y,o,s,t.image)}}if(r===0&&n.generateMipmaps)z.generateMipmap(3553);j.unbindTexture()};this.initTexture=function(e){$.setTexture2D(e,0);j.unbindTexture()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}function WebGL1Renderer(e){WebGLRenderer.call(this,e)}WebGL1Renderer.prototype=Object.assign(Object.create(WebGLRenderer.prototype),{constructor:WebGL1Renderer,isWebGL1Renderer:true});class FogExp2{constructor(e,t){Object.defineProperty(this,"isFogExp2",{value:true});this.name="";this.color=new Color(e);this.density=t!==undefined?t:25e-5}clone(){return new FogExp2(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}class Fog{constructor(e,t,n){Object.defineProperty(this,"isFog",{value:true});this.name="";this.color=new Color(e);this.near=t!==undefined?t:1;this.far=n!==undefined?n:1e3}clone(){return new Fog(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}class Scene extends Object3D{constructor(){super();Object.defineProperty(this,"isScene",{value:true});this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.overrideMaterial=null;this.autoUpdate=true;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(e,t){super.copy(e,t);if(e.background!==null)this.background=e.background.clone();if(e.environment!==null)this.environment=e.environment.clone();if(e.fog!==null)this.fog=e.fog.clone();if(e.overrideMaterial!==null)this.overrideMaterial=e.overrideMaterial.clone();this.autoUpdate=e.autoUpdate;this.matrixAutoUpdate=e.matrixAutoUpdate;return this}toJSON(e){const t=super.toJSON(e);if(this.background!==null)t.object.background=this.background.toJSON(e);if(this.environment!==null)t.object.environment=this.environment.toJSON(e);if(this.fog!==null)t.object.fog=this.fog.toJSON();return t}}function InterleavedBuffer(e,t){this.array=e;this.stride=t;this.count=e!==undefined?e.length/t:0;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;this.uuid=MathUtils.generateUUID()}Object.defineProperty(InterleavedBuffer.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});Object.assign(InterleavedBuffer.prototype,{isInterleavedBuffer:true,onUploadCallback:function(){},setUsage:function(e){this.usage=e;return this},copy:function(e){this.array=new e.array.constructor(e.array);this.count=e.count;this.stride=e.stride;this.usage=e.usage;return this},copyAt:function(e,t,n){e*=this.stride;n*=t.stride;for(let r=0,i=this.stride;r<i;r++){this.array[e+r]=t.array[n+r]}return this},set:function(e,t){if(t===undefined)t=0;this.array.set(e,t);return this},clone:function(e){if(e.arrayBuffers===undefined){e.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=MathUtils.generateUUID()}if(e.arrayBuffers[this.array.buffer._uuid]===undefined){e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer}const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]);const n=new InterleavedBuffer(t,this.stride);n.setUsage(this.usage);return n},onUpload:function(e){this.onUploadCallback=e;return this},toJSON:function(e){if(e.arrayBuffers===undefined){e.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=MathUtils.generateUUID()}if(e.arrayBuffers[this.array.buffer._uuid]===undefined){e.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))}return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}});const _vector$6=new Vector3;function InterleavedBufferAttribute(e,t,n,r){this.name="";this.data=e;this.itemSize=t;this.offset=n;this.normalized=r===true}Object.defineProperties(InterleavedBufferAttribute.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}},needsUpdate:{set:function(e){this.data.needsUpdate=e}}});Object.assign(InterleavedBufferAttribute.prototype,{isInterleavedBufferAttribute:true,applyMatrix4:function(e){for(let t=0,n=this.data.count;t<n;t++){_vector$6.x=this.getX(t);_vector$6.y=this.getY(t);_vector$6.z=this.getZ(t);_vector$6.applyMatrix4(e);this.setXYZ(t,_vector$6.x,_vector$6.y,_vector$6.z)}return this},setX:function(e,t){this.data.array[e*this.data.stride+this.offset]=t;return this},setY:function(e,t){this.data.array[e*this.data.stride+this.offset+1]=t;return this},setZ:function(e,t){this.data.array[e*this.data.stride+this.offset+2]=t;return this},setW:function(e,t){this.data.array[e*this.data.stride+this.offset+3]=t;return this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,n){e=e*this.data.stride+this.offset;this.data.array[e+0]=t;this.data.array[e+1]=n;return this},setXYZ:function(e,t,n,r){e=e*this.data.stride+this.offset;this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=r;return this},setXYZW:function(e,t,n,r,i){e=e*this.data.stride+this.offset;this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=r;this.data.array[e+3]=i;return this},clone:function(e){if(e===undefined){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++){e.push(this.data.array[n+t])}}return new BufferAttribute(new this.array.constructor(e),this.itemSize,this.normalized)}else{if(e.interleavedBuffers===undefined){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===undefined){e.interleavedBuffers[this.data.uuid]=this.data.clone(e)}return new InterleavedBufferAttribute(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}},toJSON:function(e){if(e===undefined){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const e=[];for(let t=0;t<this.count;t++){const n=t*this.data.stride+this.offset;for(let t=0;t<this.itemSize;t++){e.push(this.data.array[n+t])}}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else{if(e.interleavedBuffers===undefined){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===undefined){e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}});function SpriteMaterial(e){Material.call(this);this.type="SpriteMaterial";this.color=new Color(16777215);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.setValues(e)}SpriteMaterial.prototype=Object.create(Material.prototype);SpriteMaterial.prototype.constructor=SpriteMaterial;SpriteMaterial.prototype.isSpriteMaterial=true;SpriteMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);this.map=e.map;this.alphaMap=e.alphaMap;this.rotation=e.rotation;this.sizeAttenuation=e.sizeAttenuation;return this};let _geometry;const _intersectPoint=new Vector3;const _worldScale=new Vector3;const _mvPosition=new Vector3;const _alignedPosition=new Vector2;const _rotatedPosition=new Vector2;const _viewWorldMatrix=new Matrix4;const _vA$1=new Vector3;const _vB$1=new Vector3;const _vC$1=new Vector3;const _uvA$1=new Vector2;const _uvB$1=new Vector2;const _uvC$1=new Vector2;function Sprite(e){Object3D.call(this);this.type="Sprite";if(_geometry===undefined){_geometry=new BufferGeometry;const e=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]);const t=new InterleavedBuffer(e,5);_geometry.setIndex([0,1,2,0,2,3]);_geometry.setAttribute("position",new InterleavedBufferAttribute(t,3,0,false));_geometry.setAttribute("uv",new InterleavedBufferAttribute(t,2,3,false))}this.geometry=_geometry;this.material=e!==undefined?e:new SpriteMaterial;this.center=new Vector2(.5,.5)}Sprite.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Sprite,isSprite:true,raycast:function(e,t){if(e.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.')}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(e.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z)}const n=this.material.rotation;let r,i;if(n!==0){i=Math.cos(n);r=Math.sin(n)}const a=this.center;transformVertex(_vA$1.set(-.5,-.5,0),_mvPosition,a,_worldScale,r,i);transformVertex(_vB$1.set(.5,-.5,0),_mvPosition,a,_worldScale,r,i);transformVertex(_vC$1.set(.5,.5,0),_mvPosition,a,_worldScale,r,i);_uvA$1.set(0,0);_uvB$1.set(1,0);_uvC$1.set(1,1);let o=e.ray.intersectTriangle(_vA$1,_vB$1,_vC$1,false,_intersectPoint);if(o===null){transformVertex(_vB$1.set(-.5,.5,0),_mvPosition,a,_worldScale,r,i);_uvB$1.set(0,1);o=e.ray.intersectTriangle(_vA$1,_vC$1,_vB$1,false,_intersectPoint);if(o===null){return}}const s=e.ray.origin.distanceTo(_intersectPoint);if(s<e.near||s>e.far)return;t.push({distance:s,point:_intersectPoint.clone(),uv:Triangle.getUV(_intersectPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2),face:null,object:this})},copy:function(e){Object3D.prototype.copy.call(this,e);if(e.center!==undefined)this.center.copy(e.center);this.material=e.material;return this}});function transformVertex(e,t,n,r,i,a){_alignedPosition.subVectors(e,n).addScalar(.5).multiply(r);if(i!==undefined){_rotatedPosition.x=a*_alignedPosition.x-i*_alignedPosition.y;_rotatedPosition.y=i*_alignedPosition.x+a*_alignedPosition.y}else{_rotatedPosition.copy(_alignedPosition)}e.copy(t);e.x+=_rotatedPosition.x;e.y+=_rotatedPosition.y;e.applyMatrix4(_viewWorldMatrix)}const _v1$4=new Vector3;const _v2$2=new Vector3;function LOD(){Object3D.call(this);this._currentLevel=0;this.type="LOD";Object.defineProperties(this,{levels:{enumerable:true,value:[]}});this.autoUpdate=true}LOD.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:LOD,isLOD:true,copy:function(e){Object3D.prototype.copy.call(this,e,false);const t=e.levels;for(let e=0,n=t.length;e<n;e++){const n=t[e];this.addLevel(n.object.clone(),n.distance)}this.autoUpdate=e.autoUpdate;return this},addLevel:function(e,t){if(t===undefined)t=0;t=Math.abs(t);const n=this.levels;let r;for(r=0;r<n.length;r++){if(t<n[r].distance){break}}n.splice(r,0,{distance:t,object:e});this.add(e);return this},getCurrentLevel:function(){return this._currentLevel},getObjectForDistance:function(e){const t=this.levels;if(t.length>0){let n,r;for(n=1,r=t.length;n<r;n++){if(e<t[n].distance){break}}return t[n-1].object}return null},raycast:function(e,t){const n=this.levels;if(n.length>0){_v1$4.setFromMatrixPosition(this.matrixWorld);const n=e.ray.origin.distanceTo(_v1$4);this.getObjectForDistance(n).raycast(e,t)}},update:function(e){const t=this.levels;if(t.length>1){_v1$4.setFromMatrixPosition(e.matrixWorld);_v2$2.setFromMatrixPosition(this.matrixWorld);const n=_v1$4.distanceTo(_v2$2)/e.zoom;t[0].object.visible=true;let r,i;for(r=1,i=t.length;r<i;r++){if(n>=t[r].distance){t[r-1].object.visible=false;t[r].object.visible=true}else{break}}this._currentLevel=r-1;for(;r<i;r++){t[r].object.visible=false}}},toJSON:function(e){const t=Object3D.prototype.toJSON.call(this,e);if(this.autoUpdate===false)t.object.autoUpdate=false;t.object.levels=[];const n=this.levels;for(let e=0,r=n.length;e<r;e++){const r=n[e];t.object.levels.push({object:r.object.uuid,distance:r.distance})}return t}});function SkinnedMesh(e,t){if(e&&e.isGeometry){console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}Mesh.call(this,e,t);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new Matrix4;this.bindMatrixInverse=new Matrix4}SkinnedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:SkinnedMesh,isSkinnedMesh:true,copy:function(e){Mesh.prototype.copy.call(this,e);this.bindMode=e.bindMode;this.bindMatrix.copy(e.bindMatrix);this.bindMatrixInverse.copy(e.bindMatrixInverse);this.skeleton=e.skeleton;return this},bind:function(e,t){this.skeleton=e;if(t===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();t=this.matrixWorld}this.bindMatrix.copy(t);this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){const e=new Vector4;const t=this.geometry.attributes.skinWeight;for(let n=0,r=t.count;n<r;n++){e.x=t.getX(n);e.y=t.getY(n);e.z=t.getZ(n);e.w=t.getW(n);const r=1/e.manhattanLength();if(r!==Infinity){e.multiplyScalar(r)}else{e.set(1,0,0,0)}t.setXYZW(n,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(e){Mesh.prototype.updateMatrixWorld.call(this,e);if(this.bindMode==="attached"){this.bindMatrixInverse.getInverse(this.matrixWorld)}else if(this.bindMode==="detached"){this.bindMatrixInverse.getInverse(this.bindMatrix)}else{console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}},boneTransform:function(){const e=new Vector3;const t=new Vector4;const n=new Vector4;const r=new Vector3;const i=new Matrix4;return function(a,o){const s=this.skeleton;const c=this.geometry;t.fromBufferAttribute(c.attributes.skinIndex,a);n.fromBufferAttribute(c.attributes.skinWeight,a);e.fromBufferAttribute(c.attributes.position,a).applyMatrix4(this.bindMatrix);o.set(0,0,0);for(let a=0;a<4;a++){const c=n.getComponent(a);if(c!==0){const n=t.getComponent(a);i.multiplyMatrices(s.bones[n].matrixWorld,s.boneInverses[n]);o.addScaledVector(r.copy(e).applyMatrix4(i),c)}}return o.applyMatrix4(this.bindMatrixInverse)}}()});const _offsetMatrix=new Matrix4;const _identityMatrix=new Matrix4;function Skeleton(e,t){e=e||[];this.bones=e.slice(0);this.boneMatrices=new Float32Array(this.bones.length*16);this.frame=-1;if(t===undefined){this.calculateInverses()}else{if(this.bones.length===t.length){this.boneInverses=t.slice(0)}else{console.warn("THREE.Skeleton boneInverses is the wrong length.");this.boneInverses=[];for(let e=0,t=this.bones.length;e<t;e++){this.boneInverses.push(new Matrix4)}}}}Object.assign(Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(let e=0,t=this.bones.length;e<t;e++){const t=new Matrix4;if(this.bones[e]){t.getInverse(this.bones[e].matrixWorld)}this.boneInverses.push(t)}},pose:function(){for(let e=0,t=this.bones.length;e<t;e++){const t=this.bones[e];if(t){t.matrixWorld.getInverse(this.boneInverses[e])}}for(let e=0,t=this.bones.length;e<t;e++){const t=this.bones[e];if(t){if(t.parent&&t.parent.isBone){t.matrix.getInverse(t.parent.matrixWorld);t.matrix.multiply(t.matrixWorld)}else{t.matrix.copy(t.matrixWorld)}t.matrix.decompose(t.position,t.quaternion,t.scale)}}},update:function(){const e=this.bones;const t=this.boneInverses;const n=this.boneMatrices;const r=this.boneTexture;for(let r=0,i=e.length;r<i;r++){const i=e[r]?e[r].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(i,t[r]);_offsetMatrix.toArray(n,r*16)}if(r!==undefined){r.needsUpdate=true}},clone:function(){return new Skeleton(this.bones,this.boneInverses)},getBoneByName:function(e){for(let t=0,n=this.bones.length;t<n;t++){const n=this.bones[t];if(n.name===e){return n}}return undefined},dispose:function(){if(this.boneTexture){this.boneTexture.dispose();this.boneTexture=undefined}}});function Bone(){Object3D.call(this);this.type="Bone"}Bone.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Bone,isBone:true});const _instanceLocalMatrix=new Matrix4;const _instanceWorldMatrix=new Matrix4;const _instanceIntersects=[];const _mesh=new Mesh;function InstancedMesh(e,t,n){Mesh.call(this,e,t);this.instanceMatrix=new BufferAttribute(new Float32Array(n*16),16);this.instanceColor=null;this.count=n;this.frustumCulled=false}InstancedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:InstancedMesh,isInstancedMesh:true,copy:function(e){Mesh.prototype.copy.call(this,e);this.instanceMatrix.copy(e.instanceMatrix);this.count=e.count;return this},setColorAt:function(e,t){if(this.instanceColor===null){this.instanceColor=new BufferAttribute(new Float32Array(this.count*3),3)}t.toArray(this.instanceColor.array,e*3)},getMatrixAt:function(e,t){t.fromArray(this.instanceMatrix.array,e*16)},raycast:function(e,t){const n=this.matrixWorld;const r=this.count;_mesh.geometry=this.geometry;_mesh.material=this.material;if(_mesh.material===undefined)return;for(let i=0;i<r;i++){this.getMatrixAt(i,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(n,_instanceLocalMatrix);_mesh.matrixWorld=_instanceWorldMatrix;_mesh.raycast(e,_instanceIntersects);for(let e=0,n=_instanceIntersects.length;e<n;e++){const n=_instanceIntersects[e];n.instanceId=i;n.object=this;t.push(n)}_instanceIntersects.length=0}},setMatrixAt:function(e,t){t.toArray(this.instanceMatrix.array,e*16)},updateMorphTargets:function(){}});function LineBasicMaterial(e){Material.call(this);this.type="LineBasicMaterial";this.color=new Color(16777215);this.linewidth=1;this.linecap="round";this.linejoin="round";this.morphTargets=false;this.setValues(e)}LineBasicMaterial.prototype=Object.create(Material.prototype);LineBasicMaterial.prototype.constructor=LineBasicMaterial;LineBasicMaterial.prototype.isLineBasicMaterial=true;LineBasicMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);this.linewidth=e.linewidth;this.linecap=e.linecap;this.linejoin=e.linejoin;this.morphTargets=e.morphTargets;return this};const _start=new Vector3;const _end=new Vector3;const _inverseMatrix$1=new Matrix4;const _ray$1=new Ray;const _sphere$2=new Sphere;function Line(e,t,n){if(n===1){console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.")}Object3D.call(this);this.type="Line";this.geometry=e!==undefined?e:new BufferGeometry;this.material=t!==undefined?t:new LineBasicMaterial;this.updateMorphTargets()}Line.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Line,isLine:true,copy:function(e){Object3D.prototype.copy.call(this,e);this.material=e.material;this.geometry=e.geometry;return this},computeLineDistances:function(){const e=this.geometry;if(e.isBufferGeometry){if(e.index===null){const t=e.attributes.position;const n=[0];for(let e=1,r=t.count;e<r;e++){_start.fromBufferAttribute(t,e-1);_end.fromBufferAttribute(t,e);n[e]=n[e-1];n[e]+=_start.distanceTo(_end)}e.setAttribute("lineDistance",new Float32BufferAttribute(n,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}}else if(e.isGeometry){const t=e.vertices;const n=e.lineDistances;n[0]=0;for(let e=1,r=t.length;e<r;e++){n[e]=n[e-1];n[e]+=t[e-1].distanceTo(t[e])}}return this},raycast:function(e,t){const n=this.geometry;const r=this.matrixWorld;const i=e.params.Line.threshold;if(n.boundingSphere===null)n.computeBoundingSphere();_sphere$2.copy(n.boundingSphere);_sphere$2.applyMatrix4(r);_sphere$2.radius+=i;if(e.ray.intersectsSphere(_sphere$2)===false)return;_inverseMatrix$1.getInverse(r);_ray$1.copy(e.ray).applyMatrix4(_inverseMatrix$1);const a=i/((this.scale.x+this.scale.y+this.scale.z)/3);const o=a*a;const s=new Vector3;const c=new Vector3;const l=new Vector3;const u=new Vector3;const h=this&&this.isLineSegments?2:1;if(n.isBufferGeometry){const r=n.index;const i=n.attributes;const a=i.position.array;if(r!==null){const n=r.array;for(let r=0,i=n.length-1;r<i;r+=h){const i=n[r];const h=n[r+1];s.fromArray(a,i*3);c.fromArray(a,h*3);const f=_ray$1.distanceSqToSegment(s,c,u,l);if(f>o)continue;u.applyMatrix4(this.matrixWorld);const d=e.ray.origin.distanceTo(u);if(d<e.near||d>e.far)continue;t.push({distance:d,point:l.clone().applyMatrix4(this.matrixWorld),index:r,face:null,faceIndex:null,object:this})}}else{for(let n=0,r=a.length/3-1;n<r;n+=h){s.fromArray(a,3*n);c.fromArray(a,3*n+3);const r=_ray$1.distanceSqToSegment(s,c,u,l);if(r>o)continue;u.applyMatrix4(this.matrixWorld);const i=e.ray.origin.distanceTo(u);if(i<e.near||i>e.far)continue;t.push({distance:i,point:l.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}}else if(n.isGeometry){const r=n.vertices;const i=r.length;for(let n=0;n<i-1;n+=h){const i=_ray$1.distanceSqToSegment(r[n],r[n+1],u,l);if(i>o)continue;u.applyMatrix4(this.matrixWorld);const a=e.ray.origin.distanceTo(u);if(a<e.near||a>e.far)continue;t.push({distance:a,point:l.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const e=t[n[0]];if(e!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let t=0,n=e.length;t<n;t++){const n=e[t].name||String(t);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=t}}}}else{const t=e.morphTargets;if(t!==undefined&&t.length>0){console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}});const _start$1=new Vector3;const _end$1=new Vector3;function LineSegments(e,t){Line.call(this,e,t);this.type="LineSegments"}LineSegments.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineSegments,isLineSegments:true,computeLineDistances:function(){const e=this.geometry;if(e.isBufferGeometry){if(e.index===null){const t=e.attributes.position;const n=[];for(let e=0,r=t.count;e<r;e+=2){_start$1.fromBufferAttribute(t,e);_end$1.fromBufferAttribute(t,e+1);n[e]=e===0?0:n[e-1];n[e+1]=n[e]+_start$1.distanceTo(_end$1)}e.setAttribute("lineDistance",new Float32BufferAttribute(n,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}}else if(e.isGeometry){const t=e.vertices;const n=e.lineDistances;for(let e=0,r=t.length;e<r;e+=2){_start$1.copy(t[e]);_end$1.copy(t[e+1]);n[e]=e===0?0:n[e-1];n[e+1]=n[e]+_start$1.distanceTo(_end$1)}}return this}});function LineLoop(e,t){Line.call(this,e,t);this.type="LineLoop"}LineLoop.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineLoop,isLineLoop:true});function PointsMaterial(e){Material.call(this);this.type="PointsMaterial";this.color=new Color(16777215);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.morphTargets=false;this.setValues(e)}PointsMaterial.prototype=Object.create(Material.prototype);PointsMaterial.prototype.constructor=PointsMaterial;PointsMaterial.prototype.isPointsMaterial=true;PointsMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);this.map=e.map;this.alphaMap=e.alphaMap;this.size=e.size;this.sizeAttenuation=e.sizeAttenuation;this.morphTargets=e.morphTargets;return this};const _inverseMatrix$2=new Matrix4;const _ray$2=new Ray;const _sphere$3=new Sphere;const _position$1=new Vector3;function Points(e,t){Object3D.call(this);this.type="Points";this.geometry=e!==undefined?e:new BufferGeometry;this.material=t!==undefined?t:new PointsMaterial;this.updateMorphTargets()}Points.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Points,isPoints:true,copy:function(e){Object3D.prototype.copy.call(this,e);this.material=e.material;this.geometry=e.geometry;return this},raycast:function(e,t){const n=this.geometry;const r=this.matrixWorld;const i=e.params.Points.threshold;if(n.boundingSphere===null)n.computeBoundingSphere();_sphere$3.copy(n.boundingSphere);_sphere$3.applyMatrix4(r);_sphere$3.radius+=i;if(e.ray.intersectsSphere(_sphere$3)===false)return;_inverseMatrix$2.getInverse(r);_ray$2.copy(e.ray).applyMatrix4(_inverseMatrix$2);const a=i/((this.scale.x+this.scale.y+this.scale.z)/3);const o=a*a;if(n.isBufferGeometry){const i=n.index;const a=n.attributes;const s=a.position.array;if(i!==null){const n=i.array;for(let i=0,a=n.length;i<a;i++){const a=n[i];_position$1.fromArray(s,a*3);testPoint(_position$1,a,o,r,e,t,this)}}else{for(let n=0,i=s.length/3;n<i;n++){_position$1.fromArray(s,n*3);testPoint(_position$1,n,o,r,e,t,this)}}}else{const i=n.vertices;for(let n=0,a=i.length;n<a;n++){testPoint(i[n],n,o,r,e,t,this)}}},updateMorphTargets:function(){const e=this.geometry;if(e.isBufferGeometry){const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const e=t[n[0]];if(e!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let t=0,n=e.length;t<n;t++){const n=e[t].name||String(t);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=t}}}}else{const t=e.morphTargets;if(t!==undefined&&t.length>0){console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}});function testPoint(e,t,n,r,i,a,o){const s=_ray$2.distanceSqToPoint(e);if(s<n){const n=new Vector3;_ray$2.closestPointToPoint(e,n);n.applyMatrix4(r);const c=i.ray.origin.distanceTo(n);if(c<i.near||c>i.far)return;a.push({distance:c,distanceToRay:Math.sqrt(s),point:n,index:t,face:null,object:o})}}function VideoTexture(e,t,n,r,i,a,o,s,c){Texture.call(this,e,t,n,r,i,a,o,s,c);this.format=o!==undefined?o:RGBFormat;this.minFilter=a!==undefined?a:LinearFilter;this.magFilter=i!==undefined?i:LinearFilter;this.generateMipmaps=false;const l=this;function u(){l.needsUpdate=true;e.requestVideoFrameCallback(u)}if("requestVideoFrameCallback"in e){e.requestVideoFrameCallback(u)}}VideoTexture.prototype=Object.assign(Object.create(Texture.prototype),{constructor:VideoTexture,isVideoTexture:true,update:function(){const e=this.image;const t="requestVideoFrameCallback"in e;if(t===false&&e.readyState>=e.HAVE_CURRENT_DATA){this.needsUpdate=true}}});function CompressedTexture(e,t,n,r,i,a,o,s,c,l,u,h){Texture.call(this,null,a,o,s,c,l,r,i,u,h);this.image={width:t,height:n};this.mipmaps=e;this.flipY=false;this.generateMipmaps=false}CompressedTexture.prototype=Object.create(Texture.prototype);CompressedTexture.prototype.constructor=CompressedTexture;CompressedTexture.prototype.isCompressedTexture=true;function CanvasTexture(e,t,n,r,i,a,o,s,c){Texture.call(this,e,t,n,r,i,a,o,s,c);this.needsUpdate=true}CanvasTexture.prototype=Object.create(Texture.prototype);CanvasTexture.prototype.constructor=CanvasTexture;CanvasTexture.prototype.isCanvasTexture=true;function DepthTexture(e,t,n,r,i,a,o,s,c,l){l=l!==undefined?l:DepthFormat;if(l!==DepthFormat&&l!==DepthStencilFormat){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}if(n===undefined&&l===DepthFormat)n=UnsignedShortType;if(n===undefined&&l===DepthStencilFormat)n=UnsignedInt248Type;Texture.call(this,null,r,i,a,o,s,l,n,c);this.image={width:e,height:t};this.magFilter=o!==undefined?o:NearestFilter;this.minFilter=s!==undefined?s:NearestFilter;this.flipY=false;this.generateMipmaps=false}DepthTexture.prototype=Object.create(Texture.prototype);DepthTexture.prototype.constructor=DepthTexture;DepthTexture.prototype.isDepthTexture=true;class WireframeGeometry extends BufferGeometry{constructor(e){super();this.type="WireframeGeometry";const t=[];const n=[0,0],r={};const i=["a","b","c"];if(e&&e.isGeometry){const a=e.faces;for(let e=0,t=a.length;e<t;e++){const t=a[e];for(let e=0;e<3;e++){const a=t[i[e]];const o=t[i[(e+1)%3]];n[0]=Math.min(a,o);n[1]=Math.max(a,o);const s=n[0]+","+n[1];if(r[s]===undefined){r[s]={index1:n[0],index2:n[1]}}}}for(const n in r){const i=r[n];let a=e.vertices[i.index1];t.push(a.x,a.y,a.z);a=e.vertices[i.index2];t.push(a.x,a.y,a.z)}}else if(e&&e.isBufferGeometry){const i=new Vector3;if(e.index!==null){const a=e.attributes.position;const o=e.index;let s=e.groups;if(s.length===0){s=[{start:0,count:o.count,materialIndex:0}]}for(let e=0,t=s.length;e<t;++e){const t=s[e];const i=t.start;const a=t.count;for(let e=i,t=i+a;e<t;e+=3){for(let t=0;t<3;t++){const i=o.getX(e+t);const a=o.getX(e+(t+1)%3);n[0]=Math.min(i,a);n[1]=Math.max(i,a);const s=n[0]+","+n[1];if(r[s]===undefined){r[s]={index1:n[0],index2:n[1]}}}}}for(const e in r){const n=r[e];i.fromBufferAttribute(a,n.index1);t.push(i.x,i.y,i.z);i.fromBufferAttribute(a,n.index2);t.push(i.x,i.y,i.z)}}else{const n=e.attributes.position;for(let e=0,r=n.count/3;e<r;e++){for(let r=0;r<3;r++){const a=3*e+r;i.fromBufferAttribute(n,a);t.push(i.x,i.y,i.z);const o=3*e+(r+1)%3;i.fromBufferAttribute(n,o);t.push(i.x,i.y,i.z)}}}}this.setAttribute("position",new Float32BufferAttribute(t,3))}}function ParametricGeometry(e,t,n){Geometry.call(this);this.type="ParametricGeometry";this.parameters={func:e,slices:t,stacks:n};this.fromBufferGeometry(new ParametricBufferGeometry(e,t,n));this.mergeVertices()}ParametricGeometry.prototype=Object.create(Geometry.prototype);ParametricGeometry.prototype.constructor=ParametricGeometry;function ParametricBufferGeometry(e,t,n){BufferGeometry.call(this);this.type="ParametricBufferGeometry";this.parameters={func:e,slices:t,stacks:n};const r=[];const i=[];const a=[];const o=[];const s=1e-5;const c=new Vector3;const l=new Vector3,u=new Vector3;const h=new Vector3,f=new Vector3;if(e.length<3){console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.")}const d=t+1;for(let r=0;r<=n;r++){const d=r/n;for(let n=0;n<=t;n++){const r=n/t;e(r,d,l);i.push(l.x,l.y,l.z);if(r-s>=0){e(r-s,d,u);h.subVectors(l,u)}else{e(r+s,d,u);h.subVectors(u,l)}if(d-s>=0){e(r,d-s,u);f.subVectors(l,u)}else{e(r,d+s,u);f.subVectors(u,l)}c.crossVectors(h,f).normalize();a.push(c.x,c.y,c.z);o.push(r,d)}}for(let e=0;e<n;e++){for(let n=0;n<t;n++){const t=e*d+n;const i=e*d+n+1;const a=(e+1)*d+n+1;const o=(e+1)*d+n;r.push(t,i,o);r.push(i,a,o)}}this.setIndex(r);this.setAttribute("position",new Float32BufferAttribute(i,3));this.setAttribute("normal",new Float32BufferAttribute(a,3));this.setAttribute("uv",new Float32BufferAttribute(o,2))}ParametricBufferGeometry.prototype=Object.create(BufferGeometry.prototype);ParametricBufferGeometry.prototype.constructor=ParametricBufferGeometry;class PolyhedronGeometry extends Geometry{constructor(e,t,n,r){super();this.type="PolyhedronGeometry";this.parameters={vertices:e,indices:t,radius:n,detail:r};this.fromBufferGeometry(new PolyhedronBufferGeometry(e,t,n,r));this.mergeVertices()}}class PolyhedronBufferGeometry extends BufferGeometry{constructor(e,t,n,r){super();this.type="PolyhedronBufferGeometry";this.parameters={vertices:e,indices:t,radius:n,detail:r};n=n||1;r=r||0;const i=[];const a=[];o(r);c(n);l();this.setAttribute("position",new Float32BufferAttribute(i,3));this.setAttribute("normal",new Float32BufferAttribute(i.slice(),3));this.setAttribute("uv",new Float32BufferAttribute(a,2));if(r===0){this.computeVertexNormals()}else{this.normalizeNormals()}function o(e){const n=new Vector3;const r=new Vector3;const i=new Vector3;for(let a=0;a<t.length;a+=3){f(t[a+0],n);f(t[a+1],r);f(t[a+2],i);s(n,r,i,e)}}function s(e,t,n,r){const i=r+1;const a=[];for(let r=0;r<=i;r++){a[r]=[];const o=e.clone().lerp(n,r/i);const s=t.clone().lerp(n,r/i);const c=i-r;for(let e=0;e<=c;e++){if(e===0&&r===i){a[r][e]=o}else{a[r][e]=o.clone().lerp(s,e/c)}}}for(let e=0;e<i;e++){for(let t=0;t<2*(i-e)-1;t++){const n=Math.floor(t/2);if(t%2===0){h(a[e][n+1]);h(a[e+1][n]);h(a[e][n])}else{h(a[e][n+1]);h(a[e+1][n+1]);h(a[e+1][n])}}}}function c(e){const t=new Vector3;for(let n=0;n<i.length;n+=3){t.x=i[n+0];t.y=i[n+1];t.z=i[n+2];t.normalize().multiplyScalar(e);i[n+0]=t.x;i[n+1]=t.y;i[n+2]=t.z}}function l(){const e=new Vector3;for(let t=0;t<i.length;t+=3){e.x=i[t+0];e.y=i[t+1];e.z=i[t+2];const n=m(e)/2/Math.PI+.5;const r=g(e)/Math.PI+.5;a.push(n,1-r)}d();u()}function u(){for(let e=0;e<a.length;e+=6){const t=a[e+0];const n=a[e+2];const r=a[e+4];const i=Math.max(t,n,r);const o=Math.min(t,n,r);if(i>.9&&o<.1){if(t<.2)a[e+0]+=1;if(n<.2)a[e+2]+=1;if(r<.2)a[e+4]+=1}}}function h(e){i.push(e.x,e.y,e.z)}function f(t,n){const r=t*3;n.x=e[r+0];n.y=e[r+1];n.z=e[r+2]}function d(){const e=new Vector3;const t=new Vector3;const n=new Vector3;const r=new Vector3;const o=new Vector2;const s=new Vector2;const c=new Vector2;for(let l=0,u=0;l<i.length;l+=9,u+=6){e.set(i[l+0],i[l+1],i[l+2]);t.set(i[l+3],i[l+4],i[l+5]);n.set(i[l+6],i[l+7],i[l+8]);o.set(a[u+0],a[u+1]);s.set(a[u+2],a[u+3]);c.set(a[u+4],a[u+5]);r.copy(e).add(t).add(n).divideScalar(3);const h=m(r);p(o,u+0,e,h);p(s,u+2,t,h);p(c,u+4,n,h)}}function p(e,t,n,r){if(r<0&&e.x===1){a[t]=e.x-1}if(n.x===0&&n.z===0){a[t]=r/2/Math.PI+.5}}function m(e){return Math.atan2(e.z,-e.x)}function g(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}}}class TetrahedronGeometry extends Geometry{constructor(e,t){super();this.type="TetrahedronGeometry";this.parameters={radius:e,detail:t};this.fromBufferGeometry(new TetrahedronBufferGeometry(e,t));this.mergeVertices()}}class TetrahedronBufferGeometry extends PolyhedronBufferGeometry{constructor(e,t){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];const r=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,r,e,t);this.type="TetrahedronBufferGeometry";this.parameters={radius:e,detail:t}}}class OctahedronGeometry extends Geometry{constructor(e,t){super();this.type="OctahedronGeometry";this.parameters={radius:e,detail:t};this.fromBufferGeometry(new OctahedronBufferGeometry(e,t));this.mergeVertices()}}class OctahedronBufferGeometry extends PolyhedronBufferGeometry{constructor(e,t){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];const r=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,r,e,t);this.type="OctahedronBufferGeometry";this.parameters={radius:e,detail:t}}}class IcosahedronGeometry extends Geometry{constructor(e,t){super();this.type="IcosahedronGeometry";this.parameters={radius:e,detail:t};this.fromBufferGeometry(new IcosahedronBufferGeometry(e,t));this.mergeVertices()}}class IcosahedronBufferGeometry extends PolyhedronBufferGeometry{constructor(e,t){const n=(1+Math.sqrt(5))/2;const r=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];const i=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(r,i,e,t);this.type="IcosahedronBufferGeometry";this.parameters={radius:e,detail:t}}}class DodecahedronGeometry extends Geometry{constructor(e,t){super();this.type="DodecahedronGeometry";this.parameters={radius:e,detail:t};this.fromBufferGeometry(new DodecahedronBufferGeometry(e,t));this.mergeVertices()}}class DodecahedronBufferGeometry extends PolyhedronBufferGeometry{constructor(e,t){const n=(1+Math.sqrt(5))/2;const r=1/n;const i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r];const a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(i,a,e,t);this.type="DodecahedronBufferGeometry";this.parameters={radius:e,detail:t}}}class TubeGeometry extends Geometry{constructor(e,t,n,r,i,a){super();this.type="TubeGeometry";this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:r,closed:i};if(a!==undefined)console.warn("THREE.TubeGeometry: taper has been removed.");const o=new TubeBufferGeometry(e,t,n,r,i);this.tangents=o.tangents;this.normals=o.normals;this.binormals=o.binormals;this.fromBufferGeometry(o);this.mergeVertices()}}class TubeBufferGeometry extends BufferGeometry{constructor(e,t,n,r,i){super();this.type="TubeBufferGeometry";this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:r,closed:i};t=t||64;n=n||1;r=r||8;i=i||false;const a=e.computeFrenetFrames(t,i);this.tangents=a.tangents;this.normals=a.normals;this.binormals=a.binormals;const o=new Vector3;const s=new Vector3;const c=new Vector2;let l=new Vector3;const u=[];const h=[];const f=[];const d=[];p();this.setIndex(d);this.setAttribute("position",new Float32BufferAttribute(u,3));this.setAttribute("normal",new Float32BufferAttribute(h,3));this.setAttribute("uv",new Float32BufferAttribute(f,2));function p(){for(let e=0;e<t;e++){m(e)}m(i===false?t:0);y();g()}function m(i){l=e.getPointAt(i/t,l);const c=a.normals[i];const f=a.binormals[i];for(let e=0;e<=r;e++){const t=e/r*Math.PI*2;const i=Math.sin(t);const a=-Math.cos(t);s.x=a*c.x+i*f.x;s.y=a*c.y+i*f.y;s.z=a*c.z+i*f.z;s.normalize();h.push(s.x,s.y,s.z);o.x=l.x+n*s.x;o.y=l.y+n*s.y;o.z=l.z+n*s.z;u.push(o.x,o.y,o.z)}}function g(){for(let e=1;e<=t;e++){for(let t=1;t<=r;t++){const n=(r+1)*(e-1)+(t-1);const i=(r+1)*e+(t-1);const a=(r+1)*e+t;const o=(r+1)*(e-1)+t;d.push(n,i,o);d.push(i,a,o)}}}function y(){for(let e=0;e<=t;e++){for(let n=0;n<=r;n++){c.x=e/t;c.y=n/r;f.push(c.x,c.y)}}}}toJSON(){const e=BufferGeometry.prototype.toJSON.call(this);e.path=this.parameters.path.toJSON();return e}}class TorusKnotGeometry extends Geometry{constructor(e,t,n,r,i,a,o){super();this.type="TorusKnotGeometry";this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:r,p:i,q:a};if(o!==undefined)console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");this.fromBufferGeometry(new TorusKnotBufferGeometry(e,t,n,r,i,a));this.mergeVertices()}}class TorusKnotBufferGeometry extends BufferGeometry{constructor(e,t,n,r,i,a){super();this.type="TorusKnotBufferGeometry";this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:r,p:i,q:a};e=e||1;t=t||.4;n=Math.floor(n)||64;r=Math.floor(r)||8;i=i||2;a=a||3;const o=[];const s=[];const c=[];const l=[];const u=new Vector3;const h=new Vector3;const f=new Vector3;const d=new Vector3;const p=new Vector3;const m=new Vector3;const g=new Vector3;for(let o=0;o<=n;++o){const v=o/n*i*Math.PI*2;y(v,i,a,e,f);y(v+.01,i,a,e,d);m.subVectors(d,f);g.addVectors(d,f);p.crossVectors(m,g);g.crossVectors(p,m);p.normalize();g.normalize();for(let e=0;e<=r;++e){const i=e/r*Math.PI*2;const a=-t*Math.cos(i);const d=t*Math.sin(i);u.x=f.x+(a*g.x+d*p.x);u.y=f.y+(a*g.y+d*p.y);u.z=f.z+(a*g.z+d*p.z);s.push(u.x,u.y,u.z);h.subVectors(u,f).normalize();c.push(h.x,h.y,h.z);l.push(o/n);l.push(e/r)}}for(let e=1;e<=n;e++){for(let t=1;t<=r;t++){const n=(r+1)*(e-1)+(t-1);const i=(r+1)*e+(t-1);const a=(r+1)*e+t;const s=(r+1)*(e-1)+t;o.push(n,i,s);o.push(i,a,s)}}this.setIndex(o);this.setAttribute("position",new Float32BufferAttribute(s,3));this.setAttribute("normal",new Float32BufferAttribute(c,3));this.setAttribute("uv",new Float32BufferAttribute(l,2));function y(e,t,n,r,i){const a=Math.cos(e);const o=Math.sin(e);const s=n/t*e;const c=Math.cos(s);i.x=r*(2+c)*.5*a;i.y=r*(2+c)*o*.5;i.z=r*Math.sin(s)*.5}}}class TorusGeometry extends Geometry{constructor(e,t,n,r,i){super();this.type="TorusGeometry";this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:r,arc:i};this.fromBufferGeometry(new TorusBufferGeometry(e,t,n,r,i));this.mergeVertices()}}class TorusBufferGeometry extends BufferGeometry{constructor(e,t,n,r,i){super();this.type="TorusBufferGeometry";this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:r,arc:i};e=e||1;t=t||.4;n=Math.floor(n)||8;r=Math.floor(r)||6;i=i||Math.PI*2;const a=[];const o=[];const s=[];const c=[];const l=new Vector3;const u=new Vector3;const h=new Vector3;for(let a=0;a<=n;a++){for(let f=0;f<=r;f++){const d=f/r*i;const p=a/n*Math.PI*2;u.x=(e+t*Math.cos(p))*Math.cos(d);u.y=(e+t*Math.cos(p))*Math.sin(d);u.z=t*Math.sin(p);o.push(u.x,u.y,u.z);l.x=e*Math.cos(d);l.y=e*Math.sin(d);h.subVectors(u,l).normalize();s.push(h.x,h.y,h.z);c.push(f/r);c.push(a/n)}}for(let e=1;e<=n;e++){for(let t=1;t<=r;t++){const n=(r+1)*e+t-1;const i=(r+1)*(e-1)+t-1;const o=(r+1)*(e-1)+t;const s=(r+1)*e+t;a.push(n,i,s);a.push(i,o,s)}}this.setIndex(a);this.setAttribute("position",new Float32BufferAttribute(o,3));this.setAttribute("normal",new Float32BufferAttribute(s,3));this.setAttribute("uv",new Float32BufferAttribute(c,2))}}const Earcut={triangulate:function(e,t,n){n=n||2;const r=t&&t.length;const i=r?t[0]*n:e.length;let a=linkedList(e,0,i,n,true);const o=[];if(!a||a.next===a.prev)return o;let s,c,l,u,h,f,d;if(r)a=eliminateHoles(e,t,a,n);if(e.length>80*n){s=l=e[0];c=u=e[1];for(let t=n;t<i;t+=n){h=e[t];f=e[t+1];if(h<s)s=h;if(f<c)c=f;if(h>l)l=h;if(f>u)u=f}d=Math.max(l-s,u-c);d=d!==0?1/d:0}earcutLinked(a,o,n,s,c,d);return o}};function linkedList(e,t,n,r,i){let a,o;if(i===signedArea(e,t,n,r)>0){for(a=t;a<n;a+=r)o=insertNode(a,e[a],e[a+1],o)}else{for(a=n-r;a>=t;a-=r)o=insertNode(a,e[a],e[a+1],o)}if(o&&equals(o,o.next)){removeNode(o);o=o.next}return o}function filterPoints(e,t){if(!e)return e;if(!t)t=e;let n=e,r;do{r=false;if(!n.steiner&&(equals(n,n.next)||area(n.prev,n,n.next)===0)){removeNode(n);n=t=n.prev;if(n===n.next)break;r=true}else{n=n.next}}while(r||n!==t);return t}function earcutLinked(e,t,n,r,i,a,o){if(!e)return;if(!o&&a)indexCurve(e,r,i,a);let s=e,c,l;while(e.prev!==e.next){c=e.prev;l=e.next;if(a?isEarHashed(e,r,i,a):isEar(e)){t.push(c.i/n);t.push(e.i/n);t.push(l.i/n);removeNode(e);e=l.next;s=l.next;continue}e=l;if(e===s){if(!o){earcutLinked(filterPoints(e),t,n,r,i,a,1)}else if(o===1){e=cureLocalIntersections(filterPoints(e),t,n);earcutLinked(e,t,n,r,i,a,2)}else if(o===2){splitEarcut(e,t,n,r,i,a)}break}}}function isEar(e){const t=e.prev,n=e,r=e.next;if(area(t,n,r)>=0)return false;let i=e.next.next;while(i!==e.prev){if(pointInTriangle(t.x,t.y,n.x,n.y,r.x,r.y,i.x,i.y)&&area(i.prev,i,i.next)>=0)return false;i=i.next}return true}function isEarHashed(e,t,n,r){const i=e.prev,a=e,o=e.next;if(area(i,a,o)>=0)return false;const s=i.x<a.x?i.x<o.x?i.x:o.x:a.x<o.x?a.x:o.x,c=i.y<a.y?i.y<o.y?i.y:o.y:a.y<o.y?a.y:o.y,l=i.x>a.x?i.x>o.x?i.x:o.x:a.x>o.x?a.x:o.x,u=i.y>a.y?i.y>o.y?i.y:o.y:a.y>o.y?a.y:o.y;const h=zOrder(s,c,t,n,r),f=zOrder(l,u,t,n,r);let d=e.prevZ,p=e.nextZ;while(d&&d.z>=h&&p&&p.z<=f){if(d!==e.prev&&d!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,o.x,o.y,d.x,d.y)&&area(d.prev,d,d.next)>=0)return false;d=d.prevZ;if(p!==e.prev&&p!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.nextZ}while(d&&d.z>=h){if(d!==e.prev&&d!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,o.x,o.y,d.x,d.y)&&area(d.prev,d,d.next)>=0)return false;d=d.prevZ}while(p&&p.z<=f){if(p!==e.prev&&p!==e.next&&pointInTriangle(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.nextZ}return true}function cureLocalIntersections(e,t,n){let r=e;do{const i=r.prev,a=r.next.next;if(!equals(i,a)&&intersects(i,r,r.next,a)&&locallyInside(i,a)&&locallyInside(a,i)){t.push(i.i/n);t.push(r.i/n);t.push(a.i/n);removeNode(r);removeNode(r.next);r=e=a}r=r.next}while(r!==e);return filterPoints(r)}function splitEarcut(e,t,n,r,i,a){let o=e;do{let e=o.next.next;while(e!==o.prev){if(o.i!==e.i&&isValidDiagonal(o,e)){let s=splitPolygon(o,e);o=filterPoints(o,o.next);s=filterPoints(s,s.next);earcutLinked(o,t,n,r,i,a);earcutLinked(s,t,n,r,i,a);return}e=e.next}o=o.next}while(o!==e)}function eliminateHoles(e,t,n,r){const i=[];let a,o,s,c,l;for(a=0,o=t.length;a<o;a++){s=t[a]*r;c=a<o-1?t[a+1]*r:e.length;l=linkedList(e,s,c,r,false);if(l===l.next)l.steiner=true;i.push(getLeftmost(l))}i.sort(compareX);for(a=0;a<i.length;a++){eliminateHole(i[a],n);n=filterPoints(n,n.next)}return n}function compareX(e,t){return e.x-t.x}function eliminateHole(e,t){t=findHoleBridge(e,t);if(t){const n=splitPolygon(t,e);filterPoints(t,t.next);filterPoints(n,n.next)}}function findHoleBridge(e,t){let n=t;const r=e.x;const i=e.y;let a=-Infinity,o;do{if(i<=n.y&&i>=n.next.y&&n.next.y!==n.y){const e=n.x+(i-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(e<=r&&e>a){a=e;if(e===r){if(i===n.y)return n;if(i===n.next.y)return n.next}o=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!o)return null;if(r===a)return o;const s=o,c=o.x,l=o.y;let u=Infinity,h;n=o;do{if(r>=n.x&&n.x>=c&&r!==n.x&&pointInTriangle(i<l?r:a,i,c,l,i<l?a:r,i,n.x,n.y)){h=Math.abs(i-n.y)/(r-n.x);if(locallyInside(n,e)&&(h<u||h===u&&(n.x>o.x||n.x===o.x&&sectorContainsSector(o,n)))){o=n;u=h}}n=n.next}while(n!==s);return o}function sectorContainsSector(e,t){return area(e.prev,e,t.prev)<0&&area(t.next,e,e.next)<0}function indexCurve(e,t,n,r){let i=e;do{if(i.z===null)i.z=zOrder(i.x,i.y,t,n,r);i.prevZ=i.prev;i.nextZ=i.next;i=i.next}while(i!==e);i.prevZ.nextZ=null;i.prevZ=null;sortLinked(i)}function sortLinked(e){let t,n,r,i,a,o,s,c,l=1;do{n=e;e=null;a=null;o=0;while(n){o++;r=n;s=0;for(t=0;t<l;t++){s++;r=r.nextZ;if(!r)break}c=l;while(s>0||c>0&&r){if(s!==0&&(c===0||!r||n.z<=r.z)){i=n;n=n.nextZ;s--}else{i=r;r=r.nextZ;c--}if(a)a.nextZ=i;else e=i;i.prevZ=a;a=i}n=r}a.nextZ=null;l*=2}while(o>1);return e}function zOrder(e,t,n,r,i){e=32767*(e-n)*i;t=32767*(t-r)*i;e=(e|e<<8)&16711935;e=(e|e<<4)&252645135;e=(e|e<<2)&858993459;e=(e|e<<1)&1431655765;t=(t|t<<8)&16711935;t=(t|t<<4)&252645135;t=(t|t<<2)&858993459;t=(t|t<<1)&1431655765;return e|t<<1}function getLeftmost(e){let t=e,n=e;do{if(t.x<n.x||t.x===n.x&&t.y<n.y)n=t;t=t.next}while(t!==e);return n}function pointInTriangle(e,t,n,r,i,a,o,s){return(i-o)*(t-s)-(e-o)*(a-s)>=0&&(e-o)*(r-s)-(n-o)*(t-s)>=0&&(n-o)*(a-s)-(i-o)*(r-s)>=0}function isValidDiagonal(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!intersectsPolygon(e,t)&&(locallyInside(e,t)&&locallyInside(t,e)&&middleInside(e,t)&&(area(e.prev,e,t.prev)||area(e,t.prev,t))||equals(e,t)&&area(e.prev,e,e.next)>0&&area(t.prev,t,t.next)>0)}function area(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function equals(e,t){return e.x===t.x&&e.y===t.y}function intersects(e,t,n,r){const i=sign(area(e,t,n));const a=sign(area(e,t,r));const o=sign(area(n,r,e));const s=sign(area(n,r,t));if(i!==a&&o!==s)return true;if(i===0&&onSegment(e,n,t))return true;if(a===0&&onSegment(e,r,t))return true;if(o===0&&onSegment(n,e,r))return true;if(s===0&&onSegment(n,t,r))return true;return false}function onSegment(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function sign(e){return e>0?1:e<0?-1:0}function intersectsPolygon(e,t){let n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&intersects(n,n.next,e,t))return true;n=n.next}while(n!==e);return false}function locallyInside(e,t){return area(e.prev,e,e.next)<0?area(e,t,e.next)>=0&&area(e,e.prev,t)>=0:area(e,t,e.prev)<0||area(e,e.next,t)<0}function middleInside(e,t){let n=e,r=false;const i=(e.x+t.x)/2,a=(e.y+t.y)/2;do{if(n.y>a!==n.next.y>a&&n.next.y!==n.y&&i<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x)r=!r;n=n.next}while(n!==e);return r}function splitPolygon(e,t){const n=new Node(e.i,e.x,e.y),r=new Node(t.i,t.x,t.y),i=e.next,a=t.prev;e.next=t;t.prev=e;n.next=i;i.prev=n;r.next=n;n.prev=r;a.next=r;r.prev=a;return r}function insertNode(e,t,n,r){const i=new Node(e,t,n);if(!r){i.prev=i;i.next=i}else{i.next=r.next;i.prev=r;r.next.prev=i;r.next=i}return i}function removeNode(e){e.next.prev=e.prev;e.prev.next=e.next;if(e.prevZ)e.prevZ.nextZ=e.nextZ;if(e.nextZ)e.nextZ.prevZ=e.prevZ}function Node(e,t,n){this.i=e;this.x=t;this.y=n;this.prev=null;this.next=null;this.z=null;this.prevZ=null;this.nextZ=null;this.steiner=false}function signedArea(e,t,n,r){let i=0;for(let a=t,o=n-r;a<n;a+=r){i+=(e[o]-e[a])*(e[a+1]+e[o+1]);o=a}return i}const ShapeUtils={area:function(e){const t=e.length;let n=0;for(let r=t-1,i=0;i<t;r=i++){n+=e[r].x*e[i].y-e[i].x*e[r].y}return n*.5},isClockWise:function(e){return ShapeUtils.area(e)<0},triangulateShape:function(e,t){const n=[];const r=[];const i=[];removeDupEndPts(e);addContour(n,e);let a=e.length;t.forEach(removeDupEndPts);for(let e=0;e<t.length;e++){r.push(a);a+=t[e].length;addContour(n,t[e])}const o=Earcut.triangulate(n,r);for(let e=0;e<o.length;e+=3){i.push(o.slice(e,e+3))}return i}};function removeDupEndPts(e){const t=e.length;if(t>2&&e[t-1].equals(e[0])){e.pop()}}function addContour(e,t){for(let n=0;n<t.length;n++){e.push(t[n].x);e.push(t[n].y)}}class ExtrudeGeometry extends Geometry{constructor(e,t){super();this.type="ExtrudeGeometry";this.parameters={shapes:e,options:t};this.fromBufferGeometry(new ExtrudeBufferGeometry(e,t));this.mergeVertices()}toJSON(){const e=super.toJSON();const t=this.parameters.shapes;const n=this.parameters.options;return toJSON(t,n,e)}}class ExtrudeBufferGeometry extends BufferGeometry{constructor(e,t){super();this.type="ExtrudeBufferGeometry";this.parameters={shapes:e,options:t};e=Array.isArray(e)?e:[e];const n=this;const r=[];const i=[];for(let t=0,n=e.length;t<n;t++){const n=e[t];a(n)}this.setAttribute("position",new Float32BufferAttribute(r,3));this.setAttribute("uv",new Float32BufferAttribute(i,2));this.computeVertexNormals();function a(e){const a=[];const o=t.curveSegments!==undefined?t.curveSegments:12;const s=t.steps!==undefined?t.steps:1;let c=t.depth!==undefined?t.depth:100;let l=t.bevelEnabled!==undefined?t.bevelEnabled:true;let u=t.bevelThickness!==undefined?t.bevelThickness:6;let h=t.bevelSize!==undefined?t.bevelSize:u-2;let f=t.bevelOffset!==undefined?t.bevelOffset:0;let d=t.bevelSegments!==undefined?t.bevelSegments:3;const p=t.extrudePath;const m=t.UVGenerator!==undefined?t.UVGenerator:WorldUVGenerator;if(t.amount!==undefined){console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");c=t.amount}let g,y=false;let v,_,x,b;if(p){g=p.getSpacedPoints(s);y=true;l=false;v=p.computeFrenetFrames(s,false);_=new Vector3;x=new Vector3;b=new Vector3}if(!l){d=0;u=0;h=0;f=0}const M=e.extractPoints(o);let w=M.shape;const S=M.holes;const T=!ShapeUtils.isClockWise(w);if(T){w=w.reverse();for(let e=0,t=S.length;e<t;e++){const t=S[e];if(ShapeUtils.isClockWise(t)){S[e]=t.reverse()}}}const E=ShapeUtils.triangulateShape(w,S);const A=w;for(let e=0,t=S.length;e<t;e++){const t=S[e];w=w.concat(t)}function L(e,t,n){if(!t)console.error("THREE.ExtrudeGeometry: vec does not exist");return t.clone().multiplyScalar(n).add(e)}const C=w.length,R=E.length;function P(e,t,n){let r,i,a;const o=e.x-t.x,s=e.y-t.y;const c=n.x-e.x,l=n.y-e.y;const u=o*o+s*s;const h=o*l-s*c;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(u);const f=Math.sqrt(c*c+l*l);const d=t.x-s/h;const p=t.y+o/h;const m=n.x-l/f;const g=n.y+c/f;const y=((m-d)*l-(g-p)*c)/(o*l-s*c);r=d+o*y-e.x;i=p+s*y-e.y;const v=r*r+i*i;if(v<=2){return new Vector2(r,i)}else{a=Math.sqrt(v/2)}}else{let e=false;if(o>Number.EPSILON){if(c>Number.EPSILON){e=true}}else{if(o<-Number.EPSILON){if(c<-Number.EPSILON){e=true}}else{if(Math.sign(s)===Math.sign(l)){e=true}}}if(e){r=-s;i=o;a=Math.sqrt(u)}else{r=o;i=s;a=Math.sqrt(u/2)}}return new Vector2(r/a,i/a)}const B=[];for(let e=0,t=A.length,n=t-1,r=e+1;e<t;e++,n++,r++){if(n===t)n=0;if(r===t)r=0;B[e]=P(A[e],A[n],A[r])}const D=[];let G,I=B.concat();for(let e=0,t=S.length;e<t;e++){const t=S[e];G=[];for(let e=0,n=t.length,r=n-1,i=e+1;e<n;e++,r++,i++){if(r===n)r=0;if(i===n)i=0;G[e]=P(t[e],t[r],t[i])}D.push(G);I=I.concat(G)}for(let e=0;e<d;e++){const t=e/d;const n=u*Math.cos(t*Math.PI/2);const r=h*Math.sin(t*Math.PI/2)+f;for(let e=0,t=A.length;e<t;e++){const t=L(A[e],B[e],r);V(t.x,t.y,-n)}for(let e=0,t=S.length;e<t;e++){const t=S[e];G=D[e];for(let e=0,i=t.length;e<i;e++){const i=L(t[e],G[e],r);V(i.x,i.y,-n)}}}const O=h+f;for(let e=0;e<C;e++){const t=l?L(w[e],I[e],O):w[e];if(!y){V(t.x,t.y,0)}else{x.copy(v.normals[0]).multiplyScalar(t.x);_.copy(v.binormals[0]).multiplyScalar(t.y);b.copy(g[0]).add(x).add(_);V(b.x,b.y,b.z)}}for(let e=1;e<=s;e++){for(let t=0;t<C;t++){const n=l?L(w[t],I[t],O):w[t];if(!y){V(n.x,n.y,c/s*e)}else{x.copy(v.normals[e]).multiplyScalar(n.x);_.copy(v.binormals[e]).multiplyScalar(n.y);b.copy(g[e]).add(x).add(_);V(b.x,b.y,b.z)}}}for(let e=d-1;e>=0;e--){const t=e/d;const n=u*Math.cos(t*Math.PI/2);const r=h*Math.sin(t*Math.PI/2)+f;for(let e=0,t=A.length;e<t;e++){const t=L(A[e],B[e],r);V(t.x,t.y,c+n)}for(let e=0,t=S.length;e<t;e++){const t=S[e];G=D[e];for(let e=0,i=t.length;e<i;e++){const i=L(t[e],G[e],r);if(!y){V(i.x,i.y,c+n)}else{V(i.x,i.y+g[s-1].y,g[s-1].x+n)}}}}F();N();function F(){const e=r.length/3;if(l){let e=0;let t=C*e;for(let e=0;e<R;e++){const n=E[e];z(n[2]+t,n[1]+t,n[0]+t)}e=s+d*2;t=C*e;for(let e=0;e<R;e++){const n=E[e];z(n[0]+t,n[1]+t,n[2]+t)}}else{for(let e=0;e<R;e++){const t=E[e];z(t[2],t[1],t[0])}for(let e=0;e<R;e++){const t=E[e];z(t[0]+C*s,t[1]+C*s,t[2]+C*s)}}n.addGroup(e,r.length/3-e,0)}function N(){const e=r.length/3;let t=0;U(A,t);t+=A.length;for(let e=0,n=S.length;e<n;e++){const n=S[e];U(n,t);t+=n.length}n.addGroup(e,r.length/3-e,1)}function U(e,t){let n=e.length;while(--n>=0){const r=n;let i=n-1;if(i<0)i=e.length-1;for(let e=0,n=s+d*2;e<n;e++){const n=C*e;const a=C*(e+1);const o=t+r+n,s=t+i+n,c=t+i+a,l=t+r+a;H(o,s,c,l)}}}function V(e,t,n){a.push(e);a.push(t);a.push(n)}function z(e,t,i){k(e);k(t);k(i);const a=r.length/3;const o=m.generateTopUV(n,r,a-3,a-2,a-1);W(o[0]);W(o[1]);W(o[2])}function H(e,t,i,a){k(e);k(t);k(a);k(t);k(i);k(a);const o=r.length/3;const s=m.generateSideWallUV(n,r,o-6,o-3,o-2,o-1);W(s[0]);W(s[1]);W(s[3]);W(s[1]);W(s[2]);W(s[3])}function k(e){r.push(a[e*3+0]);r.push(a[e*3+1]);r.push(a[e*3+2])}function W(e){i.push(e.x);i.push(e.y)}}}toJSON(){const e=BufferGeometry.prototype.toJSON.call(this);const t=this.parameters.shapes;const n=this.parameters.options;return toJSON(t,n,e)}}const WorldUVGenerator={generateTopUV:function(e,t,n,r,i){const a=t[n*3];const o=t[n*3+1];const s=t[r*3];const c=t[r*3+1];const l=t[i*3];const u=t[i*3+1];return[new Vector2(a,o),new Vector2(s,c),new Vector2(l,u)]},generateSideWallUV:function(e,t,n,r,i,a){const o=t[n*3];const s=t[n*3+1];const c=t[n*3+2];const l=t[r*3];const u=t[r*3+1];const h=t[r*3+2];const f=t[i*3];const d=t[i*3+1];const p=t[i*3+2];const m=t[a*3];const g=t[a*3+1];const y=t[a*3+2];if(Math.abs(s-u)<.01){return[new Vector2(o,1-c),new Vector2(l,1-h),new Vector2(f,1-p),new Vector2(m,1-y)]}else{return[new Vector2(s,1-c),new Vector2(u,1-h),new Vector2(d,1-p),new Vector2(g,1-y)]}}};function toJSON(e,t,n){n.shapes=[];if(Array.isArray(e)){for(let t=0,r=e.length;t<r;t++){const r=e[t];n.shapes.push(r.uuid)}}else{n.shapes.push(e.uuid)}if(t.extrudePath!==undefined)n.options.extrudePath=t.extrudePath.toJSON();return n}class TextGeometry extends Geometry{constructor(e,t){super();this.type="TextGeometry";this.parameters={text:e,parameters:t};this.fromBufferGeometry(new TextBufferGeometry(e,t));this.mergeVertices()}}class TextBufferGeometry extends ExtrudeBufferGeometry{constructor(e,t){t=t||{};const n=t.font;if(!(n&&n.isFont)){console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font.");return new Geometry}const r=n.generateShapes(e,t.size);t.depth=t.height!==undefined?t.height:50;if(t.bevelThickness===undefined)t.bevelThickness=10;if(t.bevelSize===undefined)t.bevelSize=8;if(t.bevelEnabled===undefined)t.bevelEnabled=false;super(r,t);this.type="TextBufferGeometry"}}class SphereGeometry extends Geometry{constructor(e,t,n,r,i,a,o){super();this.type="SphereGeometry";this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:r,phiLength:i,thetaStart:a,thetaLength:o};this.fromBufferGeometry(new SphereBufferGeometry(e,t,n,r,i,a,o));this.mergeVertices()}}class SphereBufferGeometry extends BufferGeometry{constructor(e,t,n,r,i,a,o){super();this.type="SphereBufferGeometry";this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:r,phiLength:i,thetaStart:a,thetaLength:o};e=e||1;t=Math.max(3,Math.floor(t)||8);n=Math.max(2,Math.floor(n)||6);r=r!==undefined?r:0;i=i!==undefined?i:Math.PI*2;a=a!==undefined?a:0;o=o!==undefined?o:Math.PI;const s=Math.min(a+o,Math.PI);let c=0;const l=[];const u=new Vector3;const h=new Vector3;const f=[];const d=[];const p=[];const m=[];for(let f=0;f<=n;f++){const g=[];const y=f/n;let v=0;if(f==0&&a==0){v=.5/t}else if(f==n&&s==Math.PI){v=-.5/t}for(let n=0;n<=t;n++){const s=n/t;u.x=-e*Math.cos(r+s*i)*Math.sin(a+y*o);u.y=e*Math.cos(a+y*o);u.z=e*Math.sin(r+s*i)*Math.sin(a+y*o);d.push(u.x,u.y,u.z);h.copy(u).normalize();p.push(h.x,h.y,h.z);m.push(s+v,1-y);g.push(c++)}l.push(g)}for(let e=0;e<n;e++){for(let r=0;r<t;r++){const t=l[e][r+1];const i=l[e][r];const o=l[e+1][r];const c=l[e+1][r+1];if(e!==0||a>0)f.push(t,i,c);if(e!==n-1||s<Math.PI)f.push(i,o,c)}}this.setIndex(f);this.setAttribute("position",new Float32BufferAttribute(d,3));this.setAttribute("normal",new Float32BufferAttribute(p,3));this.setAttribute("uv",new Float32BufferAttribute(m,2))}}class RingGeometry extends Geometry{constructor(e,t,n,r,i,a){super();this.type="RingGeometry";this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:a};this.fromBufferGeometry(new RingBufferGeometry(e,t,n,r,i,a));this.mergeVertices()}}class RingBufferGeometry extends BufferGeometry{constructor(e,t,n,r,i,a){super();this.type="RingBufferGeometry";this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:a};e=e||.5;t=t||1;i=i!==undefined?i:0;a=a!==undefined?a:Math.PI*2;n=n!==undefined?Math.max(3,n):8;r=r!==undefined?Math.max(1,r):1;const o=[];const s=[];const c=[];const l=[];let u=e;const h=(t-e)/r;const f=new Vector3;const d=new Vector2;for(let e=0;e<=r;e++){for(let e=0;e<=n;e++){const r=i+e/n*a;f.x=u*Math.cos(r);f.y=u*Math.sin(r);s.push(f.x,f.y,f.z);c.push(0,0,1);d.x=(f.x/t+1)/2;d.y=(f.y/t+1)/2;l.push(d.x,d.y)}u+=h}for(let e=0;e<r;e++){const t=e*(n+1);for(let e=0;e<n;e++){const r=e+t;const i=r;const a=r+n+1;const s=r+n+2;const c=r+1;o.push(i,a,c);o.push(a,s,c)}}this.setIndex(o);this.setAttribute("position",new Float32BufferAttribute(s,3));this.setAttribute("normal",new Float32BufferAttribute(c,3));this.setAttribute("uv",new Float32BufferAttribute(l,2))}}class LatheGeometry extends Geometry{constructor(e,t,n,r){super();this.type="LatheGeometry";this.parameters={points:e,segments:t,phiStart:n,phiLength:r};this.fromBufferGeometry(new LatheBufferGeometry(e,t,n,r));this.mergeVertices()}}class LatheBufferGeometry extends BufferGeometry{constructor(e,t,n,r){super();this.type="LatheBufferGeometry";this.parameters={points:e,segments:t,phiStart:n,phiLength:r};t=Math.floor(t)||12;n=n||0;r=r||Math.PI*2;r=MathUtils.clamp(r,0,Math.PI*2);const i=[];const a=[];const o=[];const s=1/t;const c=new Vector3;const l=new Vector2;for(let i=0;i<=t;i++){const u=n+i*s*r;const h=Math.sin(u);const f=Math.cos(u);for(let n=0;n<=e.length-1;n++){c.x=e[n].x*h;c.y=e[n].y;c.z=e[n].x*f;a.push(c.x,c.y,c.z);l.x=i/t;l.y=n/(e.length-1);o.push(l.x,l.y)}}for(let n=0;n<t;n++){for(let t=0;t<e.length-1;t++){const r=t+n*e.length;const a=r;const o=r+e.length;const s=r+e.length+1;const c=r+1;i.push(a,o,c);i.push(o,s,c)}}this.setIndex(i);this.setAttribute("position",new Float32BufferAttribute(a,3));this.setAttribute("uv",new Float32BufferAttribute(o,2));this.computeVertexNormals();if(r===Math.PI*2){const n=this.attributes.normal.array;const r=new Vector3;const i=new Vector3;const a=new Vector3;const o=t*e.length*3;for(let t=0,s=0;t<e.length;t++,s+=3){r.x=n[s+0];r.y=n[s+1];r.z=n[s+2];i.x=n[o+s+0];i.y=n[o+s+1];i.z=n[o+s+2];a.addVectors(r,i).normalize();n[s+0]=n[o+s+0]=a.x;n[s+1]=n[o+s+1]=a.y;n[s+2]=n[o+s+2]=a.z}}}}class ShapeGeometry extends Geometry{constructor(e,t){super();this.type="ShapeGeometry";if(typeof t==="object"){console.warn("THREE.ShapeGeometry: Options parameter has been removed.");t=t.curveSegments}this.parameters={shapes:e,curveSegments:t};this.fromBufferGeometry(new ShapeBufferGeometry(e,t));this.mergeVertices()}toJSON(){const e=Geometry.prototype.toJSON.call(this);const t=this.parameters.shapes;return toJSON$1(t,e)}}class ShapeBufferGeometry extends BufferGeometry{constructor(e,t){super();this.type="ShapeBufferGeometry";this.parameters={shapes:e,curveSegments:t};t=t||12;const n=[];const r=[];const i=[];const a=[];let o=0;let s=0;if(Array.isArray(e)===false){c(e)}else{for(let t=0;t<e.length;t++){c(e[t]);this.addGroup(o,s,t);o+=s;s=0}}this.setIndex(n);this.setAttribute("position",new Float32BufferAttribute(r,3));this.setAttribute("normal",new Float32BufferAttribute(i,3));this.setAttribute("uv",new Float32BufferAttribute(a,2));function c(e){const o=r.length/3;const c=e.extractPoints(t);let l=c.shape;const u=c.holes;if(ShapeUtils.isClockWise(l)===false){l=l.reverse()}for(let e=0,t=u.length;e<t;e++){const t=u[e];if(ShapeUtils.isClockWise(t)===true){u[e]=t.reverse()}}const h=ShapeUtils.triangulateShape(l,u);for(let e=0,t=u.length;e<t;e++){const t=u[e];l=l.concat(t)}for(let e=0,t=l.length;e<t;e++){const t=l[e];r.push(t.x,t.y,0);i.push(0,0,1);a.push(t.x,t.y)}for(let e=0,t=h.length;e<t;e++){const t=h[e];const r=t[0]+o;const i=t[1]+o;const a=t[2]+o;n.push(r,i,a);s+=3}}}toJSON(){const e=BufferGeometry.prototype.toJSON.call(this);const t=this.parameters.shapes;return toJSON$1(t,e)}}function toJSON$1(e,t){t.shapes=[];if(Array.isArray(e)){for(let n=0,r=e.length;n<r;n++){const r=e[n];t.shapes.push(r.uuid)}}else{t.shapes.push(e.uuid)}return t}class EdgesGeometry extends BufferGeometry{constructor(e,t){super();this.type="EdgesGeometry";this.parameters={thresholdAngle:t};t=t!==undefined?t:1;const n=[];const r=Math.cos(MathUtils.DEG2RAD*t);const i=[0,0],a={};let o,s,c;const l=["a","b","c"];let u;if(e.isBufferGeometry){u=new Geometry;u.fromBufferGeometry(e)}else{u=e.clone()}u.mergeVertices();u.computeFaceNormals();const h=u.vertices;const f=u.faces;for(let e=0,t=f.length;e<t;e++){const t=f[e];for(let n=0;n<3;n++){o=t[l[n]];s=t[l[(n+1)%3]];i[0]=Math.min(o,s);i[1]=Math.max(o,s);c=i[0]+","+i[1];if(a[c]===undefined){a[c]={index1:i[0],index2:i[1],face1:e,face2:undefined}}else{a[c].face2=e}}}for(c in a){const e=a[c];if(e.face2===undefined||f[e.face1].normal.dot(f[e.face2].normal)<=r){let t=h[e.index1];n.push(t.x,t.y,t.z);t=h[e.index2];n.push(t.x,t.y,t.z)}}this.setAttribute("position",new Float32BufferAttribute(n,3))}}class CylinderGeometry extends Geometry{constructor(e,t,n,r,i,a,o,s){super();this.type="CylinderGeometry";this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:r,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};this.fromBufferGeometry(new CylinderBufferGeometry(e,t,n,r,i,a,o,s));this.mergeVertices()}}class CylinderBufferGeometry extends BufferGeometry{constructor(e,t,n,r,i,a,o,s){super();this.type="CylinderBufferGeometry";this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:r,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};const c=this;e=e!==undefined?e:1;t=t!==undefined?t:1;n=n||1;r=Math.floor(r)||8;i=Math.floor(i)||1;a=a!==undefined?a:false;o=o!==undefined?o:0;s=s!==undefined?s:Math.PI*2;const l=[];const u=[];const h=[];const f=[];let d=0;const p=[];const m=n/2;let g=0;y();if(a===false){if(e>0)v(true);if(t>0)v(false)}this.setIndex(l);this.setAttribute("position",new Float32BufferAttribute(u,3));this.setAttribute("normal",new Float32BufferAttribute(h,3));this.setAttribute("uv",new Float32BufferAttribute(f,2));function y(){const a=new Vector3;const y=new Vector3;let v=0;const _=(t-e)/n;for(let c=0;c<=i;c++){const l=[];const g=c/i;const v=g*(t-e)+e;for(let e=0;e<=r;e++){const t=e/r;const i=t*s+o;const c=Math.sin(i);const p=Math.cos(i);y.x=v*c;y.y=-g*n+m;y.z=v*p;u.push(y.x,y.y,y.z);a.set(c,_,p).normalize();h.push(a.x,a.y,a.z);f.push(t,1-g);l.push(d++)}p.push(l)}for(let e=0;e<r;e++){for(let t=0;t<i;t++){const n=p[t][e];const r=p[t+1][e];const i=p[t+1][e+1];const a=p[t][e+1];l.push(n,r,a);l.push(r,i,a);v+=6}}c.addGroup(g,v,0);g+=v}function v(n){const i=d;const a=new Vector2;const p=new Vector3;let y=0;const v=n===true?e:t;const _=n===true?1:-1;for(let e=1;e<=r;e++){u.push(0,m*_,0);h.push(0,_,0);f.push(.5,.5);d++}const x=d;for(let e=0;e<=r;e++){const t=e/r;const n=t*s+o;const i=Math.cos(n);const c=Math.sin(n);p.x=v*c;p.y=m*_;p.z=v*i;u.push(p.x,p.y,p.z);h.push(0,_,0);a.x=i*.5+.5;a.y=c*.5*_+.5;f.push(a.x,a.y);d++}for(let e=0;e<r;e++){const t=i+e;const r=x+e;if(n===true){l.push(r,r+1,t)}else{l.push(r+1,r,t)}y+=3}c.addGroup(g,y,n===true?1:2);g+=y}}}class ConeGeometry extends CylinderGeometry{constructor(e,t,n,r,i,a,o){super(0,e,t,n,r,i,a,o);this.type="ConeGeometry";this.parameters={radius:e,height:t,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:a,thetaLength:o}}}class ConeBufferGeometry extends CylinderBufferGeometry{constructor(e,t,n,r,i,a,o){super(0,e,t,n,r,i,a,o);this.type="ConeBufferGeometry";this.parameters={radius:e,height:t,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:a,thetaLength:o}}}class CircleGeometry extends Geometry{constructor(e,t,n,r){super();this.type="CircleGeometry";this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:r};this.fromBufferGeometry(new CircleBufferGeometry(e,t,n,r));this.mergeVertices()}}class CircleBufferGeometry extends BufferGeometry{constructor(e,t,n,r){super();this.type="CircleBufferGeometry";this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:r};e=e||1;t=t!==undefined?Math.max(3,t):8;n=n!==undefined?n:0;r=r!==undefined?r:Math.PI*2;const i=[];const a=[];const o=[];const s=[];const c=new Vector3;const l=new Vector2;a.push(0,0,0);o.push(0,0,1);s.push(.5,.5);for(let i=0,u=3;i<=t;i++,u+=3){const h=n+i/t*r;c.x=e*Math.cos(h);c.y=e*Math.sin(h);a.push(c.x,c.y,c.z);o.push(0,0,1);l.x=(a[u]/e+1)/2;l.y=(a[u+1]/e+1)/2;s.push(l.x,l.y)}for(let e=1;e<=t;e++){i.push(e,e+1,0)}this.setIndex(i);this.setAttribute("position",new Float32BufferAttribute(a,3));this.setAttribute("normal",new Float32BufferAttribute(o,3));this.setAttribute("uv",new Float32BufferAttribute(s,2))}}var Geometries=Object.freeze({__proto__:null,WireframeGeometry:WireframeGeometry,ParametricGeometry:ParametricGeometry,ParametricBufferGeometry:ParametricBufferGeometry,TetrahedronGeometry:TetrahedronGeometry,TetrahedronBufferGeometry:TetrahedronBufferGeometry,OctahedronGeometry:OctahedronGeometry,OctahedronBufferGeometry:OctahedronBufferGeometry,IcosahedronGeometry:IcosahedronGeometry,IcosahedronBufferGeometry:IcosahedronBufferGeometry,DodecahedronGeometry:DodecahedronGeometry,DodecahedronBufferGeometry:DodecahedronBufferGeometry,PolyhedronGeometry:PolyhedronGeometry,PolyhedronBufferGeometry:PolyhedronBufferGeometry,TubeGeometry:TubeGeometry,TubeBufferGeometry:TubeBufferGeometry,TorusKnotGeometry:TorusKnotGeometry,TorusKnotBufferGeometry:TorusKnotBufferGeometry,TorusGeometry:TorusGeometry,TorusBufferGeometry:TorusBufferGeometry,TextGeometry:TextGeometry,TextBufferGeometry:TextBufferGeometry,SphereGeometry:SphereGeometry,SphereBufferGeometry:SphereBufferGeometry,RingGeometry:RingGeometry,RingBufferGeometry:RingBufferGeometry,PlaneGeometry:PlaneGeometry,PlaneBufferGeometry:PlaneBufferGeometry,LatheGeometry:LatheGeometry,LatheBufferGeometry:LatheBufferGeometry,ShapeGeometry:ShapeGeometry,ShapeBufferGeometry:ShapeBufferGeometry,ExtrudeGeometry:ExtrudeGeometry,ExtrudeBufferGeometry:ExtrudeBufferGeometry,EdgesGeometry:EdgesGeometry,ConeGeometry:ConeGeometry,ConeBufferGeometry:ConeBufferGeometry,CylinderGeometry:CylinderGeometry,CylinderBufferGeometry:CylinderBufferGeometry,CircleGeometry:CircleGeometry,CircleBufferGeometry:CircleBufferGeometry,BoxGeometry:BoxGeometry,BoxBufferGeometry:BoxBufferGeometry});function ShadowMaterial(e){Material.call(this);this.type="ShadowMaterial";this.color=new Color(0);this.transparent=true;this.setValues(e)}ShadowMaterial.prototype=Object.create(Material.prototype);ShadowMaterial.prototype.constructor=ShadowMaterial;ShadowMaterial.prototype.isShadowMaterial=true;ShadowMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);return this};function RawShaderMaterial(e){ShaderMaterial.call(this,e);this.type="RawShaderMaterial"}RawShaderMaterial.prototype=Object.create(ShaderMaterial.prototype);RawShaderMaterial.prototype.constructor=RawShaderMaterial;RawShaderMaterial.prototype.isRawShaderMaterial=true;function MeshStandardMaterial(e){Material.call(this);this.defines={STANDARD:""};this.type="MeshStandardMaterial";this.color=new Color(16777215);this.roughness=1;this.metalness=0;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapIntensity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.vertexTangents=false;this.setValues(e)}MeshStandardMaterial.prototype=Object.create(Material.prototype);MeshStandardMaterial.prototype.constructor=MeshStandardMaterial;MeshStandardMaterial.prototype.isMeshStandardMaterial=true;MeshStandardMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.defines={STANDARD:""};this.color.copy(e.color);this.roughness=e.roughness;this.metalness=e.metalness;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.roughnessMap=e.roughnessMap;this.metalnessMap=e.metalnessMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.envMapIntensity=e.envMapIntensity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;this.vertexTangents=e.vertexTangents;return this};function MeshPhysicalMaterial(e){MeshStandardMaterial.call(this);this.defines={STANDARD:"",PHYSICAL:""};this.type="MeshPhysicalMaterial";this.clearcoat=0;this.clearcoatMap=null;this.clearcoatRoughness=0;this.clearcoatRoughnessMap=null;this.clearcoatNormalScale=new Vector2(1,1);this.clearcoatNormalMap=null;this.reflectivity=.5;this.sheen=null;this.transmission=0;this.transmissionMap=null;this.setValues(e)}MeshPhysicalMaterial.prototype=Object.create(MeshStandardMaterial.prototype);MeshPhysicalMaterial.prototype.constructor=MeshPhysicalMaterial;MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;MeshPhysicalMaterial.prototype.copy=function(e){MeshStandardMaterial.prototype.copy.call(this,e);this.defines={STANDARD:"",PHYSICAL:""};this.clearcoat=e.clearcoat;this.clearcoatMap=e.clearcoatMap;this.clearcoatRoughness=e.clearcoatRoughness;this.clearcoatRoughnessMap=e.clearcoatRoughnessMap;this.clearcoatNormalMap=e.clearcoatNormalMap;this.clearcoatNormalScale.copy(e.clearcoatNormalScale);this.reflectivity=e.reflectivity;if(e.sheen){this.sheen=(this.sheen||new Color).copy(e.sheen)}else{this.sheen=null}this.transmission=e.transmission;this.transmissionMap=e.transmissionMap;return this};function MeshPhongMaterial(e){Material.call(this);this.type="MeshPhongMaterial";this.color=new Color(16777215);this.specular=new Color(1118481);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(e)}MeshPhongMaterial.prototype=Object.create(Material.prototype);MeshPhongMaterial.prototype.constructor=MeshPhongMaterial;MeshPhongMaterial.prototype.isMeshPhongMaterial=true;MeshPhongMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);this.specular.copy(e.specular);this.shininess=e.shininess;this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;return this};function MeshToonMaterial(e){Material.call(this);this.defines={TOON:""};this.type="MeshToonMaterial";this.color=new Color(16777215);this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(e)}MeshToonMaterial.prototype=Object.create(Material.prototype);MeshToonMaterial.prototype.constructor=MeshToonMaterial;MeshToonMaterial.prototype.isMeshToonMaterial=true;MeshToonMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);this.map=e.map;this.gradientMap=e.gradientMap;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.alphaMap=e.alphaMap;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;return this};function MeshNormalMaterial(e){Material.call(this);this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(e)}MeshNormalMaterial.prototype=Object.create(Material.prototype);MeshNormalMaterial.prototype.constructor=MeshNormalMaterial;MeshNormalMaterial.prototype.isMeshNormalMaterial=true;MeshNormalMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;return this};function MeshLambertMaterial(e){Material.call(this);this.type="MeshLambertMaterial";this.color=new Color(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color(0);this.emissiveIntensity=1;this.emissiveMap=null;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(e)}MeshLambertMaterial.prototype=Object.create(Material.prototype);MeshLambertMaterial.prototype.constructor=MeshLambertMaterial;MeshLambertMaterial.prototype.isMeshLambertMaterial=true;MeshLambertMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;return this};function MeshMatcapMaterial(e){Material.call(this);this.defines={MATCAP:""};this.type="MeshMatcapMaterial";this.color=new Color(16777215);this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.skinning=false;this.morphTargets=false;this.morphNormals=false;this.setValues(e)}MeshMatcapMaterial.prototype=Object.create(Material.prototype);MeshMatcapMaterial.prototype.constructor=MeshMatcapMaterial;MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;MeshMatcapMaterial.prototype.copy=function(e){Material.prototype.copy.call(this,e);this.defines={MATCAP:""};this.color.copy(e.color);this.matcap=e.matcap;this.map=e.map;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.alphaMap=e.alphaMap;this.skinning=e.skinning;this.morphTargets=e.morphTargets;this.morphNormals=e.morphNormals;return this};function LineDashedMaterial(e){LineBasicMaterial.call(this);this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(e)}LineDashedMaterial.prototype=Object.create(LineBasicMaterial.prototype);LineDashedMaterial.prototype.constructor=LineDashedMaterial;LineDashedMaterial.prototype.isLineDashedMaterial=true;LineDashedMaterial.prototype.copy=function(e){LineBasicMaterial.prototype.copy.call(this,e);this.scale=e.scale;this.dashSize=e.dashSize;this.gapSize=e.gapSize;return this};var Materials=Object.freeze({__proto__:null,ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshBasicMaterial:MeshBasicMaterial,MeshMatcapMaterial:MeshMatcapMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial,Material:Material});const AnimationUtils={arraySlice:function(e,t,n){if(AnimationUtils.isTypedArray(e)){return new e.constructor(e.subarray(t,n!==undefined?n:e.length))}return e.slice(t,n)},convertArray:function(e,t,n){if(!e||!n&&e.constructor===t)return e;if(typeof t.BYTES_PER_ELEMENT==="number"){return new t(e)}return Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function t(t,n){return e[t]-e[n]}const n=e.length;const r=new Array(n);for(let e=0;e!==n;++e)r[e]=e;r.sort(t);return r},sortedArray:function(e,t,n){const r=e.length;const i=new e.constructor(r);for(let a=0,o=0;o!==r;++a){const r=n[a]*t;for(let n=0;n!==t;++n){i[o++]=e[r+n]}}return i},flattenJSON:function(e,t,n,r){let i=1,a=e[0];while(a!==undefined&&a[r]===undefined){a=e[i++]}if(a===undefined)return;let o=a[r];if(o===undefined)return;if(Array.isArray(o)){do{o=a[r];if(o!==undefined){t.push(a.time);n.push.apply(n,o)}a=e[i++]}while(a!==undefined)}else if(o.toArray!==undefined){do{o=a[r];if(o!==undefined){t.push(a.time);o.toArray(n,n.length)}a=e[i++]}while(a!==undefined)}else{do{o=a[r];if(o!==undefined){t.push(a.time);n.push(o)}a=e[i++]}while(a!==undefined)}},subclip:function(e,t,n,r,i){i=i||30;const a=e.clone();a.name=t;const o=[];for(let e=0;e<a.tracks.length;++e){const t=a.tracks[e];const s=t.getValueSize();const c=[];const l=[];for(let e=0;e<t.times.length;++e){const a=t.times[e]*i;if(a<n||a>=r)continue;c.push(t.times[e]);for(let n=0;n<s;++n){l.push(t.values[e*s+n])}}if(c.length===0)continue;t.times=AnimationUtils.convertArray(c,t.times.constructor);t.values=AnimationUtils.convertArray(l,t.values.constructor);o.push(t)}a.tracks=o;let s=Infinity;for(let e=0;e<a.tracks.length;++e){if(s>a.tracks[e].times[0]){s=a.tracks[e].times[0]}}for(let e=0;e<a.tracks.length;++e){a.tracks[e].shift(-1*s)}a.resetDuration();return a},makeClipAdditive:function(e,t,n,r){if(t===undefined)t=0;if(n===undefined)n=e;if(r===undefined||r<=0)r=30;const i=e.tracks.length;const a=t/r;for(let t=0;t<i;++t){const r=n.tracks[t];const i=r.ValueTypeName;if(i==="bool"||i==="string")continue;const o=e.tracks.find((function(e){return e.name===r.name&&e.ValueTypeName===i}));if(o===undefined)continue;let s=0;const c=r.getValueSize();if(r.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){s=c/3}let l=0;const u=o.getValueSize();if(o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){l=u/3}const h=r.times.length-1;let f;if(a<=r.times[0]){const e=s;const t=c-s;f=AnimationUtils.arraySlice(r.values,e,t)}else if(a>=r.times[h]){const e=h*c+s;const t=e+c-s;f=AnimationUtils.arraySlice(r.values,e,t)}else{const e=r.createInterpolant();const t=s;const n=c-s;e.evaluate(a);f=AnimationUtils.arraySlice(e.resultBuffer,t,n)}if(i==="quaternion"){const e=(new Quaternion).fromArray(f).normalize().conjugate();e.toArray(f)}const d=o.times.length;for(let e=0;e<d;++e){const t=e*u+l;if(i==="quaternion"){Quaternion.multiplyQuaternionsFlat(o.values,t,f,0,o.values,t)}else{const e=u-l*2;for(let n=0;n<e;++n){o.values[t+n]-=f[n]}}}}e.blendMode=AdditiveAnimationBlendMode;return e}};function Interpolant(e,t,n,r){this.parameterPositions=e;this._cachedIndex=0;this.resultBuffer=r!==undefined?r:new t.constructor(n);this.sampleValues=t;this.valueSize=n}Object.assign(Interpolant.prototype,{evaluate:function(e){const t=this.parameterPositions;let n=this._cachedIndex,r=t[n],i=t[n-1];e:{t:{let a;n:{r:if(!(e<r)){for(let a=n+2;;){if(r===undefined){if(e<i)break r;n=t.length;this._cachedIndex=n;return this.afterEnd_(n-1,e,i)}if(n===a)break;i=r;r=t[++n];if(e<r){break t}}a=t.length;break n}if(!(e>=i)){const o=t[1];if(e<o){n=2;i=o}for(let a=n-2;;){if(i===undefined){this._cachedIndex=0;return this.beforeStart_(0,e,r)}if(n===a)break;r=i;i=t[--n-1];if(e>=i){break t}}a=n;n=0;break n}break e}while(n<a){const r=n+a>>>1;if(e<t[r]){a=r}else{n=r+1}}r=t[n];i=t[n-1];if(i===undefined){this._cachedIndex=0;return this.beforeStart_(0,e,r)}if(r===undefined){n=t.length;this._cachedIndex=n;return this.afterEnd_(n-1,i,e)}}this._cachedIndex=n;this.intervalChanged_(n,i,r)}return this.interpolate_(n,i,e,r)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){const t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=e*r;for(let e=0;e!==r;++e){t[e]=n[i+e]}return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}});Object.assign(Interpolant.prototype,{beforeStart_:Interpolant.prototype.copySampleValue_,afterEnd_:Interpolant.prototype.copySampleValue_});function CubicInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0}CubicInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:CubicInterpolant,DefaultSettings_:{endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding},intervalChanged_:function(e,t,n){const r=this.parameterPositions;let i=e-2,a=e+1,o=r[i],s=r[a];if(o===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:i=e;o=2*t-n;break;case WrapAroundEnding:i=r.length-2;o=t+r[i]-r[i+1];break;default:i=e;o=n}}if(s===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:a=e;s=2*n-t;break;case WrapAroundEnding:a=1;s=n+r[1]-r[0];break;default:a=e-1;s=t}}const c=(n-t)*.5,l=this.valueSize;this._weightPrev=c/(t-o);this._weightNext=c/(s-n);this._offsetPrev=i*l;this._offsetNext=a*l},interpolate_:function(e,t,n,r){const i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,f=this._weightNext,d=(n-t)/(r-t),p=d*d,m=p*d;const g=-h*m+2*h*p-h*d;const y=(1+h)*m+(-1.5-2*h)*p+(-.5+h)*d+1;const v=(-1-f)*m+(1.5+f)*p+.5*d;const _=f*m-f*p;for(let e=0;e!==o;++e){i[e]=g*a[l+e]+y*a[c+e]+v*a[s+e]+_*a[u+e]}return i}});function LinearInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r)}LinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:LinearInterpolant,interpolate_:function(e,t,n,r){const i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=(n-t)/(r-t),u=1-l;for(let e=0;e!==o;++e){i[e]=a[c+e]*u+a[s+e]*l}return i}});function DiscreteInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r)}DiscreteInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:DiscreteInterpolant,interpolate_:function(e){return this.copySampleValue_(e-1)}});function KeyframeTrack(e,t,n,r){if(e===undefined)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===undefined||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e;this.times=AnimationUtils.convertArray(t,this.TimeBufferType);this.values=AnimationUtils.convertArray(n,this.ValueBufferType);this.setInterpolation(r||this.DefaultInterpolation)}Object.assign(KeyframeTrack,{toJSON:function(e){const t=e.constructor;let n;if(t.toJSON!==undefined){n=t.toJSON(e)}else{n={name:e.name,times:AnimationUtils.convertArray(e.times,Array),values:AnimationUtils.convertArray(e.values,Array)};const t=e.getInterpolation();if(t!==e.DefaultInterpolation){n.interpolation=t}}n.type=e.ValueTypeName;return n}});Object.assign(KeyframeTrack.prototype,{constructor:KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodDiscrete:function(e){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new LinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new CubicInterpolant(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){let t;switch(e){case InterpolateDiscrete:t=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:t=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:t=this.InterpolantFactoryMethodSmooth;break}if(t===undefined){const t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){if(e!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation)}else{throw new Error(t)}}console.warn("THREE.KeyframeTrack:",t);return this}this.createInterpolant=t;return this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(e!==0){const t=this.times;for(let n=0,r=t.length;n!==r;++n){t[n]+=e}}return this},scale:function(e){if(e!==1){const t=this.times;for(let n=0,r=t.length;n!==r;++n){t[n]*=e}}return this},trim:function(e,t){const n=this.times,r=n.length;let i=0,a=r-1;while(i!==r&&n[i]<e){++i}while(a!==-1&&n[a]>t){--a}++a;if(i!==0||a!==r){if(i>=a){a=Math.max(a,1);i=a-1}const e=this.getValueSize();this.times=AnimationUtils.arraySlice(n,i,a);this.values=AnimationUtils.arraySlice(this.values,i*e,a*e)}return this},validate:function(){let e=true;const t=this.getValueSize();if(t-Math.floor(t)!==0){console.error("THREE.KeyframeTrack: Invalid value size in track.",this);e=false}const n=this.times,r=this.values,i=n.length;if(i===0){console.error("THREE.KeyframeTrack: Track is empty.",this);e=false}let a=null;for(let t=0;t!==i;t++){const r=n[t];if(typeof r==="number"&&isNaN(r)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,t,r);e=false;break}if(a!==null&&a>r){console.error("THREE.KeyframeTrack: Out of order keys.",this,t,r,a);e=false;break}a=r}if(r!==undefined){if(AnimationUtils.isTypedArray(r)){for(let t=0,n=r.length;t!==n;++t){const n=r[t];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,t,n);e=false;break}}}}return e},optimize:function(){const e=AnimationUtils.arraySlice(this.times),t=AnimationUtils.arraySlice(this.values),n=this.getValueSize(),r=this.getInterpolation()===InterpolateSmooth,i=e.length-1;let a=1;for(let o=1;o<i;++o){let i=false;const s=e[o];const c=e[o+1];if(s!==c&&(o!==1||s!==s[0])){if(!r){const e=o*n,r=e-n,a=e+n;for(let o=0;o!==n;++o){const n=t[e+o];if(n!==t[r+o]||n!==t[a+o]){i=true;break}}}else{i=true}}if(i){if(o!==a){e[a]=e[o];const r=o*n,i=a*n;for(let e=0;e!==n;++e){t[i+e]=t[r+e]}}++a}}if(i>0){e[a]=e[i];for(let e=i*n,r=a*n,o=0;o!==n;++o){t[r+o]=t[e+o]}++a}if(a!==e.length){this.times=AnimationUtils.arraySlice(e,0,a);this.values=AnimationUtils.arraySlice(t,0,a*n)}else{this.times=e;this.values=t}return this},clone:function(){const e=AnimationUtils.arraySlice(this.times,0);const t=AnimationUtils.arraySlice(this.values,0);const n=this.constructor;const r=new n(this.name,e,t);r.createInterpolant=this.createInterpolant;return r}});function BooleanKeyframeTrack(e,t,n){KeyframeTrack.call(this,e,t,n)}BooleanKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined});function ColorKeyframeTrack(e,t,n,r){KeyframeTrack.call(this,e,t,n,r)}ColorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:ColorKeyframeTrack,ValueTypeName:"color"});function NumberKeyframeTrack(e,t,n,r){KeyframeTrack.call(this,e,t,n,r)}NumberKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:NumberKeyframeTrack,ValueTypeName:"number"});function QuaternionLinearInterpolant(e,t,n,r){Interpolant.call(this,e,t,n,r)}QuaternionLinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:QuaternionLinearInterpolant,interpolate_:function(e,t,n,r){const i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=(n-t)/(r-t);let c=e*o;for(let e=c+o;c!==e;c+=4){Quaternion.slerpFlat(i,0,a,c-o,a,c,s)}return i}});function QuaternionKeyframeTrack(e,t,n,r){KeyframeTrack.call(this,e,t,n,r)}QuaternionKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodLinear:function(e){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:undefined});function StringKeyframeTrack(e,t,n,r){KeyframeTrack.call(this,e,t,n,r)}StringKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:undefined,InterpolantFactoryMethodSmooth:undefined});function VectorKeyframeTrack(e,t,n,r){KeyframeTrack.call(this,e,t,n,r)}VectorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrack.prototype),{constructor:VectorKeyframeTrack,ValueTypeName:"vector"});function AnimationClip(e,t,n,r){this.name=e;this.tracks=n;this.duration=t!==undefined?t:-1;this.blendMode=r!==undefined?r:NormalAnimationBlendMode;this.uuid=MathUtils.generateUUID();if(this.duration<0){this.resetDuration()}}function getTrackTypeForValueTypeName(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return VectorKeyframeTrack;case"color":return ColorKeyframeTrack;case"quaternion":return QuaternionKeyframeTrack;case"bool":case"boolean":return BooleanKeyframeTrack;case"string":return StringKeyframeTrack}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}function parseKeyframeTrack(e){if(e.type===undefined){throw new Error("THREE.KeyframeTrack: track type undefined, can not parse")}const t=getTrackTypeForValueTypeName(e.type);if(e.times===undefined){const t=[],n=[];AnimationUtils.flattenJSON(e.keys,t,n,"value");e.times=t;e.values=n}if(t.parse!==undefined){return t.parse(e)}else{return new t(e.name,e.times,e.values,e.interpolation)}}Object.assign(AnimationClip,{parse:function(e){const t=[],n=e.tracks,r=1/(e.fps||1);for(let e=0,i=n.length;e!==i;++e){t.push(parseKeyframeTrack(n[e]).scale(r))}return new AnimationClip(e.name,e.duration,t,e.blendMode)},toJSON:function(e){const t=[],n=e.tracks;const r={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let e=0,r=n.length;e!==r;++e){t.push(KeyframeTrack.toJSON(n[e]))}return r},CreateFromMorphTargetSequence:function(e,t,n,r){const i=t.length;const a=[];for(let e=0;e<i;e++){let o=[];let s=[];o.push((e+i-1)%i,e,(e+1)%i);s.push(0,1,0);const c=AnimationUtils.getKeyframeOrder(o);o=AnimationUtils.sortedArray(o,1,c);s=AnimationUtils.sortedArray(s,1,c);if(!r&&o[0]===0){o.push(i);s.push(s[0])}a.push(new NumberKeyframeTrack(".morphTargetInfluences["+t[e].name+"]",o,s).scale(1/n))}return new AnimationClip(e,-1,a)},findByName:function(e,t){let n=e;if(!Array.isArray(e)){const t=e;n=t.geometry&&t.geometry.animations||t.animations}for(let e=0;e<n.length;e++){if(n[e].name===t){return n[e]}}return null},CreateClipsFromMorphTargetSequences:function(e,t,n){const r={};const i=/^([\w-]*?)([\d]+)$/;for(let t=0,n=e.length;t<n;t++){const n=e[t];const a=n.name.match(i);if(a&&a.length>1){const e=a[1];let t=r[e];if(!t){r[e]=t=[]}t.push(n)}}const a=[];for(const e in r){a.push(AnimationClip.CreateFromMorphTargetSequence(e,r[e],t,n))}return a},parseAnimation:function(e,t){if(!e){console.error("THREE.AnimationClip: No animation in JSONLoader data.");return null}const n=function(e,t,n,r,i){if(n.length!==0){const a=[];const o=[];AnimationUtils.flattenJSON(n,a,o,r);if(a.length!==0){i.push(new e(t,a,o))}}};const r=[];const i=e.name||"default";const a=e.fps||30;const o=e.blendMode;let s=e.length||-1;const c=e.hierarchy||[];for(let e=0;e<c.length;e++){const i=c[e].keys;if(!i||i.length===0)continue;if(i[0].morphTargets){const e={};let t;for(t=0;t<i.length;t++){if(i[t].morphTargets){for(let n=0;n<i[t].morphTargets.length;n++){e[i[t].morphTargets[n]]=-1}}}for(const n in e){const e=[];const a=[];for(let r=0;r!==i[t].morphTargets.length;++r){const r=i[t];e.push(r.time);a.push(r.morphTarget===n?1:0)}r.push(new NumberKeyframeTrack(".morphTargetInfluence["+n+"]",e,a))}s=e.length*(a||1)}else{const a=".bones["+t[e].name+"]";n(VectorKeyframeTrack,a+".position",i,"pos",r);n(QuaternionKeyframeTrack,a+".quaternion",i,"rot",r);n(VectorKeyframeTrack,a+".scale",i,"scl",r)}}if(r.length===0){return null}const l=new AnimationClip(i,s,r,o);return l}});Object.assign(AnimationClip.prototype,{resetDuration:function(){const e=this.tracks;let t=0;for(let n=0,r=e.length;n!==r;++n){const e=this.tracks[n];t=Math.max(t,e.times[e.times.length-1])}this.duration=t;return this},trim:function(){for(let e=0;e<this.tracks.length;e++){this.tracks[e].trim(0,this.duration)}return this},validate:function(){let e=true;for(let t=0;t<this.tracks.length;t++){e=e&&this.tracks[t].validate()}return e},optimize:function(){for(let e=0;e<this.tracks.length;e++){this.tracks[e].optimize()}return this},clone:function(){const e=[];for(let t=0;t<this.tracks.length;t++){e.push(this.tracks[t].clone())}return new AnimationClip(this.name,this.duration,e,this.blendMode)}});const Cache={enabled:false,files:{},add:function(e,t){if(this.enabled===false)return;this.files[e]=t},get:function(e){if(this.enabled===false)return;return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function LoadingManager(e,t,n){const r=this;let i=false;let a=0;let o=0;let s=undefined;const c=[];this.onStart=undefined;this.onLoad=e;this.onProgress=t;this.onError=n;this.itemStart=function(e){o++;if(i===false){if(r.onStart!==undefined){r.onStart(e,a,o)}}i=true};this.itemEnd=function(e){a++;if(r.onProgress!==undefined){r.onProgress(e,a,o)}if(a===o){i=false;if(r.onLoad!==undefined){r.onLoad()}}};this.itemError=function(e){if(r.onError!==undefined){r.onError(e)}};this.resolveURL=function(e){if(s){return s(e)}return e};this.setURLModifier=function(e){s=e;return this};this.addHandler=function(e,t){c.push(e,t);return this};this.removeHandler=function(e){const t=c.indexOf(e);if(t!==-1){c.splice(t,2)}return this};this.getHandler=function(e){for(let t=0,n=c.length;t<n;t+=2){const n=c[t];const r=c[t+1];if(n.global)n.lastIndex=0;if(n.test(e)){return r}}return null}}const DefaultLoadingManager=new LoadingManager;function Loader(e){this.manager=e!==undefined?e:DefaultLoadingManager;this.crossOrigin="anonymous";this.path="";this.resourcePath="";this.requestHeader={}}Object.assign(Loader.prototype,{load:function(){},loadAsync:function(e,t){const n=this;return new Promise((function(r,i){n.load(e,r,t,i)}))},parse:function(){},setCrossOrigin:function(e){this.crossOrigin=e;return this},setPath:function(e){this.path=e;return this},setResourcePath:function(e){this.resourcePath=e;return this},setRequestHeader:function(e){this.requestHeader=e;return this}});const loading={};function FileLoader(e){Loader.call(this,e)}FileLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:FileLoader,load:function(e,t,n,r){if(e===undefined)e="";if(this.path!==undefined)e=this.path+e;e=this.manager.resolveURL(e);const i=this;const a=Cache.get(e);if(a!==undefined){i.manager.itemStart(e);setTimeout((function(){if(t)t(a);i.manager.itemEnd(e)}),0);return a}if(loading[e]!==undefined){loading[e].push({onLoad:t,onProgress:n,onError:r});return}const o=/^data:(.*?)(;base64)?,(.*)$/;const s=e.match(o);let c;if(s){const n=s[1];const a=!!s[2];let o=s[3];o=decodeURIComponent(o);if(a)o=atob(o);try{let r;const a=(this.responseType||"").toLowerCase();switch(a){case"arraybuffer":case"blob":const e=new Uint8Array(o.length);for(let t=0;t<o.length;t++){e[t]=o.charCodeAt(t)}if(a==="blob"){r=new Blob([e.buffer],{type:n})}else{r=e.buffer}break;case"document":const t=new DOMParser;r=t.parseFromString(o,n);break;case"json":r=JSON.parse(o);break;default:r=o;break}setTimeout((function(){if(t)t(r);i.manager.itemEnd(e)}),0)}catch(t){setTimeout((function(){if(r)r(t);i.manager.itemError(e);i.manager.itemEnd(e)}),0)}}else{loading[e]=[];loading[e].push({onLoad:t,onProgress:n,onError:r});c=new XMLHttpRequest;c.open("GET",e,true);c.addEventListener("load",(function(t){const n=this.response;const r=loading[e];delete loading[e];if(this.status===200||this.status===0){if(this.status===0)console.warn("THREE.FileLoader: HTTP Status 0 received.");Cache.add(e,n);for(let e=0,t=r.length;e<t;e++){const t=r[e];if(t.onLoad)t.onLoad(n)}i.manager.itemEnd(e)}else{for(let e=0,n=r.length;e<n;e++){const n=r[e];if(n.onError)n.onError(t)}i.manager.itemError(e);i.manager.itemEnd(e)}}),false);c.addEventListener("progress",(function(t){const n=loading[e];for(let e=0,r=n.length;e<r;e++){const r=n[e];if(r.onProgress)r.onProgress(t)}}),false);c.addEventListener("error",(function(t){const n=loading[e];delete loading[e];for(let e=0,r=n.length;e<r;e++){const r=n[e];if(r.onError)r.onError(t)}i.manager.itemError(e);i.manager.itemEnd(e)}),false);c.addEventListener("abort",(function(t){const n=loading[e];delete loading[e];for(let e=0,r=n.length;e<r;e++){const r=n[e];if(r.onError)r.onError(t)}i.manager.itemError(e);i.manager.itemEnd(e)}),false);if(this.responseType!==undefined)c.responseType=this.responseType;if(this.withCredentials!==undefined)c.withCredentials=this.withCredentials;if(c.overrideMimeType)c.overrideMimeType(this.mimeType!==undefined?this.mimeType:"text/plain");for(const e in this.requestHeader){c.setRequestHeader(e,this.requestHeader[e])}c.send(null)}i.manager.itemStart(e);return c},setResponseType:function(e){this.responseType=e;return this},setWithCredentials:function(e){this.withCredentials=e;return this},setMimeType:function(e){this.mimeType=e;return this}});function AnimationLoader(e){Loader.call(this,e)}AnimationLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:AnimationLoader,load:function(e,t,n,r){const i=this;const a=new FileLoader(i.manager);a.setPath(i.path);a.setRequestHeader(i.requestHeader);a.load(e,(function(n){try{t(i.parse(JSON.parse(n)))}catch(t){if(r){r(t)}else{console.error(t)}i.manager.itemError(e)}}),n,r)},parse:function(e){const t=[];for(let n=0;n<e.length;n++){const r=AnimationClip.parse(e[n]);t.push(r)}return t}});function CompressedTextureLoader(e){Loader.call(this,e)}CompressedTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:CompressedTextureLoader,load:function(e,t,n,r){const i=this;const a=[];const o=new CompressedTexture;o.image=a;const s=new FileLoader(this.manager);s.setPath(this.path);s.setResponseType("arraybuffer");s.setRequestHeader(this.requestHeader);let c=0;function l(l){s.load(e[l],(function(e){const n=i.parse(e,true);a[l]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps};c+=1;if(c===6){if(n.mipmapCount===1)o.minFilter=LinearFilter;o.format=n.format;o.needsUpdate=true;if(t)t(o)}}),n,r)}if(Array.isArray(e)){for(let t=0,n=e.length;t<n;++t){l(t)}}else{s.load(e,(function(e){const n=i.parse(e,true);if(n.isCubemap){const e=n.mipmaps.length/n.mipmapCount;for(let t=0;t<e;t++){a[t]={mipmaps:[]};for(let e=0;e<n.mipmapCount;e++){a[t].mipmaps.push(n.mipmaps[t*n.mipmapCount+e]);a[t].format=n.format;a[t].width=n.width;a[t].height=n.height}}}else{o.image.width=n.width;o.image.height=n.height;o.mipmaps=n.mipmaps}if(n.mipmapCount===1){o.minFilter=LinearFilter}o.format=n.format;o.needsUpdate=true;if(t)t(o)}),n,r)}return o}});function ImageLoader(e){Loader.call(this,e)}ImageLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ImageLoader,load:function(e,t,n,r){if(this.path!==undefined)e=this.path+e;e=this.manager.resolveURL(e);const i=this;const a=Cache.get(e);if(a!==undefined){i.manager.itemStart(e);setTimeout((function(){if(t)t(a);i.manager.itemEnd(e)}),0);return a}const o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){o.removeEventListener("load",s,false);o.removeEventListener("error",c,false);Cache.add(e,this);if(t)t(this);i.manager.itemEnd(e)}function c(t){o.removeEventListener("load",s,false);o.removeEventListener("error",c,false);if(r)r(t);i.manager.itemError(e);i.manager.itemEnd(e)}o.addEventListener("load",s,false);o.addEventListener("error",c,false);if(e.substr(0,5)!=="data:"){if(this.crossOrigin!==undefined)o.crossOrigin=this.crossOrigin}i.manager.itemStart(e);o.src=e;return o}});function CubeTextureLoader(e){Loader.call(this,e)}CubeTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:CubeTextureLoader,load:function(e,t,n,r){const i=new CubeTexture;const a=new ImageLoader(this.manager);a.setCrossOrigin(this.crossOrigin);a.setPath(this.path);let o=0;function s(n){a.load(e[n],(function(e){i.images[n]=e;o++;if(o===6){i.needsUpdate=true;if(t)t(i)}}),undefined,r)}for(let t=0;t<e.length;++t){s(t)}return i}});function DataTextureLoader(e){Loader.call(this,e)}DataTextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:DataTextureLoader,load:function(e,t,n,r){const i=this;const a=new DataTexture;const o=new FileLoader(this.manager);o.setResponseType("arraybuffer");o.setRequestHeader(this.requestHeader);o.setPath(this.path);o.load(e,(function(e){const n=i.parse(e);if(!n)return;if(n.image!==undefined){a.image=n.image}else if(n.data!==undefined){a.image.width=n.width;a.image.height=n.height;a.image.data=n.data}a.wrapS=n.wrapS!==undefined?n.wrapS:ClampToEdgeWrapping;a.wrapT=n.wrapT!==undefined?n.wrapT:ClampToEdgeWrapping;a.magFilter=n.magFilter!==undefined?n.magFilter:LinearFilter;a.minFilter=n.minFilter!==undefined?n.minFilter:LinearFilter;a.anisotropy=n.anisotropy!==undefined?n.anisotropy:1;if(n.format!==undefined){a.format=n.format}if(n.type!==undefined){a.type=n.type}if(n.mipmaps!==undefined){a.mipmaps=n.mipmaps;a.minFilter=LinearMipmapLinearFilter}if(n.mipmapCount===1){a.minFilter=LinearFilter}a.needsUpdate=true;if(t)t(a,n)}),n,r);return a}});function TextureLoader(e){Loader.call(this,e)}TextureLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:TextureLoader,load:function(e,t,n,r){const i=new Texture;const a=new ImageLoader(this.manager);a.setCrossOrigin(this.crossOrigin);a.setPath(this.path);a.load(e,(function(n){i.image=n;const r=e.search(/\.jpe?g($|\?)/i)>0||e.search(/^data\:image\/jpeg/)===0;i.format=r?RGBFormat:RGBAFormat;i.needsUpdate=true;if(t!==undefined){t(i)}}),n,r);return i}});function Curve(){this.type="Curve";this.arcLengthDivisions=200}Object.assign(Curve.prototype,{getPoint:function(){console.warn("THREE.Curve: .getPoint() not implemented.");return null},getPointAt:function(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)},getPoints:function(e){if(e===undefined)e=5;const t=[];for(let n=0;n<=e;n++){t.push(this.getPoint(n/e))}return t},getSpacedPoints:function(e){if(e===undefined)e=5;const t=[];for(let n=0;n<=e;n++){t.push(this.getPointAt(n/e))}return t},getLength:function(){const e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(e===undefined)e=this.arcLengthDivisions;if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate){return this.cacheArcLengths}this.needsUpdate=false;const t=[];let n,r=this.getPoint(0);let i=0;t.push(0);for(let a=1;a<=e;a++){n=this.getPoint(a/e);i+=n.distanceTo(r);t.push(i);r=n}this.cacheArcLengths=t;return t},updateArcLengths:function(){this.needsUpdate=true;this.getLengths()},getUtoTmapping:function(e,t){const n=this.getLengths();let r=0;const i=n.length;let a;if(t){a=t}else{a=e*n[i-1]}let o=0,s=i-1,c;while(o<=s){r=Math.floor(o+(s-o)/2);c=n[r]-a;if(c<0){o=r+1}else if(c>0){s=r-1}else{s=r;break}}r=s;if(n[r]===a){return r/(i-1)}const l=n[r];const u=n[r+1];const h=u-l;const f=(a-l)/h;const d=(r+f)/(i-1);return d},getTangent:function(e,t){const n=1e-4;let r=e-n;let i=e+n;if(r<0)r=0;if(i>1)i=1;const a=this.getPoint(r);const o=this.getPoint(i);const s=t||(a.isVector2?new Vector2:new Vector3);s.copy(o).sub(a).normalize();return s},getTangentAt:function(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)},computeFrenetFrames:function(e,t){const n=new Vector3;const r=[];const i=[];const a=[];const o=new Vector3;const s=new Matrix4;for(let t=0;t<=e;t++){const n=t/e;r[t]=this.getTangentAt(n,new Vector3);r[t].normalize()}i[0]=new Vector3;a[0]=new Vector3;let c=Number.MAX_VALUE;const l=Math.abs(r[0].x);const u=Math.abs(r[0].y);const h=Math.abs(r[0].z);if(l<=c){c=l;n.set(1,0,0)}if(u<=c){c=u;n.set(0,1,0)}if(h<=c){n.set(0,0,1)}o.crossVectors(r[0],n).normalize();i[0].crossVectors(r[0],o);a[0].crossVectors(r[0],i[0]);for(let t=1;t<=e;t++){i[t]=i[t-1].clone();a[t]=a[t-1].clone();o.crossVectors(r[t-1],r[t]);if(o.length()>Number.EPSILON){o.normalize();const e=Math.acos(MathUtils.clamp(r[t-1].dot(r[t]),-1,1));i[t].applyMatrix4(s.makeRotationAxis(o,e))}a[t].crossVectors(r[t],i[t])}if(t===true){let t=Math.acos(MathUtils.clamp(i[0].dot(i[e]),-1,1));t/=e;if(r[0].dot(o.crossVectors(i[0],i[e]))>0){t=-t}for(let n=1;n<=e;n++){i[n].applyMatrix4(s.makeRotationAxis(r[n],t*n));a[n].crossVectors(r[n],i[n])}}return{tangents:r,normals:i,binormals:a}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.arcLengthDivisions=e.arcLengthDivisions;return this},toJSON:function(){const e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};e.arcLengthDivisions=this.arcLengthDivisions;e.type=this.type;return e},fromJSON:function(e){this.arcLengthDivisions=e.arcLengthDivisions;return this}});function EllipseCurve(e,t,n,r,i,a,o,s){Curve.call(this);this.type="EllipseCurve";this.aX=e||0;this.aY=t||0;this.xRadius=n||1;this.yRadius=r||1;this.aStartAngle=i||0;this.aEndAngle=a||2*Math.PI;this.aClockwise=o||false;this.aRotation=s||0}EllipseCurve.prototype=Object.create(Curve.prototype);EllipseCurve.prototype.constructor=EllipseCurve;EllipseCurve.prototype.isEllipseCurve=true;EllipseCurve.prototype.getPoint=function(e,t){const n=t||new Vector2;const r=Math.PI*2;let i=this.aEndAngle-this.aStartAngle;const a=Math.abs(i)<Number.EPSILON;while(i<0)i+=r;while(i>r)i-=r;if(i<Number.EPSILON){if(a){i=0}else{i=r}}if(this.aClockwise===true&&!a){if(i===r){i=-r}else{i=i-r}}const o=this.aStartAngle+e*i;let s=this.aX+this.xRadius*Math.cos(o);let c=this.aY+this.yRadius*Math.sin(o);if(this.aRotation!==0){const e=Math.cos(this.aRotation);const t=Math.sin(this.aRotation);const n=s-this.aX;const r=c-this.aY;s=n*e-r*t+this.aX;c=n*t+r*e+this.aY}return n.set(s,c)};EllipseCurve.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.aX=e.aX;this.aY=e.aY;this.xRadius=e.xRadius;this.yRadius=e.yRadius;this.aStartAngle=e.aStartAngle;this.aEndAngle=e.aEndAngle;this.aClockwise=e.aClockwise;this.aRotation=e.aRotation;return this};EllipseCurve.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.aX=this.aX;e.aY=this.aY;e.xRadius=this.xRadius;e.yRadius=this.yRadius;e.aStartAngle=this.aStartAngle;e.aEndAngle=this.aEndAngle;e.aClockwise=this.aClockwise;e.aRotation=this.aRotation;return e};EllipseCurve.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.aX=e.aX;this.aY=e.aY;this.xRadius=e.xRadius;this.yRadius=e.yRadius;this.aStartAngle=e.aStartAngle;this.aEndAngle=e.aEndAngle;this.aClockwise=e.aClockwise;this.aRotation=e.aRotation;return this};function ArcCurve(e,t,n,r,i,a){EllipseCurve.call(this,e,t,n,n,r,i,a);this.type="ArcCurve"}ArcCurve.prototype=Object.create(EllipseCurve.prototype);ArcCurve.prototype.constructor=ArcCurve;ArcCurve.prototype.isArcCurve=true;function CubicPoly(){let e=0,t=0,n=0,r=0;function i(i,a,o,s){e=i;t=o;n=-3*i+3*a-2*o-s;r=2*i-2*a+o+s}return{initCatmullRom:function(e,t,n,r,a){i(t,n,a*(n-e),a*(r-t))},initNonuniformCatmullRom:function(e,t,n,r,a,o,s){let c=(t-e)/a-(n-e)/(a+o)+(n-t)/o;let l=(n-t)/o-(r-t)/(o+s)+(r-n)/s;c*=o;l*=o;i(t,n,c,l)},calc:function(i){const a=i*i;const o=a*i;return e+t*i+n*a+r*o}}}const tmp=new Vector3;const px=new CubicPoly,py=new CubicPoly,pz=new CubicPoly;function CatmullRomCurve3(e,t,n,r){Curve.call(this);this.type="CatmullRomCurve3";this.points=e||[];this.closed=t||false;this.curveType=n||"centripetal";this.tension=r!==undefined?r:.5}CatmullRomCurve3.prototype=Object.create(Curve.prototype);CatmullRomCurve3.prototype.constructor=CatmullRomCurve3;CatmullRomCurve3.prototype.isCatmullRomCurve3=true;CatmullRomCurve3.prototype.getPoint=function(e,t){const n=t||new Vector3;const r=this.points;const i=r.length;const a=(i-(this.closed?0:1))*e;let o=Math.floor(a);let s=a-o;if(this.closed){o+=o>0?0:(Math.floor(Math.abs(o)/i)+1)*i}else if(s===0&&o===i-1){o=i-2;s=1}let c,l;if(this.closed||o>0){c=r[(o-1)%i]}else{tmp.subVectors(r[0],r[1]).add(r[0]);c=tmp}const u=r[o%i];const h=r[(o+1)%i];if(this.closed||o+2<i){l=r[(o+2)%i]}else{tmp.subVectors(r[i-1],r[i-2]).add(r[i-1]);l=tmp}if(this.curveType==="centripetal"||this.curveType==="chordal"){const e=this.curveType==="chordal"?.5:.25;let t=Math.pow(c.distanceToSquared(u),e);let n=Math.pow(u.distanceToSquared(h),e);let r=Math.pow(h.distanceToSquared(l),e);if(n<1e-4)n=1;if(t<1e-4)t=n;if(r<1e-4)r=n;px.initNonuniformCatmullRom(c.x,u.x,h.x,l.x,t,n,r);py.initNonuniformCatmullRom(c.y,u.y,h.y,l.y,t,n,r);pz.initNonuniformCatmullRom(c.z,u.z,h.z,l.z,t,n,r)}else if(this.curveType==="catmullrom"){px.initCatmullRom(c.x,u.x,h.x,l.x,this.tension);py.initCatmullRom(c.y,u.y,h.y,l.y,this.tension);pz.initCatmullRom(c.z,u.z,h.z,l.z,this.tension)}n.set(px.calc(s),py.calc(s),pz.calc(s));return n};CatmullRomCurve3.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push(n.clone())}this.closed=e.closed;this.curveType=e.curveType;this.tension=e.tension;return this};CatmullRomCurve3.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.points=[];for(let t=0,n=this.points.length;t<n;t++){const n=this.points[t];e.points.push(n.toArray())}e.closed=this.closed;e.curveType=this.curveType;e.tension=this.tension;return e};CatmullRomCurve3.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push((new Vector3).fromArray(n))}this.closed=e.closed;this.curveType=e.curveType;this.tension=e.tension;return this};function CatmullRom(e,t,n,r,i){const a=(r-t)*.5;const o=(i-n)*.5;const s=e*e;const c=e*s;return(2*n-2*r+a+o)*c+(-3*n+3*r-2*a-o)*s+a*e+n}function QuadraticBezierP0(e,t){const n=1-e;return n*n*t}function QuadraticBezierP1(e,t){return 2*(1-e)*e*t}function QuadraticBezierP2(e,t){return e*e*t}function QuadraticBezier(e,t,n,r){return QuadraticBezierP0(e,t)+QuadraticBezierP1(e,n)+QuadraticBezierP2(e,r)}function CubicBezierP0(e,t){const n=1-e;return n*n*n*t}function CubicBezierP1(e,t){const n=1-e;return 3*n*n*e*t}function CubicBezierP2(e,t){return 3*(1-e)*e*e*t}function CubicBezierP3(e,t){return e*e*e*t}function CubicBezier(e,t,n,r,i){return CubicBezierP0(e,t)+CubicBezierP1(e,n)+CubicBezierP2(e,r)+CubicBezierP3(e,i)}function CubicBezierCurve(e,t,n,r){Curve.call(this);this.type="CubicBezierCurve";this.v0=e||new Vector2;this.v1=t||new Vector2;this.v2=n||new Vector2;this.v3=r||new Vector2}CubicBezierCurve.prototype=Object.create(Curve.prototype);CubicBezierCurve.prototype.constructor=CubicBezierCurve;CubicBezierCurve.prototype.isCubicBezierCurve=true;CubicBezierCurve.prototype.getPoint=function(e,t){const n=t||new Vector2;const r=this.v0,i=this.v1,a=this.v2,o=this.v3;n.set(CubicBezier(e,r.x,i.x,a.x,o.x),CubicBezier(e,r.y,i.y,a.y,o.y));return n};CubicBezierCurve.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);this.v3.copy(e.v3);return this};CubicBezierCurve.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();e.v3=this.v3.toArray();return e};CubicBezierCurve.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);this.v3.fromArray(e.v3);return this};function CubicBezierCurve3(e,t,n,r){Curve.call(this);this.type="CubicBezierCurve3";this.v0=e||new Vector3;this.v1=t||new Vector3;this.v2=n||new Vector3;this.v3=r||new Vector3}CubicBezierCurve3.prototype=Object.create(Curve.prototype);CubicBezierCurve3.prototype.constructor=CubicBezierCurve3;CubicBezierCurve3.prototype.isCubicBezierCurve3=true;CubicBezierCurve3.prototype.getPoint=function(e,t){const n=t||new Vector3;const r=this.v0,i=this.v1,a=this.v2,o=this.v3;n.set(CubicBezier(e,r.x,i.x,a.x,o.x),CubicBezier(e,r.y,i.y,a.y,o.y),CubicBezier(e,r.z,i.z,a.z,o.z));return n};CubicBezierCurve3.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);this.v3.copy(e.v3);return this};CubicBezierCurve3.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();e.v3=this.v3.toArray();return e};CubicBezierCurve3.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);this.v3.fromArray(e.v3);return this};function LineCurve(e,t){Curve.call(this);this.type="LineCurve";this.v1=e||new Vector2;this.v2=t||new Vector2}LineCurve.prototype=Object.create(Curve.prototype);LineCurve.prototype.constructor=LineCurve;LineCurve.prototype.isLineCurve=true;LineCurve.prototype.getPoint=function(e,t){const n=t||new Vector2;if(e===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(e).add(this.v1)}return n};LineCurve.prototype.getPointAt=function(e,t){return this.getPoint(e,t)};LineCurve.prototype.getTangent=function(e,t){const n=t||new Vector2;n.copy(this.v2).sub(this.v1).normalize();return n};LineCurve.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.v1.copy(e.v1);this.v2.copy(e.v2);return this};LineCurve.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e};LineCurve.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this};function LineCurve3(e,t){Curve.call(this);this.type="LineCurve3";this.v1=e||new Vector3;this.v2=t||new Vector3}LineCurve3.prototype=Object.create(Curve.prototype);LineCurve3.prototype.constructor=LineCurve3;LineCurve3.prototype.isLineCurve3=true;LineCurve3.prototype.getPoint=function(e,t){const n=t||new Vector3;if(e===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(e).add(this.v1)}return n};LineCurve3.prototype.getPointAt=function(e,t){return this.getPoint(e,t)};LineCurve3.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.v1.copy(e.v1);this.v2.copy(e.v2);return this};LineCurve3.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e};LineCurve3.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this};function QuadraticBezierCurve(e,t,n){Curve.call(this);this.type="QuadraticBezierCurve";this.v0=e||new Vector2;this.v1=t||new Vector2;this.v2=n||new Vector2}QuadraticBezierCurve.prototype=Object.create(Curve.prototype);QuadraticBezierCurve.prototype.constructor=QuadraticBezierCurve;QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;QuadraticBezierCurve.prototype.getPoint=function(e,t){const n=t||new Vector2;const r=this.v0,i=this.v1,a=this.v2;n.set(QuadraticBezier(e,r.x,i.x,a.x),QuadraticBezier(e,r.y,i.y,a.y));return n};QuadraticBezierCurve.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);return this};QuadraticBezierCurve.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e};QuadraticBezierCurve.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this};function QuadraticBezierCurve3(e,t,n){Curve.call(this);this.type="QuadraticBezierCurve3";this.v0=e||new Vector3;this.v1=t||new Vector3;this.v2=n||new Vector3}QuadraticBezierCurve3.prototype=Object.create(Curve.prototype);QuadraticBezierCurve3.prototype.constructor=QuadraticBezierCurve3;QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;QuadraticBezierCurve3.prototype.getPoint=function(e,t){const n=t||new Vector3;const r=this.v0,i=this.v1,a=this.v2;n.set(QuadraticBezier(e,r.x,i.x,a.x),QuadraticBezier(e,r.y,i.y,a.y),QuadraticBezier(e,r.z,i.z,a.z));return n};QuadraticBezierCurve3.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.v0.copy(e.v0);this.v1.copy(e.v1);this.v2.copy(e.v2);return this};QuadraticBezierCurve3.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.v0=this.v0.toArray();e.v1=this.v1.toArray();e.v2=this.v2.toArray();return e};QuadraticBezierCurve3.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.v0.fromArray(e.v0);this.v1.fromArray(e.v1);this.v2.fromArray(e.v2);return this};function SplineCurve(e){Curve.call(this);this.type="SplineCurve";this.points=e||[]}SplineCurve.prototype=Object.create(Curve.prototype);SplineCurve.prototype.constructor=SplineCurve;SplineCurve.prototype.isSplineCurve=true;SplineCurve.prototype.getPoint=function(e,t){const n=t||new Vector2;const r=this.points;const i=(r.length-1)*e;const a=Math.floor(i);const o=i-a;const s=r[a===0?a:a-1];const c=r[a];const l=r[a>r.length-2?r.length-1:a+1];const u=r[a>r.length-3?r.length-1:a+2];n.set(CatmullRom(o,s.x,c.x,l.x,u.x),CatmullRom(o,s.y,c.y,l.y,u.y));return n};SplineCurve.prototype.copy=function(e){Curve.prototype.copy.call(this,e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push(n.clone())}return this};SplineCurve.prototype.toJSON=function(){const e=Curve.prototype.toJSON.call(this);e.points=[];for(let t=0,n=this.points.length;t<n;t++){const n=this.points[t];e.points.push(n.toArray())}return e};SplineCurve.prototype.fromJSON=function(e){Curve.prototype.fromJSON.call(this,e);this.points=[];for(let t=0,n=e.points.length;t<n;t++){const n=e.points[t];this.points.push((new Vector2).fromArray(n))}return this};var Curves=Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});function CurvePath(){Curve.call(this);this.type="CurvePath";this.curves=[];this.autoClose=false}CurvePath.prototype=Object.assign(Object.create(Curve.prototype),{constructor:CurvePath,add:function(e){this.curves.push(e)},closePath:function(){const e=this.curves[0].getPoint(0);const t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){this.curves.push(new LineCurve(t,e))}},getPoint:function(e){const t=e*this.getLength();const n=this.getCurveLengths();let r=0;while(r<n.length){if(n[r]>=t){const e=n[r]-t;const i=this.curves[r];const a=i.getLength();const o=a===0?0:1-e/a;return i.getPointAt(o)}r++}return null},getLength:function(){const e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths}const e=[];let t=0;for(let n=0,r=this.curves.length;n<r;n++){t+=this.curves[n].getLength();e.push(t)}this.cacheLengths=e;return e},getSpacedPoints:function(e){if(e===undefined)e=40;const t=[];for(let n=0;n<=e;n++){t.push(this.getPoint(n/e))}if(this.autoClose){t.push(t[0])}return t},getPoints:function(e){e=e||12;const t=[];let n;for(let r=0,i=this.curves;r<i.length;r++){const a=i[r];const o=a&&a.isEllipseCurve?e*2:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?e*a.points.length:e;const s=a.getPoints(o);for(let e=0;e<s.length;e++){const r=s[e];if(n&&n.equals(r))continue;t.push(r);n=r}}if(this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])){t.push(t[0])}return t},copy:function(e){Curve.prototype.copy.call(this,e);this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const n=e.curves[t];this.curves.push(n.clone())}this.autoClose=e.autoClose;return this},toJSON:function(){const e=Curve.prototype.toJSON.call(this);e.autoClose=this.autoClose;e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const n=this.curves[t];e.curves.push(n.toJSON())}return e},fromJSON:function(e){Curve.prototype.fromJSON.call(this,e);this.autoClose=e.autoClose;this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const n=e.curves[t];this.curves.push((new Curves[n.type]).fromJSON(n))}return this}});function Path(e){CurvePath.call(this);this.type="Path";this.currentPoint=new Vector2;if(e){this.setFromPoints(e)}}Path.prototype=Object.assign(Object.create(CurvePath.prototype),{constructor:Path,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++){this.lineTo(e[t].x,e[t].y)}return this},moveTo:function(e,t){this.currentPoint.set(e,t);return this},lineTo:function(e,t){const n=new LineCurve(this.currentPoint.clone(),new Vector2(e,t));this.curves.push(n);this.currentPoint.set(e,t);return this},quadraticCurveTo:function(e,t,n,r){const i=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(e,t),new Vector2(n,r));this.curves.push(i);this.currentPoint.set(n,r);return this},bezierCurveTo:function(e,t,n,r,i,a){const o=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(e,t),new Vector2(n,r),new Vector2(i,a));this.curves.push(o);this.currentPoint.set(i,a);return this},splineThru:function(e){const t=[this.currentPoint.clone()].concat(e);const n=new SplineCurve(t);this.curves.push(n);this.currentPoint.copy(e[e.length-1]);return this},arc:function(e,t,n,r,i,a){const o=this.currentPoint.x;const s=this.currentPoint.y;this.absarc(e+o,t+s,n,r,i,a);return this},absarc:function(e,t,n,r,i,a){this.absellipse(e,t,n,n,r,i,a);return this},ellipse:function(e,t,n,r,i,a,o,s){const c=this.currentPoint.x;const l=this.currentPoint.y;this.absellipse(e+c,t+l,n,r,i,a,o,s);return this},absellipse:function(e,t,n,r,i,a,o,s){const c=new EllipseCurve(e,t,n,r,i,a,o,s);if(this.curves.length>0){const e=c.getPoint(0);if(!e.equals(this.currentPoint)){this.lineTo(e.x,e.y)}}this.curves.push(c);const l=c.getPoint(1);this.currentPoint.copy(l);return this},copy:function(e){CurvePath.prototype.copy.call(this,e);this.currentPoint.copy(e.currentPoint);return this},toJSON:function(){const e=CurvePath.prototype.toJSON.call(this);e.currentPoint=this.currentPoint.toArray();return e},fromJSON:function(e){CurvePath.prototype.fromJSON.call(this,e);this.currentPoint.fromArray(e.currentPoint);return this}});function Shape(e){Path.call(this,e);this.uuid=MathUtils.generateUUID();this.type="Shape";this.holes=[]}Shape.prototype=Object.assign(Object.create(Path.prototype),{constructor:Shape,getPointsHoles:function(e){const t=[];for(let n=0,r=this.holes.length;n<r;n++){t[n]=this.holes[n].getPoints(e)}return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){Path.prototype.copy.call(this,e);this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const n=e.holes[t];this.holes.push(n.clone())}return this},toJSON:function(){const e=Path.prototype.toJSON.call(this);e.uuid=this.uuid;e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const n=this.holes[t];e.holes.push(n.toJSON())}return e},fromJSON:function(e){Path.prototype.fromJSON.call(this,e);this.uuid=e.uuid;this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const n=e.holes[t];this.holes.push((new Path).fromJSON(n))}return this}});function Light(e,t){Object3D.call(this);this.type="Light";this.color=new Color(e);this.intensity=t!==undefined?t:1;this.receiveShadow=undefined}Light.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Light,isLight:true,copy:function(e){Object3D.prototype.copy.call(this,e);this.color.copy(e.color);this.intensity=e.intensity;return this},toJSON:function(e){const t=Object3D.prototype.toJSON.call(this,e);t.object.color=this.color.getHex();t.object.intensity=this.intensity;if(this.groundColor!==undefined)t.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)t.object.distance=this.distance;if(this.angle!==undefined)t.object.angle=this.angle;if(this.decay!==undefined)t.object.decay=this.decay;if(this.penumbra!==undefined)t.object.penumbra=this.penumbra;if(this.shadow!==undefined)t.object.shadow=this.shadow.toJSON();return t}});function HemisphereLight(e,t,n){Light.call(this,e,n);this.type="HemisphereLight";this.castShadow=undefined;this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.groundColor=new Color(t)}HemisphereLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:HemisphereLight,isHemisphereLight:true,copy:function(e){Light.prototype.copy.call(this,e);this.groundColor.copy(e.groundColor);return this}});function LightShadow(e){this.camera=e;this.bias=0;this.normalBias=0;this.radius=1;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4;this.autoUpdate=true;this.needsUpdate=false;this._frustum=new Frustum;this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)]}Object.assign(LightShadow.prototype,{_projScreenMatrix:new Matrix4,_lightPositionWorld:new Vector3,_lookTarget:new Vector3,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(e){const t=this.camera,n=this.matrix,r=this._projScreenMatrix,i=this._lookTarget,a=this._lightPositionWorld;a.setFromMatrixPosition(e.matrixWorld);t.position.copy(a);i.setFromMatrixPosition(e.target.matrixWorld);t.lookAt(i);t.updateMatrixWorld();r.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);this._frustum.setFromProjectionMatrix(r);n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);n.multiply(t.projectionMatrix);n.multiply(t.matrixWorldInverse)},getViewport:function(e){return this._viewports[e]},getFrameExtents:function(){return this._frameExtents},copy:function(e){this.camera=e.camera.clone();this.bias=e.bias;this.radius=e.radius;this.mapSize.copy(e.mapSize);return this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){const e={};if(this.bias!==0)e.bias=this.bias;if(this.normalBias!==0)e.normalBias=this.normalBias;if(this.radius!==1)e.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)e.mapSize=this.mapSize.toArray();e.camera=this.camera.toJSON(false).object;delete e.camera.matrix;return e}});function SpotLightShadow(){LightShadow.call(this,new PerspectiveCamera(50,1,.5,500));this.focus=1}SpotLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:SpotLightShadow,isSpotLightShadow:true,updateMatrices:function(e){const t=this.camera;const n=MathUtils.RAD2DEG*2*e.angle*this.focus;const r=this.mapSize.width/this.mapSize.height;const i=e.distance||t.far;if(n!==t.fov||r!==t.aspect||i!==t.far){t.fov=n;t.aspect=r;t.far=i;t.updateProjectionMatrix()}LightShadow.prototype.updateMatrices.call(this,e)}});function SpotLight(e,t,n,r,i,a){Light.call(this,e,t);this.type="SpotLight";this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D;Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}});this.distance=n!==undefined?n:0;this.angle=r!==undefined?r:Math.PI/3;this.penumbra=i!==undefined?i:0;this.decay=a!==undefined?a:1;this.shadow=new SpotLightShadow}SpotLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:SpotLight,isSpotLight:true,copy:function(e){Light.prototype.copy.call(this,e);this.distance=e.distance;this.angle=e.angle;this.penumbra=e.penumbra;this.decay=e.decay;this.target=e.target.clone();this.shadow=e.shadow.clone();return this}});function PointLightShadow(){LightShadow.call(this,new PerspectiveCamera(90,1,.5,500));this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[new Vector4(2,1,1,1),new Vector4(0,1,1,1),new Vector4(3,1,1,1),new Vector4(1,1,1,1),new Vector4(3,0,1,1),new Vector4(1,0,1,1)];this._cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)];this._cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)]}PointLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:PointLightShadow,isPointLightShadow:true,updateMatrices:function(e,t){if(t===undefined)t=0;const n=this.camera,r=this.matrix,i=this._lightPositionWorld,a=this._lookTarget,o=this._projScreenMatrix;i.setFromMatrixPosition(e.matrixWorld);n.position.copy(i);a.copy(n.position);a.add(this._cubeDirections[t]);n.up.copy(this._cubeUps[t]);n.lookAt(a);n.updateMatrixWorld();r.makeTranslation(-i.x,-i.y,-i.z);o.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse);this._frustum.setFromProjectionMatrix(o)}});function PointLight(e,t,n,r){Light.call(this,e,t);this.type="PointLight";Object.defineProperty(this,"power",{get:function(){return this.intensity*4*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}});this.distance=n!==undefined?n:0;this.decay=r!==undefined?r:1;this.shadow=new PointLightShadow}PointLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:PointLight,isPointLight:true,copy:function(e){Light.prototype.copy.call(this,e);this.distance=e.distance;this.decay=e.decay;this.shadow=e.shadow.clone();return this}});function OrthographicCamera(e,t,n,r,i,a){Camera.call(this);this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=e!==undefined?e:-1;this.right=t!==undefined?t:1;this.top=n!==undefined?n:1;this.bottom=r!==undefined?r:-1;this.near=i!==undefined?i:.1;this.far=a!==undefined?a:2e3;this.updateProjectionMatrix()}OrthographicCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:OrthographicCamera,isOrthographicCamera:true,copy:function(e,t){Camera.prototype.copy.call(this,e,t);this.left=e.left;this.right=e.right;this.top=e.top;this.bottom=e.bottom;this.near=e.near;this.far=e.far;this.zoom=e.zoom;this.view=e.view===null?null:Object.assign({},e.view);return this},setViewOffset:function(e,t,n,r,i,a){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=i;this.view.height=a;this.updateProjectionMatrix()},clearViewOffset:function(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()},updateProjectionMatrix:function(){const e=(this.right-this.left)/(2*this.zoom);const t=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const r=(this.top+this.bottom)/2;let i=n-e;let a=n+e;let o=r+t;let s=r-t;if(this.view!==null&&this.view.enabled){const e=(this.right-this.left)/this.view.fullWidth/this.zoom;const t=(this.top-this.bottom)/this.view.fullHeight/this.zoom;i+=e*this.view.offsetX;a=i+e*this.view.width;o-=t*this.view.offsetY;s=o-t*this.view.height}this.projectionMatrix.makeOrthographic(i,a,o,s,this.near,this.far);this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){const t=Object3D.prototype.toJSON.call(this,e);t.object.zoom=this.zoom;t.object.left=this.left;t.object.right=this.right;t.object.top=this.top;t.object.bottom=this.bottom;t.object.near=this.near;t.object.far=this.far;if(this.view!==null)t.object.view=Object.assign({},this.view);return t}});function DirectionalLightShadow(){LightShadow.call(this,new OrthographicCamera(-5,5,5,-5,.5,500))}DirectionalLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:DirectionalLightShadow,isDirectionalLightShadow:true,updateMatrices:function(e){LightShadow.prototype.updateMatrices.call(this,e)}});function DirectionalLight(e,t){Light.call(this,e,t);this.type="DirectionalLight";this.position.copy(Object3D.DefaultUp);this.updateMatrix();this.target=new Object3D;this.shadow=new DirectionalLightShadow}DirectionalLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:DirectionalLight,isDirectionalLight:true,copy:function(e){Light.prototype.copy.call(this,e);this.target=e.target.clone();this.shadow=e.shadow.clone();return this}});function AmbientLight(e,t){Light.call(this,e,t);this.type="AmbientLight";this.castShadow=undefined}AmbientLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:AmbientLight,isAmbientLight:true});function RectAreaLight(e,t,n,r){Light.call(this,e,t);this.type="RectAreaLight";this.width=n!==undefined?n:10;this.height=r!==undefined?r:10}RectAreaLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:RectAreaLight,isRectAreaLight:true,copy:function(e){Light.prototype.copy.call(this,e);this.width=e.width;this.height=e.height;return this},toJSON:function(e){const t=Light.prototype.toJSON.call(this,e);t.object.width=this.width;t.object.height=this.height;return t}});class SphericalHarmonics3{constructor(){Object.defineProperty(this,"isSphericalHarmonics3",{value:true});this.coefficients=[];for(let e=0;e<9;e++){this.coefficients.push(new Vector3)}}set(e){for(let t=0;t<9;t++){this.coefficients[t].copy(e[t])}return this}zero(){for(let e=0;e<9;e++){this.coefficients[e].set(0,0,0)}return this}getAt(e,t){const n=e.x,r=e.y,i=e.z;const a=this.coefficients;t.copy(a[0]).multiplyScalar(.282095);t.addScaledVector(a[1],.488603*r);t.addScaledVector(a[2],.488603*i);t.addScaledVector(a[3],.488603*n);t.addScaledVector(a[4],1.092548*(n*r));t.addScaledVector(a[5],1.092548*(r*i));t.addScaledVector(a[6],.315392*(3*i*i-1));t.addScaledVector(a[7],1.092548*(n*i));t.addScaledVector(a[8],.546274*(n*n-r*r));return t}getIrradianceAt(e,t){const n=e.x,r=e.y,i=e.z;const a=this.coefficients;t.copy(a[0]).multiplyScalar(.886227);t.addScaledVector(a[1],2*.511664*r);t.addScaledVector(a[2],2*.511664*i);t.addScaledVector(a[3],2*.511664*n);t.addScaledVector(a[4],2*.429043*n*r);t.addScaledVector(a[5],2*.429043*r*i);t.addScaledVector(a[6],.743125*i*i-.247708);t.addScaledVector(a[7],2*.429043*n*i);t.addScaledVector(a[8],.429043*(n*n-r*r));return t}add(e){for(let t=0;t<9;t++){this.coefficients[t].add(e.coefficients[t])}return this}addScaledSH(e,t){for(let n=0;n<9;n++){this.coefficients[n].addScaledVector(e.coefficients[n],t)}return this}scale(e){for(let t=0;t<9;t++){this.coefficients[t].multiplyScalar(e)}return this}lerp(e,t){for(let n=0;n<9;n++){this.coefficients[n].lerp(e.coefficients[n],t)}return this}equals(e){for(let t=0;t<9;t++){if(!this.coefficients[t].equals(e.coefficients[t])){return false}}return true}copy(e){return this.set(e.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(e,t){if(t===undefined)t=0;const n=this.coefficients;for(let r=0;r<9;r++){n[r].fromArray(e,t+r*3)}return this}toArray(e,t){if(e===undefined)e=[];if(t===undefined)t=0;const n=this.coefficients;for(let r=0;r<9;r++){n[r].toArray(e,t+r*3)}return e}static getBasisAt(e,t){const n=e.x,r=e.y,i=e.z;t[0]=.282095;t[1]=.488603*r;t[2]=.488603*i;t[3]=.488603*n;t[4]=1.092548*n*r;t[5]=1.092548*r*i;t[6]=.315392*(3*i*i-1);t[7]=1.092548*n*i;t[8]=.546274*(n*n-r*r)}}function LightProbe(e,t){Light.call(this,undefined,t);this.type="LightProbe";this.sh=e!==undefined?e:new SphericalHarmonics3}LightProbe.prototype=Object.assign(Object.create(Light.prototype),{constructor:LightProbe,isLightProbe:true,copy:function(e){Light.prototype.copy.call(this,e);this.sh.copy(e.sh);return this},fromJSON:function(e){this.intensity=e.intensity;this.sh.fromArray(e.sh);return this},toJSON:function(e){const t=Light.prototype.toJSON.call(this,e);t.object.sh=this.sh.toArray();return t}});function MaterialLoader(e){Loader.call(this,e);this.textures={}}MaterialLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:MaterialLoader,load:function(e,t,n,r){const i=this;const a=new FileLoader(i.manager);a.setPath(i.path);a.setRequestHeader(i.requestHeader);a.load(e,(function(n){try{t(i.parse(JSON.parse(n)))}catch(t){if(r){r(t)}else{console.error(t)}i.manager.itemError(e)}}),n,r)},parse:function(e){const t=this.textures;function n(e){if(t[e]===undefined){console.warn("THREE.MaterialLoader: Undefined texture",e)}return t[e]}const r=new Materials[e.type];if(e.uuid!==undefined)r.uuid=e.uuid;if(e.name!==undefined)r.name=e.name;if(e.color!==undefined)r.color.setHex(e.color);if(e.roughness!==undefined)r.roughness=e.roughness;if(e.metalness!==undefined)r.metalness=e.metalness;if(e.sheen!==undefined)r.sheen=(new Color).setHex(e.sheen);if(e.emissive!==undefined)r.emissive.setHex(e.emissive);if(e.specular!==undefined)r.specular.setHex(e.specular);if(e.shininess!==undefined)r.shininess=e.shininess;if(e.clearcoat!==undefined)r.clearcoat=e.clearcoat;if(e.clearcoatRoughness!==undefined)r.clearcoatRoughness=e.clearcoatRoughness;if(e.fog!==undefined)r.fog=e.fog;if(e.flatShading!==undefined)r.flatShading=e.flatShading;if(e.blending!==undefined)r.blending=e.blending;if(e.combine!==undefined)r.combine=e.combine;if(e.side!==undefined)r.side=e.side;if(e.opacity!==undefined)r.opacity=e.opacity;if(e.transparent!==undefined)r.transparent=e.transparent;if(e.alphaTest!==undefined)r.alphaTest=e.alphaTest;if(e.depthTest!==undefined)r.depthTest=e.depthTest;if(e.depthWrite!==undefined)r.depthWrite=e.depthWrite;if(e.colorWrite!==undefined)r.colorWrite=e.colorWrite;if(e.stencilWrite!==undefined)r.stencilWrite=e.stencilWrite;if(e.stencilWriteMask!==undefined)r.stencilWriteMask=e.stencilWriteMask;if(e.stencilFunc!==undefined)r.stencilFunc=e.stencilFunc;if(e.stencilRef!==undefined)r.stencilRef=e.stencilRef;if(e.stencilFuncMask!==undefined)r.stencilFuncMask=e.stencilFuncMask;if(e.stencilFail!==undefined)r.stencilFail=e.stencilFail;if(e.stencilZFail!==undefined)r.stencilZFail=e.stencilZFail;if(e.stencilZPass!==undefined)r.stencilZPass=e.stencilZPass;if(e.wireframe!==undefined)r.wireframe=e.wireframe;if(e.wireframeLinewidth!==undefined)r.wireframeLinewidth=e.wireframeLinewidth;if(e.wireframeLinecap!==undefined)r.wireframeLinecap=e.wireframeLinecap;if(e.wireframeLinejoin!==undefined)r.wireframeLinejoin=e.wireframeLinejoin;if(e.rotation!==undefined)r.rotation=e.rotation;if(e.linewidth!==1)r.linewidth=e.linewidth;if(e.dashSize!==undefined)r.dashSize=e.dashSize;if(e.gapSize!==undefined)r.gapSize=e.gapSize;if(e.scale!==undefined)r.scale=e.scale;if(e.polygonOffset!==undefined)r.polygonOffset=e.polygonOffset;if(e.polygonOffsetFactor!==undefined)r.polygonOffsetFactor=e.polygonOffsetFactor;if(e.polygonOffsetUnits!==undefined)r.polygonOffsetUnits=e.polygonOffsetUnits;if(e.skinning!==undefined)r.skinning=e.skinning;if(e.morphTargets!==undefined)r.morphTargets=e.morphTargets;if(e.morphNormals!==undefined)r.morphNormals=e.morphNormals;if(e.dithering!==undefined)r.dithering=e.dithering;if(e.vertexTangents!==undefined)r.vertexTangents=e.vertexTangents;if(e.visible!==undefined)r.visible=e.visible;if(e.toneMapped!==undefined)r.toneMapped=e.toneMapped;if(e.userData!==undefined)r.userData=e.userData;if(e.vertexColors!==undefined){if(typeof e.vertexColors==="number"){r.vertexColors=e.vertexColors>0?true:false}else{r.vertexColors=e.vertexColors}}if(e.uniforms!==undefined){for(const t in e.uniforms){const i=e.uniforms[t];r.uniforms[t]={};switch(i.type){case"t":r.uniforms[t].value=n(i.value);break;case"c":r.uniforms[t].value=(new Color).setHex(i.value);break;case"v2":r.uniforms[t].value=(new Vector2).fromArray(i.value);break;case"v3":r.uniforms[t].value=(new Vector3).fromArray(i.value);break;case"v4":r.uniforms[t].value=(new Vector4).fromArray(i.value);break;case"m3":r.uniforms[t].value=(new Matrix3).fromArray(i.value);break;case"m4":r.uniforms[t].value=(new Matrix4).fromArray(i.value);break;default:r.uniforms[t].value=i.value}}}if(e.defines!==undefined)r.defines=e.defines;if(e.vertexShader!==undefined)r.vertexShader=e.vertexShader;if(e.fragmentShader!==undefined)r.fragmentShader=e.fragmentShader;if(e.extensions!==undefined){for(const t in e.extensions){r.extensions[t]=e.extensions[t]}}if(e.shading!==undefined)r.flatShading=e.shading===1;if(e.size!==undefined)r.size=e.size;if(e.sizeAttenuation!==undefined)r.sizeAttenuation=e.sizeAttenuation;if(e.map!==undefined)r.map=n(e.map);if(e.matcap!==undefined)r.matcap=n(e.matcap);if(e.alphaMap!==undefined)r.alphaMap=n(e.alphaMap);if(e.bumpMap!==undefined)r.bumpMap=n(e.bumpMap);if(e.bumpScale!==undefined)r.bumpScale=e.bumpScale;if(e.normalMap!==undefined)r.normalMap=n(e.normalMap);if(e.normalMapType!==undefined)r.normalMapType=e.normalMapType;if(e.normalScale!==undefined){let t=e.normalScale;if(Array.isArray(t)===false){t=[t,t]}r.normalScale=(new Vector2).fromArray(t)}if(e.displacementMap!==undefined)r.displacementMap=n(e.displacementMap);if(e.displacementScale!==undefined)r.displacementScale=e.displacementScale;if(e.displacementBias!==undefined)r.displacementBias=e.displacementBias;if(e.roughnessMap!==undefined)r.roughnessMap=n(e.roughnessMap);if(e.metalnessMap!==undefined)r.metalnessMap=n(e.metalnessMap);if(e.emissiveMap!==undefined)r.emissiveMap=n(e.emissiveMap);if(e.emissiveIntensity!==undefined)r.emissiveIntensity=e.emissiveIntensity;if(e.specularMap!==undefined)r.specularMap=n(e.specularMap);if(e.envMap!==undefined)r.envMap=n(e.envMap);if(e.envMapIntensity!==undefined)r.envMapIntensity=e.envMapIntensity;if(e.reflectivity!==undefined)r.reflectivity=e.reflectivity;if(e.refractionRatio!==undefined)r.refractionRatio=e.refractionRatio;if(e.lightMap!==undefined)r.lightMap=n(e.lightMap);if(e.lightMapIntensity!==undefined)r.lightMapIntensity=e.lightMapIntensity;if(e.aoMap!==undefined)r.aoMap=n(e.aoMap);if(e.aoMapIntensity!==undefined)r.aoMapIntensity=e.aoMapIntensity;if(e.gradientMap!==undefined)r.gradientMap=n(e.gradientMap);if(e.clearcoatMap!==undefined)r.clearcoatMap=n(e.clearcoatMap);if(e.clearcoatRoughnessMap!==undefined)r.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap);if(e.clearcoatNormalMap!==undefined)r.clearcoatNormalMap=n(e.clearcoatNormalMap);if(e.clearcoatNormalScale!==undefined)r.clearcoatNormalScale=(new Vector2).fromArray(e.clearcoatNormalScale);if(e.transmission!==undefined)r.transmission=e.transmission;if(e.transmissionMap!==undefined)r.transmissionMap=n(e.transmissionMap);return r},setTextures:function(e){this.textures=e;return this}});const LoaderUtils={decodeText:function(e){if(typeof TextDecoder!=="undefined"){return(new TextDecoder).decode(e)}let t="";for(let n=0,r=e.length;n<r;n++){t+=String.fromCharCode(e[n])}try{return decodeURIComponent(escape(t))}catch(e){return t}},extractUrlBase:function(e){const t=e.lastIndexOf("/");if(t===-1)return"./";return e.substr(0,t+1)}};function InstancedBufferGeometry(){BufferGeometry.call(this);this.type="InstancedBufferGeometry";this.instanceCount=Infinity}InstancedBufferGeometry.prototype=Object.assign(Object.create(BufferGeometry.prototype),{constructor:InstancedBufferGeometry,isInstancedBufferGeometry:true,copy:function(e){BufferGeometry.prototype.copy.call(this,e);this.instanceCount=e.instanceCount;return this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){const e=BufferGeometry.prototype.toJSON.call(this);e.instanceCount=this.instanceCount;e.isInstancedBufferGeometry=true;return e}});function InstancedBufferAttribute(e,t,n,r){if(typeof n==="number"){r=n;n=false;console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")}BufferAttribute.call(this,e,t,n);this.meshPerAttribute=r||1}InstancedBufferAttribute.prototype=Object.assign(Object.create(BufferAttribute.prototype),{constructor:InstancedBufferAttribute,isInstancedBufferAttribute:true,copy:function(e){BufferAttribute.prototype.copy.call(this,e);this.meshPerAttribute=e.meshPerAttribute;return this},toJSON:function(){const e=BufferAttribute.prototype.toJSON.call(this);e.meshPerAttribute=this.meshPerAttribute;e.isInstancedBufferAttribute=true;return e}});function BufferGeometryLoader(e){Loader.call(this,e)}BufferGeometryLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:BufferGeometryLoader,load:function(e,t,n,r){const i=this;const a=new FileLoader(i.manager);a.setPath(i.path);a.setRequestHeader(i.requestHeader);a.load(e,(function(n){try{t(i.parse(JSON.parse(n)))}catch(t){if(r){r(t)}else{console.error(t)}i.manager.itemError(e)}}),n,r)},parse:function(e){const t={};const n={};function r(e,n){if(t[n]!==undefined)return t[n];const r=e.interleavedBuffers;const a=r[n];const o=i(e,a.buffer);const s=new TYPED_ARRAYS[a.type](o);const c=new InterleavedBuffer(s,a.stride);c.uuid=a.uuid;t[n]=c;return c}function i(e,t){if(n[t]!==undefined)return n[t];const r=e.arrayBuffers;const i=r[t];const a=new Uint32Array(i).buffer;n[t]=a;return a}const a=e.isInstancedBufferGeometry?new InstancedBufferGeometry:new BufferGeometry;const o=e.data.index;if(o!==undefined){const e=new TYPED_ARRAYS[o.type](o.array);a.setIndex(new BufferAttribute(e,1))}const s=e.data.attributes;for(const t in s){const n=s[t];let i;if(n.isInterleavedBufferAttribute){const t=r(e.data,n.data);i=new InterleavedBufferAttribute(t,n.itemSize,n.offset,n.normalized)}else{const e=new TYPED_ARRAYS[n.type](n.array);const t=n.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;i=new t(e,n.itemSize,n.normalized)}if(n.name!==undefined)i.name=n.name;a.setAttribute(t,i)}const c=e.data.morphAttributes;if(c){for(const t in c){const n=c[t];const i=[];for(let t=0,a=n.length;t<a;t++){const a=n[t];let o;if(a.isInterleavedBufferAttribute){const t=r(e.data,a.data);o=new InterleavedBufferAttribute(t,a.itemSize,a.offset,a.normalized)}else{const e=new TYPED_ARRAYS[a.type](a.array);o=new BufferAttribute(e,a.itemSize,a.normalized)}if(a.name!==undefined)o.name=a.name;i.push(o)}a.morphAttributes[t]=i}}const l=e.data.morphTargetsRelative;if(l){a.morphTargetsRelative=true}const u=e.data.groups||e.data.drawcalls||e.data.offsets;if(u!==undefined){for(let e=0,t=u.length;e!==t;++e){const t=u[e];a.addGroup(t.start,t.count,t.materialIndex)}}const h=e.data.boundingSphere;if(h!==undefined){const e=new Vector3;if(h.center!==undefined){e.fromArray(h.center)}a.boundingSphere=new Sphere(e,h.radius)}if(e.name)a.name=e.name;if(e.userData)a.userData=e.userData;return a}});const TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:typeof Uint8ClampedArray!=="undefined"?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};class ObjectLoader extends Loader{constructor(e){super(e)}load(e,t,n,r){const i=this;const a=this.path===""?LoaderUtils.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;const o=new FileLoader(i.manager);o.setPath(this.path);o.setRequestHeader(this.requestHeader);o.load(e,(function(n){let a=null;try{a=JSON.parse(n)}catch(t){if(r!==undefined)r(t);console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message);return}const o=a.metadata;if(o===undefined||o.type===undefined||o.type.toLowerCase()==="geometry"){console.error("THREE.ObjectLoader: Can't load "+e);return}i.parse(a,t)}),n,r)}parse(e,t){const n=this.parseShape(e.shapes);const r=this.parseGeometries(e.geometries,n);const i=this.parseImages(e.images,(function(){if(t!==undefined)t(s)}));const a=this.parseTextures(e.textures,i);const o=this.parseMaterials(e.materials,a);const s=this.parseObject(e.object,r,o);if(e.animations){s.animations=this.parseAnimations(e.animations)}if(e.images===undefined||e.images.length===0){if(t!==undefined)t(s)}return s}parseShape(e){const t={};if(e!==undefined){for(let n=0,r=e.length;n<r;n++){const r=(new Shape).fromJSON(e[n]);t[r.uuid]=r}}return t}parseGeometries(e,t){const n={};let r;if(e!==undefined){const i=new BufferGeometryLoader;for(let a=0,o=e.length;a<o;a++){let o;const s=e[a];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new Geometries[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new Geometries[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new Geometries[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new Geometries[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new Geometries[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new Geometries[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new Geometries[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new Geometries[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new Geometries[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new Geometries[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"TubeGeometry":case"TubeBufferGeometry":o=new Geometries[s.type]((new Curves[s.path.type]).fromJSON(s.path),s.tubularSegments,s.radius,s.radialSegments,s.closed);break;case"LatheGeometry":case"LatheBufferGeometry":o=new Geometries[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new Geometries[s.type](s.vertices,s.indices,s.radius,s.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":r=[];for(let e=0,n=s.shapes.length;e<n;e++){const n=t[s.shapes[e]];r.push(n)}o=new Geometries[s.type](r,s.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":r=[];for(let e=0,n=s.shapes.length;e<n;e++){const n=t[s.shapes[e]];r.push(n)}const e=s.options.extrudePath;if(e!==undefined){s.options.extrudePath=(new Curves[e.type]).fromJSON(e)}o=new Geometries[s.type](r,s.options);break;case"BufferGeometry":case"InstancedBufferGeometry":o=i.parse(s);break;case"Geometry":console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid;if(s.name!==undefined)o.name=s.name;if(o.isBufferGeometry===true&&s.userData!==undefined)o.userData=s.userData;n[s.uuid]=o}}return n}parseMaterials(e,t){const n={};const r={};if(e!==undefined){const i=new MaterialLoader;i.setTextures(t);for(let t=0,a=e.length;t<a;t++){const a=e[t];if(a.type==="MultiMaterial"){const e=[];for(let t=0;t<a.materials.length;t++){const r=a.materials[t];if(n[r.uuid]===undefined){n[r.uuid]=i.parse(r)}e.push(n[r.uuid])}r[a.uuid]=e}else{if(n[a.uuid]===undefined){n[a.uuid]=i.parse(a)}r[a.uuid]=n[a.uuid]}}}return r}parseAnimations(e){const t=[];for(let n=0;n<e.length;n++){const r=e[n];const i=AnimationClip.parse(r);if(r.uuid!==undefined)i.uuid=r.uuid;t.push(i)}return t}parseImages(e,t){const n=this;const r={};let i;function a(e){n.manager.itemStart(e);return i.load(e,(function(){n.manager.itemEnd(e)}),undefined,(function(){n.manager.itemError(e);n.manager.itemEnd(e)}))}if(e!==undefined&&e.length>0){const o=new LoadingManager(t);i=new ImageLoader(o);i.setCrossOrigin(this.crossOrigin);for(let t=0,i=e.length;t<i;t++){const i=e[t];const o=i.url;if(Array.isArray(o)){r[i.uuid]=[];for(let e=0,t=o.length;e<t;e++){const t=o[e];const s=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:n.resourcePath+t;r[i.uuid].push(a(s))}}else{const e=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(i.url)?i.url:n.resourcePath+i.url;r[i.uuid]=a(e)}}}return r}parseTextures(e,t){function n(e,t){if(typeof e==="number")return e;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e);return t[e]}const r={};if(e!==undefined){for(let i=0,a=e.length;i<a;i++){const a=e[i];if(a.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',a.uuid)}if(t[a.image]===undefined){console.warn("THREE.ObjectLoader: Undefined image",a.image)}let o;if(Array.isArray(t[a.image])){o=new CubeTexture(t[a.image])}else{o=new Texture(t[a.image])}o.needsUpdate=true;o.uuid=a.uuid;if(a.name!==undefined)o.name=a.name;if(a.mapping!==undefined)o.mapping=n(a.mapping,TEXTURE_MAPPING);if(a.offset!==undefined)o.offset.fromArray(a.offset);if(a.repeat!==undefined)o.repeat.fromArray(a.repeat);if(a.center!==undefined)o.center.fromArray(a.center);if(a.rotation!==undefined)o.rotation=a.rotation;if(a.wrap!==undefined){o.wrapS=n(a.wrap[0],TEXTURE_WRAPPING);o.wrapT=n(a.wrap[1],TEXTURE_WRAPPING)}if(a.format!==undefined)o.format=a.format;if(a.type!==undefined)o.type=a.type;if(a.encoding!==undefined)o.encoding=a.encoding;if(a.minFilter!==undefined)o.minFilter=n(a.minFilter,TEXTURE_FILTER);if(a.magFilter!==undefined)o.magFilter=n(a.magFilter,TEXTURE_FILTER);if(a.anisotropy!==undefined)o.anisotropy=a.anisotropy;if(a.flipY!==undefined)o.flipY=a.flipY;if(a.premultiplyAlpha!==undefined)o.premultiplyAlpha=a.premultiplyAlpha;if(a.unpackAlignment!==undefined)o.unpackAlignment=a.unpackAlignment;r[a.uuid]=o}}return r}parseObject(e,t,n){let r;function i(e){if(t[e]===undefined){console.warn("THREE.ObjectLoader: Undefined geometry",e)}return t[e]}function a(e){if(e===undefined)return undefined;if(Array.isArray(e)){const t=[];for(let r=0,i=e.length;r<i;r++){const i=e[r];if(n[i]===undefined){console.warn("THREE.ObjectLoader: Undefined material",i)}t.push(n[i])}return t}if(n[e]===undefined){console.warn("THREE.ObjectLoader: Undefined material",e)}return n[e]}let o,s;switch(e.type){case"Scene":r=new Scene;if(e.background!==undefined){if(Number.isInteger(e.background)){r.background=new Color(e.background)}}if(e.fog!==undefined){if(e.fog.type==="Fog"){r.fog=new Fog(e.fog.color,e.fog.near,e.fog.far)}else if(e.fog.type==="FogExp2"){r.fog=new FogExp2(e.fog.color,e.fog.density)}}break;case"PerspectiveCamera":r=new PerspectiveCamera(e.fov,e.aspect,e.near,e.far);if(e.focus!==undefined)r.focus=e.focus;if(e.zoom!==undefined)r.zoom=e.zoom;if(e.filmGauge!==undefined)r.filmGauge=e.filmGauge;if(e.filmOffset!==undefined)r.filmOffset=e.filmOffset;if(e.view!==undefined)r.view=Object.assign({},e.view);break;case"OrthographicCamera":r=new OrthographicCamera(e.left,e.right,e.top,e.bottom,e.near,e.far);if(e.zoom!==undefined)r.zoom=e.zoom;if(e.view!==undefined)r.view=Object.assign({},e.view);break;case"AmbientLight":r=new AmbientLight(e.color,e.intensity);break;case"DirectionalLight":r=new DirectionalLight(e.color,e.intensity);break;case"PointLight":r=new PointLight(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":r=new RectAreaLight(e.color,e.intensity,e.width,e.height);break;case"SpotLight":r=new SpotLight(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":r=new HemisphereLight(e.color,e.groundColor,e.intensity);break;case"LightProbe":r=(new LightProbe).fromJSON(e);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":o=i(e.geometry);s=a(e.material);r=new Mesh(o,s);break;case"InstancedMesh":o=i(e.geometry);s=a(e.material);const t=e.count;const n=e.instanceMatrix;r=new InstancedMesh(o,s,t);r.instanceMatrix=new BufferAttribute(new Float32Array(n.array),16);break;case"LOD":r=new LOD;break;case"Line":r=new Line(i(e.geometry),a(e.material),e.mode);break;case"LineLoop":r=new LineLoop(i(e.geometry),a(e.material));break;case"LineSegments":r=new LineSegments(i(e.geometry),a(e.material));break;case"PointCloud":case"Points":r=new Points(i(e.geometry),a(e.material));break;case"Sprite":r=new Sprite(a(e.material));break;case"Group":r=new Group;break;default:r=new Object3D}r.uuid=e.uuid;if(e.name!==undefined)r.name=e.name;if(e.matrix!==undefined){r.matrix.fromArray(e.matrix);if(e.matrixAutoUpdate!==undefined)r.matrixAutoUpdate=e.matrixAutoUpdate;if(r.matrixAutoUpdate)r.matrix.decompose(r.position,r.quaternion,r.scale)}else{if(e.position!==undefined)r.position.fromArray(e.position);if(e.rotation!==undefined)r.rotation.fromArray(e.rotation);if(e.quaternion!==undefined)r.quaternion.fromArray(e.quaternion);if(e.scale!==undefined)r.scale.fromArray(e.scale)}if(e.castShadow!==undefined)r.castShadow=e.castShadow;if(e.receiveShadow!==undefined)r.receiveShadow=e.receiveShadow;if(e.shadow){if(e.shadow.bias!==undefined)r.shadow.bias=e.shadow.bias;if(e.shadow.normalBias!==undefined)r.shadow.normalBias=e.shadow.normalBias;if(e.shadow.radius!==undefined)r.shadow.radius=e.shadow.radius;if(e.shadow.mapSize!==undefined)r.shadow.mapSize.fromArray(e.shadow.mapSize);if(e.shadow.camera!==undefined)r.shadow.camera=this.parseObject(e.shadow.camera)}if(e.visible!==undefined)r.visible=e.visible;if(e.frustumCulled!==undefined)r.frustumCulled=e.frustumCulled;if(e.renderOrder!==undefined)r.renderOrder=e.renderOrder;if(e.userData!==undefined)r.userData=e.userData;if(e.layers!==undefined)r.layers.mask=e.layers;if(e.children!==undefined){const i=e.children;for(let e=0;e<i.length;e++){r.add(this.parseObject(i[e],t,n))}}if(e.type==="LOD"){if(e.autoUpdate!==undefined)r.autoUpdate=e.autoUpdate;const t=e.levels;for(let e=0;e<t.length;e++){const n=t[e];const i=r.getObjectByProperty("uuid",n.object);if(i!==undefined){r.addLevel(i,n.distance)}}}return r}setTexturePath(e){console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");return this.setResourcePath(e)}}const TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping};const TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};const TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,LinearFilter:LinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter};function ImageBitmapLoader(e){if(typeof createImageBitmap==="undefined"){console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.")}if(typeof fetch==="undefined"){console.warn("THREE.ImageBitmapLoader: fetch() not supported.")}Loader.call(this,e);this.options={premultiplyAlpha:"none"}}ImageBitmapLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:ImageBitmapLoader,isImageBitmapLoader:true,setOptions:function e(t){this.options=t;return this},load:function(e,t,n,r){if(e===undefined)e="";if(this.path!==undefined)e=this.path+e;e=this.manager.resolveURL(e);const i=this;const a=Cache.get(e);if(a!==undefined){i.manager.itemStart(e);setTimeout((function(){if(t)t(a);i.manager.itemEnd(e)}),0);return a}fetch(e).then((function(e){return e.blob()})).then((function(e){return createImageBitmap(e,i.options)})).then((function(n){Cache.add(e,n);if(t)t(n);i.manager.itemEnd(e)})).catch((function(t){if(r)r(t);i.manager.itemError(e);i.manager.itemEnd(e)}));i.manager.itemStart(e)}});function ShapePath(){this.type="ShapePath";this.color=new Color;this.subPaths=[];this.currentPath=null}Object.assign(ShapePath.prototype,{moveTo:function(e,t){this.currentPath=new Path;this.subPaths.push(this.currentPath);this.currentPath.moveTo(e,t);return this},lineTo:function(e,t){this.currentPath.lineTo(e,t);return this},quadraticCurveTo:function(e,t,n,r){this.currentPath.quadraticCurveTo(e,t,n,r);return this},bezierCurveTo:function(e,t,n,r,i,a){this.currentPath.bezierCurveTo(e,t,n,r,i,a);return this},splineThru:function(e){this.currentPath.splineThru(e);return this},toShapes:function(e,t){function n(e){const t=[];for(let n=0,r=e.length;n<r;n++){const r=e[n];const i=new Shape;i.curves=r.curves;t.push(i)}return t}function r(e,t){const n=t.length;let r=false;for(let i=n-1,a=0;a<n;i=a++){let n=t[i];let o=t[a];let s=o.x-n.x;let c=o.y-n.y;if(Math.abs(c)>Number.EPSILON){if(c<0){n=t[a];s=-s;o=t[i];c=-c}if(e.y<n.y||e.y>o.y)continue;if(e.y===n.y){if(e.x===n.x)returntrue}else{const t=c*(e.x-n.x)-s*(e.y-n.y);if(t===0)returntrue;if(t<0)continue;r=!r}}else{if(e.y!==n.y)continue;if(o.x<=e.x&&e.x<=n.x||n.x<=e.x&&e.x<=o.x)returntrue}}returninside}const i=ShapeUtils.isClockWise;const a=this.subPaths;if(a.length===0)return[];if(t===true)returntoShapesNoHoles(a);let o,s,c;const l=[];if(a.length===1){s=a[0];c=new Shape;c.curves=s.curves;l.push(c);return l}let u=!i(a[0].getPoints());u=e?!u:u;const h=[];const f=[];let d=[];let p=0;let m;f[p]=undefined;d[p]=[];for(let t=0,n=a.length;t<n;t++){s=a[t];m=s.getPoints();o=i(m);o=e?!o:o;if(o){if(!u&&f[p])p++;f[p]={s:new Shape,p:m};f[p].s.curves=s.curves;if(u)p++;d[p]=[]}else{d[p].push({h:s,p:m[0]})}}if(!f[0])returntoShapesNoHoles(a);if(f.length>1){let e=false;const t=[];for(let e=0,t=f.length;e<t;e++){h[e]=[]}for(let n=0,i=f.length;n<i;n++){const i=d[n];for(let a=0;a<i.length;a++){const o=i[a];let s=true;for(let i=0;i<f.length;i++){if(r(o.p,f[i].p)){if(n!==i)t.push({froms:n,tos:i,hole:a});if(s){s=false;h[i].push(o)}else{e=true}}}if(s){h[n].push(o)}}}if(t.length>0){if(!e)d=h}}let g;for(let e=0,t=f.length;e<t;e++){c=f[e].s;l.push(c);g=d[e];for(let e=0,t=g.length;e<t;e++){c.holes.push(g[e].h)}}return l}});function Font(e){this.type="Font";this.data=e}Object.assign(Font.prototype,{isFont:true,generateShapes:function(e,t){if(t===undefined)t=100;const n=[];const r=createPaths(e,t,this.data);for(let e=0,t=r.length;e<t;e++){Array.prototype.push.apply(n,r[e].toShapes())}return n}});function createPaths(e,t,n){const r=Array.from?Array.from(e):String(e).split("");const i=t/n.resolution;const a=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*i;const o=[];let s=0,c=0;for(let e=0;e<r.length;e++){const t=r[e];if(t==="\n"){s=0;c-=a}else{const e=createPath(t,i,s,c,n);s+=e.offsetX;o.push(e.path)}}return o}function createPath(e,t,n,r,i){const a=i.glyphs[e]||i.glyphs["?"];if(!a){console.error('THREE.Font: character "'+e+'" does not exists in font family '+i.familyName+".");return}const o=new ShapePath;let s,c,l,u,h,f,d,p;if(a.o){const e=a._cachedOutline||(a._cachedOutline=a.o.split(" "));for(let i=0,a=e.length;i<a;){const a=e[i++];switch(a){case"m":s=e[i++]*t+n;c=e[i++]*t+r;o.moveTo(s,c);break;case"l":s=e[i++]*t+n;c=e[i++]*t+r;o.lineTo(s,c);break;case"q":l=e[i++]*t+n;u=e[i++]*t+r;h=e[i++]*t+n;f=e[i++]*t+r;o.quadraticCurveTo(h,f,l,u);break;case"b":l=e[i++]*t+n;u=e[i++]*t+r;h=e[i++]*t+n;f=e[i++]*t+r;d=e[i++]*t+n;p=e[i++]*t+r;o.bezierCurveTo(h,f,d,p,l,u);break}}}return{offsetX:a.ha*t,path:o}}function FontLoader(e){Loader.call(this,e)}FontLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:FontLoader,load:function(e,t,n,r){const i=this;const a=new FileLoader(this.manager);a.setPath(this.path);a.setRequestHeader(this.requestHeader);a.load(e,(function(e){let n;try{n=JSON.parse(e)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.");n=JSON.parse(e.substring(65,e.length-2))}const r=i.parse(n);if(t)t(r)}),n,r)},parse:function(e){return new Font(e)}});let _context;const AudioContext={getContext:function(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)}return _context},setContext:function(e){_context=e}};function AudioLoader(e){Loader.call(this,e)}AudioLoader.prototype=Object.assign(Object.create(Loader.prototype),{constructor:AudioLoader,load:function(e,t,n,r){const i=this;const a=new FileLoader(i.manager);a.setResponseType("arraybuffer");a.setPath(i.path);a.setRequestHeader(i.requestHeader);a.load(e,(function(n){try{const e=n.slice(0);const r=AudioContext.getContext();r.decodeAudioData(e,(function(e){t(e)}))}catch(t){if(r){r(t)}else{console.error(t)}i.manager.itemError(e)}}),n,r)}});function HemisphereLightProbe(e,t,n){LightProbe.call(this,undefined,n);const r=(new Color).set(e);const i=(new Color).set(t);const a=new Vector3(r.r,r.g,r.b);const o=new Vector3(i.r,i.g,i.b);const s=Math.sqrt(Math.PI);const c=s*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(s);this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(c)}HemisphereLightProbe.prototype=Object.assign(Object.create(LightProbe.prototype),{constructor:HemisphereLightProbe,isHemisphereLightProbe:true,copy:function(e){LightProbe.prototype.copy.call(this,e);return this},toJSON:function(e){const t=LightProbe.prototype.toJSON.call(this,e);return t}});function AmbientLightProbe(e,t){LightProbe.call(this,undefined,t);const n=(new Color).set(e);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}AmbientLightProbe.prototype=Object.assign(Object.create(LightProbe.prototype),{constructor:AmbientLightProbe,isAmbientLightProbe:true,copy:function(e){LightProbe.prototype.copy.call(this,e);return this},toJSON:function(e){const t=LightProbe.prototype.toJSON.call(this,e);return t}});const _eyeRight=new Matrix4;const _eyeLeft=new Matrix4;function StereoCamera(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new PerspectiveCamera;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}Object.assign(StereoCamera.prototype,{update:function(e){const t=this._cache;const n=t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep;if(n){t.focus=e.focus;t.fov=e.fov;t.aspect=e.aspect*this.aspect;t.near=e.near;t.far=e.far;t.zoom=e.zoom;t.eyeSep=this.eyeSep;const n=e.projectionMatrix.clone();const r=t.eyeSep/2;const i=r*t.near/t.focus;const a=t.near*Math.tan(MathUtils.DEG2RAD*t.fov*.5)/t.zoom;let o,s;_eyeLeft.elements[12]=-r;_eyeRight.elements[12]=r;o=-a*t.aspect+i;s=a*t.aspect+i;n.elements[0]=2*t.near/(s-o);n.elements[8]=(s+o)/(s-o);this.cameraL.projectionMatrix.copy(n);o=-a*t.aspect-i;s=a*t.aspect-i;n.elements[0]=2*t.near/(s-o);n.elements[8]=(s+o)/(s-o);this.cameraR.projectionMatrix.copy(n)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(_eyeRight)}});class Clock{constructor(e){this.autoStart=e!==undefined?e:true;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false}start(){this.startTime=(typeof performance==="undefined"?Date:performance).now();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true}stop(){this.getElapsedTime();this.running=false;this.autoStart=false}getElapsedTime(){this.getDelta();return this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running){this.start();return 0}if(this.running){const t=(typeof performance==="undefined"?Date:performance).now();e=(t-this.oldTime)/1e3;this.oldTime=t;this.elapsedTime+=e}return e}}const _position$2=new Vector3;const _quaternion$3=new Quaternion;const _scale$1=new Vector3;const _orientation=new Vector3;class AudioListener extends Object3D{constructor(){super();this.type="AudioListener";this.context=AudioContext.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;this._clock=new Clock}getInput(){return this.gain}removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null}return this}getFilter(){return this.filter}setFilter(e){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination)}else{this.gain.disconnect(this.context.destination)}this.filter=e;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01);return this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener;const n=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(_position$2,_quaternion$3,_scale$1);_orientation.set(0,0,-1).applyQuaternion(_quaternion$3);if(t.positionX){const e=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(_position$2.x,e);t.positionY.linearRampToValueAtTime(_position$2.y,e);t.positionZ.linearRampToValueAtTime(_position$2.z,e);t.forwardX.linearRampToValueAtTime(_orientation.x,e);t.forwardY.linearRampToValueAtTime(_orientation.y,e);t.forwardZ.linearRampToValueAtTime(_orientation.z,e);t.upX.linearRampToValueAtTime(n.x,e);t.upY.linearRampToValueAtTime(n.y,e);t.upZ.linearRampToValueAtTime(n.z,e)}else{t.setPosition(_position$2.x,_position$2.y,_position$2.z);t.setOrientation(_orientation.x,_orientation.y,_orientation.z,n.x,n.y,n.z)}}}class Audio extends Object3D{constructor(e){super();this.type="Audio";this.listener=e;this.context=e.context;this.gain=this.context.createGain();this.gain.connect(e.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.loopStart=0;this.loopEnd=0;this.offset=0;this.duration=undefined;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.source=null;this.sourceType="empty";this._startedAt=0;this._progress=0;this._connected=false;this.filters=[]}getOutput(){return this.gain}setNodeSource(e){this.hasPlaybackControl=false;this.sourceType="audioNode";this.source=e;this.connect();return this}setMediaElementSource(e){this.hasPlaybackControl=false;this.sourceType="mediaNode";this.source=this.context.createMediaElementSource(e);this.connect();return this}setMediaStreamSource(e){this.hasPlaybackControl=false;this.sourceType="mediaStreamNode";this.source=this.context.createMediaStreamSource(e);this.connect();return this}setBuffer(e){this.buffer=e;this.sourceType="buffer";if(this.autoplay)this.play();return this}play(e){if(e===undefined)e=0;if(this.isPlaying===true){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();t.buffer=this.buffer;t.loop=this.loop;t.loopStart=this.loopStart;t.loopEnd=this.loopEnd;t.onended=this.onEnded.bind(this);t.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=t;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect()}pause(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}if(this.isPlaying===true){this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){this._progress=this._progress%(this.duration||this.buffer.duration)}this.source.stop();this.source.onended=null;this.isPlaying=false}return this}stop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._progress=0;this.source.stop();this.source.onended=null;this.isPlaying=false;return this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++){this.filters[e-1].connect(this.filters[e])}this.filters[this.filters.length-1].connect(this.getOutput())}else{this.source.connect(this.getOutput())}this._connected=true;return this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++){this.filters[e-1].disconnect(this.filters[e])}this.filters[this.filters.length-1].disconnect(this.getOutput())}else{this.source.disconnect(this.getOutput())}this._connected=false;return this}getFilters(){return this.filters}setFilters(e){if(!e)e=[];if(this._connected===true){this.disconnect();this.filters=e;this.connect()}else{this.filters=e}return this}setDetune(e){this.detune=e;if(this.source.detune===undefined)return;if(this.isPlaying===true){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01)}return this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.playbackRate=e;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01)}return this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=false}getLoop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return false}return this.loop}setLoop(e){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.loop=e;if(this.isPlaying===true){this.source.loop=this.loop}return this}setLoopStart(e){this.loopStart=e;return this}setLoopEnd(e){this.loopEnd=e;return this}getVolume(){return this.gain.gain.value}setVolume(e){this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01);return this}}const _position$3=new Vector3;const _quaternion$4=new Quaternion;const _scale$2=new Vector3;const _orientation$1=new Vector3;class PositionalAudio extends Audio{constructor(e){super(e);this.panner=this.context.createPanner();this.panner.panningModel="HRTF";this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){this.panner.refDistance=e;return this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){this.panner.rolloffFactor=e;return this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){this.panner.distanceModel=e;return this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){this.panner.maxDistance=e;return this}setDirectionalCone(e,t,n){this.panner.coneInnerAngle=e;this.panner.coneOuterAngle=t;this.panner.coneOuterGain=n;return this}updateMatrixWorld(e){super.updateMatrixWorld(e);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(_position$3,_quaternion$4,_scale$2);_orientation$1.set(0,0,1).applyQuaternion(_quaternion$4);const t=this.panner;if(t.positionX){const e=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(_position$3.x,e);t.positionY.linearRampToValueAtTime(_position$3.y,e);t.positionZ.linearRampToValueAtTime(_position$3.z,e);t.orientationX.linearRampToValueAtTime(_orientation$1.x,e);t.orientationY.linearRampToValueAtTime(_orientation$1.y,e);t.orientationZ.linearRampToValueAtTime(_orientation$1.z,e)}else{t.setPosition(_position$3.x,_position$3.y,_position$3.z);t.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z)}}}class AudioAnalyser{constructor(e,t){this.analyser=e.context.createAnalyser();this.analyser.fftSize=t!==undefined?t:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);e.getOutput().connect(this.analyser)}getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let n=0;n<t.length;n++){e+=t[n]}return e/t.length}}function PropertyMixer(e,t,n){this.binding=e;this.valueSize=n;let r,i,a;switch(t){case"quaternion":r=this._slerp;i=this._slerpAdditive;a=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(n*6);this._workIndex=5;break;case"string":case"bool":r=this._select;i=this._select;a=this._setAdditiveIdentityOther;this.buffer=new Array(n*5);break;default:r=this._lerp;i=this._lerpAdditive;a=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(n*5)}this._mixBufferRegion=r;this._mixBufferRegionAdditive=i;this._setIdentity=a;this._origIndex=3;this._addIndex=4;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;this.useCount=0;this.referenceCount=0}Object.assign(PropertyMixer.prototype,{accumulate:function(e,t){const n=this.buffer,r=this.valueSize,i=e*r+r;let a=this.cumulativeWeight;if(a===0){for(let e=0;e!==r;++e){n[i+e]=n[e]}a=t}else{a+=t;const e=t/a;this._mixBufferRegion(n,i,0,e,r)}this.cumulativeWeight=a},accumulateAdditive:function(e){const t=this.buffer,n=this.valueSize,r=n*this._addIndex;if(this.cumulativeWeightAdditive===0){this._setIdentity()}this._mixBufferRegionAdditive(t,r,0,e,n);this.cumulativeWeightAdditive+=e},apply:function(e){const t=this.valueSize,n=this.buffer,r=e*t+t,i=this.cumulativeWeight,a=this.cumulativeWeightAdditive,o=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(i<1){const e=t*this._origIndex;this._mixBufferRegion(n,r,e,1-i,t)}if(a>0){this._mixBufferRegionAdditive(n,r,this._addIndex*t,1,t)}for(let e=t,i=t+t;e!==i;++e){if(n[e]!==n[e+t]){o.setValue(n,r);break}}},saveOriginalState:function(){const e=this.binding;const t=this.buffer,n=this.valueSize,r=n*this._origIndex;e.getValue(t,r);for(let e=n,i=r;e!==i;++e){t[e]=t[r+e%n]}this._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0},restoreOriginalState:function(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)},_setAdditiveIdentityNumeric:function(){const e=this._addIndex*this.valueSize;const t=e+this.valueSize;for(let n=e;n<t;n++){this.buffer[n]=0}},_setAdditiveIdentityQuaternion:function(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1},_setAdditiveIdentityOther:function(){const e=this._origIndex*this.valueSize;const t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++){this.buffer[t+n]=this.buffer[e+n]}},_select:function(e,t,n,r,i){if(r>=.5){for(let r=0;r!==i;++r){e[t+r]=e[n+r]}}},_slerp:function(e,t,n,r){Quaternion.slerpFlat(e,t,e,t,e,n,r)},_slerpAdditive:function(e,t,n,r,i){const a=this._workIndex*i;Quaternion.multiplyQuaternionsFlat(e,a,e,t,e,n);Quaternion.slerpFlat(e,t,e,t,e,a,r)},_lerp:function(e,t,n,r,i){const a=1-r;for(let o=0;o!==i;++o){const i=t+o;e[i]=e[i]*a+e[n+o]*r}},_lerpAdditive:function(e,t,n,r,i){for(let a=0;a!==i;++a){const i=t+a;e[i]=e[i]+e[n+a]*r}}});const _RESERVED_CHARS_RE="\\[\\]\\.:\\/";const _reservedRe=new RegExp("["+_RESERVED_CHARS_RE+"]","g");const _wordChar="[^"+_RESERVED_CHARS_RE+"]";const _wordCharOrDot="[^"+_RESERVED_CHARS_RE.replace("\\.","")+"]";const _directoryRe=/((?:WC+[\/:])*)/.source.replace("WC",_wordChar);const _nodeRe=/(WCOD+)?/.source.replace("WCOD",_wordCharOrDot);const _objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",_wordChar);const _propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",_wordChar);const _trackRe=new RegExp(""+"^"+_directoryRe+_nodeRe+_objectRe+_propertyRe+"$");const _supportedObjectNames=["material","materials","bones"];function Composite(e,t,n){const r=n||PropertyBinding.parseTrackName(t);this._targetGroup=e;this._bindings=e.subscribe_(t,r)}Object.assign(Composite.prototype,{getValue:function(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,r=this._bindings[n];if(r!==undefined)r.getValue(e,t)},setValue:function(e,t){const n=this._bindings;for(let r=this._targetGroup.nCachedObjects_,i=n.length;r!==i;++r){n[r].setValue(e,t)}},bind:function(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t){e[t].bind()}},unbind:function(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t){e[t].unbind()}}});function PropertyBinding(e,t,n){this.path=t;this.parsedPath=n||PropertyBinding.parseTrackName(t);this.node=PropertyBinding.findNode(e,this.parsedPath.nodeName)||e;this.rootNode=e}Object.assign(PropertyBinding,{Composite:Composite,create:function(e,t,n){if(!(e&&e.isAnimationObjectGroup)){return new PropertyBinding(e,t,n)}else{return new PropertyBinding.Composite(e,t,n)}},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(_reservedRe,"")},parseTrackName:function(e){const t=_trackRe.exec(e);if(!t){throw new Error("PropertyBinding: Cannot parse trackName: "+e)}const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]};const r=n.nodeName&&n.nodeName.lastIndexOf(".");if(r!==undefined&&r!==-1){const e=n.nodeName.substring(r+1);if(_supportedObjectNames.indexOf(e)!==-1){n.nodeName=n.nodeName.substring(0,r);n.objectName=e}}if(n.propertyName===null||n.propertyName.length===0){throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e)}return n},findNode:function(e,t){if(!t||t===""||t==="."||t===-1||t===e.name||t===e.uuid){return e}if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==undefined){return n}}if(e.children){const n=function(e){for(let r=0;r<e.length;r++){const i=e[r];if(i.name===t||i.uuid===t){return i}const a=n(i.children);if(a)return a}return null};const r=n(e.children);if(r){return r}}return null}});Object.assign(PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function e(t,n){t[n]=this.node[this.propertyName]},function e(t,n){const r=this.resolvedProperty;for(let e=0,i=r.length;e!==i;++e){t[n++]=r[e]}},function e(t,n){t[n]=this.resolvedProperty[this.propertyIndex]},function e(t,n){this.resolvedProperty.toArray(t,n)}],SetterByBindingTypeAndVersioning:[[function e(t,n){this.targetObject[this.propertyName]=t[n]},function e(t,n){this.targetObject[this.propertyName]=t[n];this.targetObject.needsUpdate=true},function e(t,n){this.targetObject[this.propertyName]=t[n];this.targetObject.matrixWorldNeedsUpdate=true}],[function e(t,n){const r=this.resolvedProperty;for(let e=0,i=r.length;e!==i;++e){r[e]=t[n++]}},function e(t,n){const r=this.resolvedProperty;for(let e=0,i=r.length;e!==i;++e){r[e]=t[n++]}this.targetObject.needsUpdate=true},function e(t,n){const r=this.resolvedProperty;for(let e=0,i=r.length;e!==i;++e){r[e]=t[n++]}this.targetObject.matrixWorldNeedsUpdate=true}],[function e(t,n){this.resolvedProperty[this.propertyIndex]=t[n]},function e(t,n){this.resolvedProperty[this.propertyIndex]=t[n];this.targetObject.needsUpdate=true},function e(t,n){this.resolvedProperty[this.propertyIndex]=t[n];this.targetObject.matrixWorldNeedsUpdate=true}],[function e(t,n){this.resolvedProperty.fromArray(t,n)},function e(t,n){this.resolvedProperty.fromArray(t,n);this.targetObject.needsUpdate=true},function e(t,n){this.resolvedProperty.fromArray(t,n);this.targetObject.matrixWorldNeedsUpdate=true}]],getValue:function e(t,n){this.bind();this.getValue(t,n)},setValue:function e(t,n){this.bind();this.setValue(t,n)},bind:function(){let e=this.node;const t=this.parsedPath;const n=t.objectName;const r=t.propertyName;let i=t.propertyIndex;if(!e){e=PropertyBinding.findNode(this.rootNode,t.nodeName)||this.rootNode;this.node=e}this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(!e){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(n){let r=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let t=0;t<e.length;t++){if(e[t].name===r){r=t;break}}break;default:if(e[n]===undefined){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(r!==undefined){if(e[r]===undefined){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[r]}}const a=e[r];if(a===undefined){const n=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+r+" but it wasn't found.",e);return}let o=this.Versioning.None;this.targetObject=e;if(e.needsUpdate!==undefined){o=this.Versioning.NeedsUpdate}else if(e.matrixWorldNeedsUpdate!==undefined){o=this.Versioning.MatrixWorldNeedsUpdate}let s=this.BindingType.Direct;if(i!==undefined){if(r==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}if(e.morphTargetDictionary[i]!==undefined){i=e.morphTargetDictionary[i]}}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}s=this.BindingType.ArrayElement;this.resolvedProperty=a;this.propertyIndex=i}else if(a.fromArray!==undefined&&a.toArray!==undefined){s=this.BindingType.HasFromToArray;this.resolvedProperty=a}else if(Array.isArray(a)){s=this.BindingType.EntireArray;this.resolvedProperty=a}else{this.propertyName=r}this.getValue=this.GetterByBindingType[s];this.setValue=this.SetterByBindingTypeAndVersioning[s][o]},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}});Object.assign(PropertyBinding.prototype,{_getValue_unbound:PropertyBinding.prototype.getValue,_setValue_unbound:PropertyBinding.prototype.setValue});function AnimationObjectGroup(){this.uuid=MathUtils.generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let t=0,n=arguments.length;t!==n;++t){e[arguments[t].uuid]=t}this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}Object.assign(AnimationObjectGroup.prototype,{isAnimationObjectGroup:true,add:function(){const e=this._objects,t=this._indicesByUUID,n=this._paths,r=this._parsedPaths,i=this._bindings,a=i.length;let o=undefined,s=e.length,c=this.nCachedObjects_;for(let l=0,u=arguments.length;l!==u;++l){const u=arguments[l],h=u.uuid;let f=t[h];if(f===undefined){f=s++;t[h]=f;e.push(u);for(let e=0,t=a;e!==t;++e){i[e].push(new PropertyBinding(u,n[e],r[e]))}}else if(f<c){o=e[f];const s=--c,l=e[s];t[l.uuid]=f;e[f]=l;t[h]=s;e[s]=u;for(let e=0,t=a;e!==t;++e){const t=i[e],a=t[s];let o=t[f];t[f]=a;if(o===undefined){o=new PropertyBinding(u,n[e],r[e])}t[s]=o}}else if(e[f]!==o){console.error("THREE.AnimationObjectGroup: Different objects with the same UUID "+"detected. Clean the caches or recreate your infrastructure when reloading scenes.")}}this.nCachedObjects_=c},remove:function(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,r=n.length;let i=this.nCachedObjects_;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a],s=o.uuid,c=t[s];if(c!==undefined&&c>=i){const a=i++,l=e[a];t[l.uuid]=c;e[c]=l;t[s]=a;e[a]=o;for(let e=0,t=r;e!==t;++e){const t=n[e],r=t[a],i=t[c];t[c]=r;t[a]=i}}}this.nCachedObjects_=i},uncache:function(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,r=n.length;let i=this.nCachedObjects_,a=e.length;for(let o=0,s=arguments.length;o!==s;++o){const s=arguments[o],c=s.uuid,l=t[c];if(l!==undefined){delete t[c];if(l<i){const o=--i,s=e[o],c=--a,u=e[c];t[s.uuid]=l;e[l]=s;t[u.uuid]=o;e[o]=u;e.pop();for(let e=0,t=r;e!==t;++e){const t=n[e],r=t[o],i=t[c];t[l]=r;t[o]=i;t.pop()}}else{const i=--a,o=e[i];t[o.uuid]=l;e[l]=o;e.pop();for(let e=0,t=r;e!==t;++e){const t=n[e];t[l]=t[i];t.pop()}}}}this.nCachedObjects_=i},subscribe_:function(e,t){const n=this._bindingsIndicesByPath;let r=n[e];const i=this._bindings;if(r!==undefined)return i[r];const a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,u=new Array(c);r=i.length;n[e]=r;a.push(e);o.push(t);i.push(u);for(let n=l,r=s.length;n!==r;++n){const r=s[n];u[n]=new PropertyBinding(r,e,t)}return u},unsubscribe_:function(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==undefined){const r=this._paths,i=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o],c=e[o];t[c]=n;a[n]=s;a.pop();i[n]=i[o];i.pop();r[n]=r[o];r.pop()}}});class AnimationAction{constructor(e,t,n,r){this._mixer=e;this._clip=t;this._localRoot=n||null;this.blendMode=r||t.blendMode;const i=t.tracks,a=i.length,o=new Array(a);const s={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(let e=0;e!==a;++e){const t=i[e].createInterpolant(null);o[e]=t;t.settings=s}this._interpolantSettings=s;this._interpolants=o;this._propertyBindings=new Array(a);this._cacheIndex=null;this._byClipCacheIndex=null;this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;this._startTime=null;this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;this.paused=false;this.enabled=true;this.clampWhenFinished=false;this.zeroSlopeAtStart=true;this.zeroSlopeAtEnd=true}play(){this._mixer._activateAction(this);return this}stop(){this._mixer._deactivateAction(this);return this.reset()}reset(){this.paused=false;this.enabled=true;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){this._startTime=e;return this}setLoop(e,t){this.loop=e;this.repetitions=t;return this}setEffectiveWeight(e){this.weight=e;this._effectiveWeight=this.enabled?e:0;return this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){e.fadeOut(t);this.fadeIn(t);if(n){const n=this._clip.duration,r=e._clip.duration,i=r/n,a=n/r;e.warp(1,i,t);this.warp(a,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;if(e!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(e)}return this}setEffectiveTimeScale(e){this.timeScale=e;this._effectiveTimeScale=this.paused?0:e;return this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){this.timeScale=this._clip.duration/e;return this.stopWarping()}syncWith(e){this.time=e.time;this.timeScale=e.timeScale;return this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const r=this._mixer,i=r.time,a=this.timeScale;let o=this._timeScaleInterpolant;if(o===null){o=r._lendControlInterpolant();this._timeScaleInterpolant=o}const s=o.parameterPositions,c=o.sampleValues;s[0]=i;s[1]=i+n;c[0]=e/a;c[1]=t/a;return this}stopWarping(){const e=this._timeScaleInterpolant;if(e!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(e)}return this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,r){if(!this.enabled){this._updateWeight(e);return}const i=this._startTime;if(i!==null){const r=(e-i)*n;if(r<0||n===0){return}this._startTime=null;t=n*r}t*=this._updateTimeScale(e);const a=this._updateTime(t);const o=this._updateWeight(e);if(o>0){const e=this._interpolants;const t=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(let n=0,r=e.length;n!==r;++n){e[n].evaluate(a);t[n].accumulateAdditive(o)}break;case NormalAnimationBlendMode:default:for(let n=0,i=e.length;n!==i;++n){e[n].evaluate(a);t[n].accumulate(r,o)}}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const r=n.evaluate(e)[0];t*=r;if(e>n.parameterPositions[1]){this.stopFading();if(r===0){this.enabled=false}}}}this._effectiveWeight=t;return t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const r=n.evaluate(e)[0];t*=r;if(e>n.parameterPositions[1]){this.stopWarping();if(t===0){this.paused=true}else{this.timeScale=t}}}}this._effectiveTimeScale=t;return t}_updateTime(e){const t=this._clip.duration;const n=this.loop;let r=this.time+e;let i=this._loopCount;const a=n===LoopPingPong;if(e===0){if(i===-1)return r;return a&&(i&1)===1?t-r:r}if(n===LoopOnce){if(i===-1){this._loopCount=0;this._setEndings(true,true,false)}e:{if(r>=t){r=t}else if(r<0){r=0}else{this.time=r;break e}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=r;this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(i===-1){if(e>=0){i=0;this._setEndings(true,this.repetitions===0,a)}else{this._setEndings(this.repetitions===0,true,a)}}if(r>=t||r<0){const n=Math.floor(r/t);r-=t*n;i+=Math.abs(n);const o=this.repetitions-i;if(o<=0){if(this.clampWhenFinished)this.paused=true;else this.enabled=false;r=e>0?t:0;this.time=r;this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1})}else{if(o===1){const t=e<0;this._setEndings(t,!t,a)}else{this._setEndings(false,false,a)}this._loopCount=i;this.time=r;this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else{this.time=r}if(a&&(i&1)===1){return t-r}}return r}_setEndings(e,t,n){const r=this._interpolantSettings;if(n){r.endingStart=ZeroSlopeEnding;r.endingEnd=ZeroSlopeEnding}else{if(e){r.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding}else{r.endingStart=WrapAroundEnding}if(t){r.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding}else{r.endingEnd=WrapAroundEnding}}}_scheduleFading(e,t,n){const r=this._mixer,i=r.time;let a=this._weightInterpolant;if(a===null){a=r._lendControlInterpolant();this._weightInterpolant=a}const o=a.parameterPositions,s=a.sampleValues;o[0]=i;s[0]=t;o[1]=i+e;s[1]=n;return this}}function AnimationMixer(e){this._root=e;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1}AnimationMixer.prototype=Object.assign(Object.create(EventDispatcher.prototype),{constructor:AnimationMixer,_bindAction:function(e,t){const n=e._localRoot||this._root,r=e._clip.tracks,i=r.length,a=e._propertyBindings,o=e._interpolants,s=n.uuid,c=this._bindingsByRootAndName;let l=c[s];if(l===undefined){l={};c[s]=l}for(let e=0;e!==i;++e){const i=r[e],c=i.name;let u=l[c];if(u!==undefined){a[e]=u}else{u=a[e];if(u!==undefined){if(u._cacheIndex===null){++u.referenceCount;this._addInactiveBinding(u,s,c)}continue}const r=t&&t._propertyBindings[e].binding.parsedPath;u=new PropertyMixer(PropertyBinding.create(n,c,r),i.ValueTypeName,i.getValueSize());++u.referenceCount;this._addInactiveBinding(u,s,c);a[e]=u}o[e].resultBuffer=u.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const t=(e._localRoot||this._root).uuid,n=e._clip.uuid,r=this._actionsByClip[n];this._bindAction(e,r&&r.knownActions[0]);this._addInactiveAction(e,n,t)}const t=e._propertyBindings;for(let e=0,n=t.length;e!==n;++e){const n=t[e];if(n.useCount++===0){this._lendBinding(n);n.saveOriginalState()}}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let e=0,n=t.length;e!==n;++e){const n=t[e];if(--n.useCount===0){n.restoreOriginalState();this._takeBackBinding(n)}}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions},_addInactiveAction:function(e,t,n){const r=this._actions,i=this._actionsByClip;let a=i[t];if(a===undefined){a={knownActions:[e],actionByRoot:{}};e._byClipCacheIndex=0;i[t]=a}else{const t=a.knownActions;e._byClipCacheIndex=t.length;t.push(e)}e._cacheIndex=r.length;r.push(e);a.actionByRoot[n]=e},_removeInactiveAction:function(e){const t=this._actions,n=t[t.length-1],r=e._cacheIndex;n._cacheIndex=r;t[r]=n;t.pop();e._cacheIndex=null;const i=e._clip.uuid,a=this._actionsByClip,o=a[i],s=o.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l;s[l]=c;s.pop();e._byClipCacheIndex=null;const u=o.actionByRoot,h=(e._localRoot||this._root).uuid;delete u[h];if(s.length===0){delete a[i]}this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){const t=e._propertyBindings;for(let e=0,n=t.length;e!==n;++e){const n=t[e];if(--n.referenceCount===0){this._removeInactiveBinding(n)}}},_lendAction:function(e){const t=this._actions,n=e._cacheIndex,r=this._nActiveActions++,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i},_takeBackAction:function(e){const t=this._actions,n=e._cacheIndex,r=--this._nActiveActions,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i},_addInactiveBinding:function(e,t,n){const r=this._bindingsByRootAndName,i=this._bindings;let a=r[t];if(a===undefined){a={};r[t]=a}a[n]=e;e._cacheIndex=i.length;i.push(e)},_removeInactiveBinding:function(e){const t=this._bindings,n=e.binding,r=n.rootNode.uuid,i=n.path,a=this._bindingsByRootAndName,o=a[r],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c;t[c]=s;t.pop();delete o[i];if(Object.keys(o).length===0){delete a[r]}},_lendBinding:function(e){const t=this._bindings,n=e._cacheIndex,r=this._nActiveBindings++,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i},_takeBackBinding:function(e){const t=this._bindings,n=e._cacheIndex,r=--this._nActiveBindings,i=t[r];e._cacheIndex=r;t[r]=e;i._cacheIndex=n;t[n]=i},_lendControlInterpolant:function(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];if(n===undefined){n=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer);n.__cacheIndex=t;e[t]=n}return n},_takeBackControlInterpolant:function(e){const t=this._controlInterpolants,n=e.__cacheIndex,r=--this._nActiveControlInterpolants,i=t[r];e.__cacheIndex=r;t[r]=e;i.__cacheIndex=n;t[n]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t,n){const r=t||this._root,i=r.uuid;let a=typeof e==="string"?AnimationClip.findByName(r,e):e;const o=a!==null?a.uuid:e;const s=this._actionsByClip[o];let c=null;if(n===undefined){if(a!==null){n=a.blendMode}else{n=NormalAnimationBlendMode}}if(s!==undefined){const e=s.actionByRoot[i];if(e!==undefined&&e.blendMode===n){return e}c=s.knownActions[0];if(a===null)a=c._clip}if(a===null)return null;const l=new AnimationAction(this,a,t,n);this._bindAction(l,c);this._addInactiveAction(l,o,i);return l},existingAction:function(e,t){const n=t||this._root,r=n.uuid,i=typeof e==="string"?AnimationClip.findByName(n,e):e,a=i?i.uuid:e,o=this._actionsByClip[a];if(o!==undefined){return o.actionByRoot[r]||null}return null},stopAllAction:function(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n){e[n].stop()}return this},update:function(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,r=this.time+=e,i=Math.sign(e),a=this._accuIndex^=1;for(let o=0;o!==n;++o){const n=t[o];n._update(r,e,i,a)}const o=this._bindings,s=this._nActiveBindings;for(let e=0;e!==s;++e){o[e].apply(a)}return this},setTime:function(e){this.time=0;for(let e=0;e<this._actions.length;e++){this._actions[e].time=0}return this.update(e)},getRoot:function(){return this._root},uncacheClip:function(e){const t=this._actions,n=e.uuid,r=this._actionsByClip,i=r[n];if(i!==undefined){const e=i.knownActions;for(let n=0,r=e.length;n!==r;++n){const r=e[n];this._deactivateAction(r);const i=r._cacheIndex,a=t[t.length-1];r._cacheIndex=null;r._byClipCacheIndex=null;a._cacheIndex=i;t[i]=a;t.pop();this._removeInactiveBindingsForAction(r)}delete r[n]}},uncacheRoot:function(e){const t=e.uuid,n=this._actionsByClip;for(const e in n){const r=n[e].actionByRoot,i=r[t];if(i!==undefined){this._deactivateAction(i);this._removeInactiveAction(i)}}const r=this._bindingsByRootAndName,i=r[t];if(i!==undefined){for(const e in i){const t=i[e];t.restoreOriginalState();this._removeInactiveBinding(t)}}},uncacheAction:function(e,t){const n=this.existingAction(e,t);if(n!==null){this._deactivateAction(n);this._removeInactiveAction(n)}}});class Uniform{constructor(e){if(typeof e==="string"){console.warn("THREE.Uniform: Type parameter is no longer needed.");e=arguments[1]}this.value=e}clone(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone())}}function InstancedInterleavedBuffer(e,t,n){InterleavedBuffer.call(this,e,t);this.meshPerAttribute=n||1}InstancedInterleavedBuffer.prototype=Object.assign(Object.create(InterleavedBuffer.prototype),{constructor:InstancedInterleavedBuffer,isInstancedInterleavedBuffer:true,copy:function(e){InterleavedBuffer.prototype.copy.call(this,e);this.meshPerAttribute=e.meshPerAttribute;return this},clone:function(e){const t=InterleavedBuffer.prototype.clone.call(this,e);t.meshPerAttribute=this.meshPerAttribute;return t},toJSON:function(e){const t=InterleavedBuffer.prototype.toJSON.call(this,e);t.isInstancedInterleavedBuffer=true;t.meshPerAttribute=this.meshPerAttribute;return t}});function GLBufferAttribute(e,t,n,r,i){this.buffer=e;this.type=t;this.itemSize=n;this.elementSize=r;this.count=i;this.version=0}Object.defineProperty(GLBufferAttribute.prototype,"needsUpdate",{set:function(e){if(e===true)this.version++}});Object.assign(GLBufferAttribute.prototype,{isGLBufferAttribute:true,setBuffer:function(e){this.buffer=e;return this},setType:function(e,t){this.type=e;this.elementSize=t;return this},setItemSize:function(e){this.itemSize=e;return this},setCount:function(e){this.count=e;return this}});function Raycaster(e,t,n,r){this.ray=new Ray(e,t);this.near=n||0;this.far=r||Infinity;this.camera=null;this.layers=new Layers;this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points}}})}function ascSort(e,t){return e.distance-t.distance}function intersectObject(e,t,n,r){if(e.layers.test(t.layers)){e.raycast(t,n)}if(r===true){const r=e.children;for(let e=0,i=r.length;e<i;e++){intersectObject(r[e],t,n,true)}}}Object.assign(Raycaster.prototype,{set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){if(t&&t.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(t.matrixWorld);this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize();this.camera=t}else if(t&&t.isOrthographicCamera){this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t);this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld);this.camera=t}else{console.error("THREE.Raycaster: Unsupported camera type.")}},intersectObject:function(e,t,n){const r=n||[];intersectObject(e,this,r,t);r.sort(ascSort);return r},intersectObjects:function(e,t,n){const r=n||[];if(Array.isArray(e)===false){console.warn("THREE.Raycaster.intersectObjects: objects is not an Array.");return r}for(let n=0,i=e.length;n<i;n++){intersectObject(e[n],this,r,t)}r.sort(ascSort);return r}});class Spherical{constructor(e=1,t=0,n=0){this.radius=e;this.phi=t;this.theta=n;return this}set(e,t,n){this.radius=e;this.phi=t;this.theta=n;return this}clone(){return(new this.constructor).copy(this)}copy(e){this.radius=e.radius;this.phi=e.phi;this.theta=e.theta;return this}makeSafe(){const e=1e-6;this.phi=Math.max(e,Math.min(Math.PI-e,this.phi));return this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){this.radius=Math.sqrt(e*e+t*t+n*n);if(this.radius===0){this.theta=0;this.phi=0}else{this.theta=Math.atan2(e,n);this.phi=Math.acos(MathUtils.clamp(t/this.radius,-1,1))}return this}}class Cylindrical{constructor(e,t,n){this.radius=e!==undefined?e:1;this.theta=t!==undefined?t:0;this.y=n!==undefined?n:0;return this}set(e,t,n){this.radius=e;this.theta=t;this.y=n;return this}clone(){return(new this.constructor).copy(this)}copy(e){this.radius=e.radius;this.theta=e.theta;this.y=e.y;return this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){this.radius=Math.sqrt(e*e+n*n);this.theta=Math.atan2(e,n);this.y=t;return this}}const _vector$7=new Vector2;class Box2{constructor(e,t){Object.defineProperty(this,"isBox2",{value:true});this.min=e!==undefined?e:new Vector2(+Infinity,+Infinity);this.max=t!==undefined?t:new Vector2(-Infinity,-Infinity)}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++){this.expandByPoint(e[t])}return this}setFromCenterAndSize(e,t){const n=_vector$7.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){if(e===undefined){console.warn("THREE.Box2: .getCenter() target is now required");e=new Vector2}return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){if(e===undefined){console.warn("THREE.Box2: .getSize() target is now required");e=new Vector2}return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){if(t===undefined){console.warn("THREE.Box2: .getParameter() target is now required");t=new Vector2}return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y?false:true}clampPoint(e,t){if(t===undefined){console.warn("THREE.Box2: .clampPoint() target is now required");t=new Vector2}return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){const t=_vector$7.copy(e).clamp(this.min,this.max);return t.sub(e).length()}intersect(e){this.min.max(e.min);this.max.min(e.max);return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const _startP=new Vector3;const _startEnd=new Vector3;class Line3{constructor(e,t){this.start=e!==undefined?e:new Vector3;this.end=t!==undefined?t:new Vector3}set(e,t){this.start.copy(e);this.end.copy(t);return this}clone(){return(new this.constructor).copy(this)}copy(e){this.start.copy(e.start);this.end.copy(e.end);return this}getCenter(e){if(e===undefined){console.warn("THREE.Line3: .getCenter() target is now required");e=new Vector3}return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){if(e===undefined){console.warn("THREE.Line3: .delta() target is now required");e=new Vector3}return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){if(t===undefined){console.warn("THREE.Line3: .at() target is now required");t=new Vector3}return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){_startP.subVectors(e,this.start);_startEnd.subVectors(this.end,this.start);const n=_startEnd.dot(_startEnd);const r=_startEnd.dot(_startP);let i=r/n;if(t){i=MathUtils.clamp(i,0,1)}return i}closestPointToPoint(e,t,n){const r=this.closestPointToPointParameter(e,t);if(n===undefined){console.warn("THREE.Line3: .closestPointToPoint() target is now required");n=new Vector3}return this.delta(n).multiplyScalar(r).add(this.start)}applyMatrix4(e){this.start.applyMatrix4(e);this.end.applyMatrix4(e);return this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}function ImmediateRenderObject(e){Object3D.call(this);this.material=e;this.render=function(){};this.hasPositions=false;this.hasNormals=false;this.hasColors=false;this.hasUvs=false;this.positionArray=null;this.normalArray=null;this.colorArray=null;this.uvArray=null;this.count=0}ImmediateRenderObject.prototype=Object.create(Object3D.prototype);ImmediateRenderObject.prototype.constructor=ImmediateRenderObject;ImmediateRenderObject.prototype.isImmediateRenderObject=true;const _vector$8=new Vector3;class SpotLightHelper extends Object3D{constructor(e,t){super();this.light=e;this.light.updateMatrixWorld();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=t;const n=new BufferGeometry;const r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let e=0,t=1,n=32;e<n;e++,t++){const i=e/n*Math.PI*2;const a=t/n*Math.PI*2;r.push(Math.cos(i),Math.sin(i),1,Math.cos(a),Math.sin(a),1)}n.setAttribute("position",new Float32BufferAttribute(r,3));const i=new LineBasicMaterial({fog:false,toneMapped:false});this.cone=new LineSegments(n,i);this.add(this.cone);this.update()}dispose(){this.cone.geometry.dispose();this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const e=this.light.distance?this.light.distance:1e3;const t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e);_vector$8.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(_vector$8);if(this.color!==undefined){this.cone.material.color.set(this.color)}else{this.cone.material.color.copy(this.light.color)}}}const _vector$9=new Vector3;const _boneMatrix=new Matrix4;const _matrixWorldInv=new Matrix4;class SkeletonHelper extends LineSegments{constructor(e){const t=getBoneList(e);const n=new BufferGeometry;const r=[];const i=[];const a=new Color(0,0,1);const o=new Color(0,1,0);for(let e=0;e<t.length;e++){const n=t[e];if(n.parent&&n.parent.isBone){r.push(0,0,0);r.push(0,0,0);i.push(a.r,a.g,a.b);i.push(o.r,o.g,o.b)}}n.setAttribute("position",new Float32BufferAttribute(r,3));n.setAttribute("color",new Float32BufferAttribute(i,3));const s=new LineBasicMaterial({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});super(n,s);this.type="SkeletonHelper";this.isSkeletonHelper=true;this.root=e;this.bones=t;this.matrix=e.matrixWorld;this.matrixAutoUpdate=false}updateMatrixWorld(e){const t=this.bones;const n=this.geometry;const r=n.getAttribute("position");_matrixWorldInv.getInverse(this.root.matrixWorld);for(let e=0,n=0;e<t.length;e++){const i=t[e];if(i.parent&&i.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,i.matrixWorld);_vector$9.setFromMatrixPosition(_boneMatrix);r.setXYZ(n,_vector$9.x,_vector$9.y,_vector$9.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,i.parent.matrixWorld);_vector$9.setFromMatrixPosition(_boneMatrix);r.setXYZ(n+1,_vector$9.x,_vector$9.y,_vector$9.z);n+=2}}n.getAttribute("position").needsUpdate=true;super.updateMatrixWorld(e)}}function getBoneList(e){const t=[];if(e&&e.isBone){t.push(e)}for(let n=0;n<e.children.length;n++){t.push.apply(t,getBoneList(e.children[n]))}return t}class PointLightHelper extends Mesh{constructor(e,t,n){const r=new SphereBufferGeometry(t,4,2);const i=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});super(r,i);this.light=e;this.light.updateMatrixWorld();this.color=n;this.type="PointLightHelper";this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update()}dispose(){this.geometry.dispose();this.material.dispose()}update(){if(this.color!==undefined){this.material.color.set(this.color)}else{this.material.color.copy(this.light.color)}}}const _vector$a=new Vector3;const _color1=new Color;const _color2=new Color;class HemisphereLightHelper extends Object3D{constructor(e,t,n){super();this.light=e;this.light.updateMatrixWorld();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=n;const r=new OctahedronBufferGeometry(t);r.rotateY(Math.PI*.5);this.material=new MeshBasicMaterial({wireframe:true,fog:false,toneMapped:false});if(this.color===undefined)this.material.vertexColors=true;const i=r.getAttribute("position");const a=new Float32Array(i.count*3);r.setAttribute("color",new BufferAttribute(a,3));this.add(new Mesh(r,this.material));this.update()}dispose(){this.children[0].geometry.dispose();this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==undefined){this.material.color.set(this.color)}else{const t=e.geometry.getAttribute("color");_color1.copy(this.light.color);_color2.copy(this.light.groundColor);for(let e=0,n=t.count;e<n;e++){const r=e<n/2?_color1:_color2;t.setXYZ(e,r.r,r.g,r.b)}t.needsUpdate=true}e.lookAt(_vector$a.setFromMatrixPosition(this.light.matrixWorld).negate())}}class GridHelper extends LineSegments{constructor(e,t,n,r){e=e||10;t=t||10;n=new Color(n!==undefined?n:4473924);r=new Color(r!==undefined?r:8947848);const i=t/2;const a=e/t;const o=e/2;const s=[],c=[];for(let e=0,l=0,u=-o;e<=t;e++,u+=a){s.push(-o,0,u,o,0,u);s.push(u,0,-o,u,0,o);const t=e===i?n:r;t.toArray(c,l);l+=3;t.toArray(c,l);l+=3;t.toArray(c,l);l+=3;t.toArray(c,l);l+=3}const l=new BufferGeometry;l.setAttribute("position",new Float32BufferAttribute(s,3));l.setAttribute("color",new Float32BufferAttribute(c,3));const u=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(l,u);this.type="GridHelper"}}class PolarGridHelper extends LineSegments{constructor(e,t,n,r,i,a){e=e||10;t=t||16;n=n||8;r=r||64;i=new Color(i!==undefined?i:4473924);a=new Color(a!==undefined?a:8947848);const o=[];const s=[];for(let n=0;n<=t;n++){const r=n/t*(Math.PI*2);const c=Math.sin(r)*e;const l=Math.cos(r)*e;o.push(0,0,0);o.push(c,0,l);const u=n&1?i:a;s.push(u.r,u.g,u.b);s.push(u.r,u.g,u.b)}for(let t=0;t<=n;t++){const c=t&1?i:a;const l=e-e/n*t;for(let e=0;e<r;e++){let t=e/r*(Math.PI*2);let n=Math.sin(t)*l;let i=Math.cos(t)*l;o.push(n,0,i);s.push(c.r,c.g,c.b);t=(e+1)/r*(Math.PI*2);n=Math.sin(t)*l;i=Math.cos(t)*l;o.push(n,0,i);s.push(c.r,c.g,c.b)}}const c=new BufferGeometry;c.setAttribute("position",new Float32BufferAttribute(o,3));c.setAttribute("color",new Float32BufferAttribute(s,3));const l=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(c,l);this.type="PolarGridHelper"}}const _v1$5=new Vector3;const _v2$3=new Vector3;const _v3$1=new Vector3;class DirectionalLightHelper extends Object3D{constructor(e,t,n){super();this.light=e;this.light.updateMatrixWorld();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=n;if(t===undefined)t=1;let r=new BufferGeometry;r.setAttribute("position",new Float32BufferAttribute([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const i=new LineBasicMaterial({fog:false,toneMapped:false});this.lightPlane=new Line(r,i);this.add(this.lightPlane);r=new BufferGeometry;r.setAttribute("position",new Float32BufferAttribute([0,0,0,0,0,1],3));this.targetLine=new Line(r,i);this.add(this.targetLine);this.update()}dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()}update(){_v1$5.setFromMatrixPosition(this.light.matrixWorld);_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);_v3$1.subVectors(_v2$3,_v1$5);this.lightPlane.lookAt(_v2$3);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color)}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color)}this.targetLine.lookAt(_v2$3);this.targetLine.scale.z=_v3$1.length()}}const _vector$b=new Vector3;const _camera=new Camera;class CameraHelper extends LineSegments{constructor(e){const t=new BufferGeometry;const n=new LineBasicMaterial({color:16777215,vertexColors:true,toneMapped:false});const r=[];const i=[];const a={};const o=new Color(16755200);const s=new Color(16711680);const c=new Color(43775);const l=new Color(16777215);const u=new Color(3355443);h("n1","n2",o);h("n2","n4",o);h("n4","n3",o);h("n3","n1",o);h("f1","f2",o);h("f2","f4",o);h("f4","f3",o);h("f3","f1",o);h("n1","f1",o);h("n2","f2",o);h("n3","f3",o);h("n4","f4",o);h("p","n1",s);h("p","n2",s);h("p","n3",s);h("p","n4",s);h("u1","u2",c);h("u2","u3",c);h("u3","u1",c);h("c","t",l);h("p","c",u);h("cn1","cn2",u);h("cn3","cn4",u);h("cf1","cf2",u);h("cf3","cf4",u);function h(e,t,n){f(e,n);f(t,n)}function f(e,t){r.push(0,0,0);i.push(t.r,t.g,t.b);if(a[e]===undefined){a[e]=[]}a[e].push(r.length/3-1)}t.setAttribute("position",new Float32BufferAttribute(r,3));t.setAttribute("color",new Float32BufferAttribute(i,3));super(t,n);this.type="CameraHelper";this.camera=e;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=a;this.update()}update(){const e=this.geometry;const t=this.pointMap;const n=1,r=1;_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);setPoint("c",t,e,_camera,0,0,-1);setPoint("t",t,e,_camera,0,0,1);setPoint("n1",t,e,_camera,-n,-r,-1);setPoint("n2",t,e,_camera,n,-r,-1);setPoint("n3",t,e,_camera,-n,r,-1);setPoint("n4",t,e,_camera,n,r,-1);setPoint("f1",t,e,_camera,-n,-r,1);setPoint("f2",t,e,_camera,n,-r,1);setPoint("f3",t,e,_camera,-n,r,1);setPoint("f4",t,e,_camera,n,r,1);setPoint("u1",t,e,_camera,n*.7,r*1.1,-1);setPoint("u2",t,e,_camera,-n*.7,r*1.1,-1);setPoint("u3",t,e,_camera,0,r*2,-1);setPoint("cf1",t,e,_camera,-n,0,1);setPoint("cf2",t,e,_camera,n,0,1);setPoint("cf3",t,e,_camera,0,-r,1);setPoint("cf4",t,e,_camera,0,r,1);setPoint("cn1",t,e,_camera,-n,0,-1);setPoint("cn2",t,e,_camera,n,0,-1);setPoint("cn3",t,e,_camera,0,-r,-1);setPoint("cn4",t,e,_camera,0,r,-1);e.getAttribute("position").needsUpdate=true}}function setPoint(e,t,n,r,i,a,o){_vector$b.set(i,a,o).unproject(r);const s=t[e];if(s!==undefined){const e=n.getAttribute("position");for(let t=0,n=s.length;t<n;t++){e.setXYZ(s[t],_vector$b.x,_vector$b.y,_vector$b.z)}}}const _box$3=new Box3;class BoxHelper extends LineSegments{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const r=new Float32Array(8*3);const i=new BufferGeometry;i.setIndex(new BufferAttribute(n,1));i.setAttribute("position",new BufferAttribute(r,3));super(i,new LineBasicMaterial({color:t,toneMapped:false}));this.object=e;this.type="BoxHelper";this.matrixAutoUpdate=false;this.update()}update(e){if(e!==undefined){console.warn("THREE.BoxHelper: .update() has no longer arguments.")}if(this.object!==undefined){_box$3.setFromObject(this.object)}if(_box$3.isEmpty())return;const t=_box$3.min;const n=_box$3.max;const r=this.geometry.attributes.position;const i=r.array;i[0]=n.x;i[1]=n.y;i[2]=n.z;i[3]=t.x;i[4]=n.y;i[5]=n.z;i[6]=t.x;i[7]=t.y;i[8]=n.z;i[9]=n.x;i[10]=t.y;i[11]=n.z;i[12]=n.x;i[13]=n.y;i[14]=t.z;i[15]=t.x;i[16]=n.y;i[17]=t.z;i[18]=t.x;i[19]=t.y;i[20]=t.z;i[21]=n.x;i[22]=t.y;i[23]=t.z;r.needsUpdate=true;this.geometry.computeBoundingSphere()}setFromObject(e){this.object=e;this.update();return this}copy(e){LineSegments.prototype.copy.call(this,e);this.object=e.object;return this}}class Box3Helper extends LineSegments{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const r=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];const i=new BufferGeometry;i.setIndex(new BufferAttribute(n,1));i.setAttribute("position",new Float32BufferAttribute(r,3));super(i,new LineBasicMaterial({color:t,toneMapped:false}));this.box=e;this.type="Box3Helper";this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;if(t.isEmpty())return;t.getCenter(this.position);t.getSize(this.scale);this.scale.multiplyScalar(.5);super.updateMatrixWorld(e)}}class PlaneHelper extends Line{constructor(e,t,n){const r=n!==undefined?n:16776960;const i=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0];const a=new BufferGeometry;a.setAttribute("position",new Float32BufferAttribute(i,3));a.computeBoundingSphere();super(a,new LineBasicMaterial({color:r,toneMapped:false}));this.type="PlaneHelper";this.plane=e;this.size=t===undefined?1:t;const o=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1];const s=new BufferGeometry;s.setAttribute("position",new Float32BufferAttribute(o,3));s.computeBoundingSphere();this.add(new Mesh(s,new MeshBasicMaterial({color:r,opacity:.2,transparent:true,depthWrite:false,toneMapped:false})))}updateMatrixWorld(e){let t=-this.plane.constant;if(Math.abs(t)<1e-8)t=1e-8;this.scale.set(.5*this.size,.5*this.size,t);this.children[0].material.side=t<0?BackSide:FrontSide;this.lookAt(this.plane.normal);super.updateMatrixWorld(e)}}const _axis=new Vector3;let _lineGeometry,_coneGeometry;class ArrowHelper extends Object3D{constructor(e,t,n,r,i,a){super();this.type="ArrowHelper";if(e===undefined)e=new Vector3(0,0,1);if(t===undefined)t=new Vector3(0,0,0);if(n===undefined)n=1;if(r===undefined)r=16776960;if(i===undefined)i=.2*n;if(a===undefined)a=.2*i;if(_lineGeometry===undefined){_lineGeometry=new BufferGeometry;_lineGeometry.setAttribute("position",new Float32BufferAttribute([0,0,0,0,1,0],3));_coneGeometry=new CylinderBufferGeometry(0,.5,1,5,1);_coneGeometry.translate(0,-.5,0)}this.position.copy(t);this.line=new Line(_lineGeometry,new LineBasicMaterial({color:r,toneMapped:false}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new Mesh(_coneGeometry,new MeshBasicMaterial({color:r,toneMapped:false}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(e);this.setLength(n,i,a)}setDirection(e){if(e.y>.99999){this.quaternion.set(0,0,0,1)}else if(e.y<-.99999){this.quaternion.set(1,0,0,0)}else{_axis.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(_axis,t)}}setLength(e,t,n){if(t===undefined)t=.2*e;if(n===undefined)n=.2*t;this.line.scale.set(1,Math.max(1e-4,e-t),1);this.line.updateMatrix();this.cone.scale.set(n,t,n);this.cone.position.y=e;this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e);this.cone.material.color.set(e)}copy(e){super.copy(e,false);this.line.copy(e.line);this.cone.copy(e.cone);return this}}class AxesHelper extends LineSegments{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const r=new BufferGeometry;r.setAttribute("position",new Float32BufferAttribute(t,3));r.setAttribute("color",new Float32BufferAttribute(n,3));const i=new LineBasicMaterial({vertexColors:true,toneMapped:false});super(r,i);this.type="AxesHelper"}}const LOD_MIN=4;const LOD_MAX=8;const SIZE_MAX=Math.pow(2,LOD_MAX);const EXTRA_LOD_SIGMA=[.125,.215,.35,.446,.526,.582];const TOTAL_LODS=LOD_MAX-LOD_MIN+1+EXTRA_LOD_SIGMA.length;const MAX_SAMPLES=20;const ENCODINGS={[LinearEncoding]:0,[sRGBEncoding]:1,[RGBEEncoding]:2,[RGBM7Encoding]:3,[RGBM16Encoding]:4,[RGBDEncoding]:5,[GammaEncoding]:6};const _flatCamera=new OrthographicCamera;const{_lodPlanes:_lodPlanes,_sizeLods:_sizeLods,_sigmas:_sigmas}=_createPlanes();let _oldTarget=null;const PHI=(1+Math.sqrt(5))/2;const INV_PHI=1/PHI;const _axisDirections=[new Vector3(1,1,1),new Vector3(-1,1,1),new Vector3(1,1,-1),new Vector3(-1,1,-1),new Vector3(0,PHI,INV_PHI),new Vector3(0,PHI,-INV_PHI),new Vector3(INV_PHI,0,PHI),new Vector3(-INV_PHI,0,PHI),new Vector3(PHI,INV_PHI,0),new Vector3(-PHI,INV_PHI,0)];class PMREMGenerator{constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._blurMaterial=_getBlurShader(MAX_SAMPLES);this._equirectShader=null;this._cubemapShader=null;this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,r=100){_oldTarget=this._renderer.getRenderTarget();const i=this._allocateTargets();this._sceneToCubeUV(e,n,r,i);if(t>0){this._blur(i,0,0,t)}this._applyPMREM(i);this._cleanup(i);return i}fromEquirectangular(e){return this._fromTexture(e)}fromCubemap(e){return this._fromTexture(e)}compileCubemapShader(){if(this._cubemapShader===null){this._cubemapShader=_getCubemapShader();this._compileMaterial(this._cubemapShader)}}compileEquirectangularShader(){if(this._equirectShader===null){this._equirectShader=_getEquirectShader();this._compileMaterial(this._equirectShader)}}dispose(){this._blurMaterial.dispose();if(this._cubemapShader!==null)this._cubemapShader.dispose();if(this._equirectShader!==null)this._equirectShader.dispose();for(let e=0;e<_lodPlanes.length;e++){_lodPlanes[e].dispose()}}_cleanup(e){this._pingPongRenderTarget.dispose();this._renderer.setRenderTarget(_oldTarget);e.scissorTest=false;_setViewport(e,0,0,e.width,e.height)}_fromTexture(e){_oldTarget=this._renderer.getRenderTarget();const t=this._allocateTargets(e);this._textureToCubeUV(e,t);this._applyPMREM(t);this._cleanup(t);return t}_allocateTargets(e){const t={magFilter:NearestFilter,minFilter:NearestFilter,generateMipmaps:false,type:UnsignedByteType,format:RGBEFormat,encoding:_isLDR(e)?e.encoding:RGBEEncoding,depthBuffer:false};const n=_createRenderTarget(t);n.depthBuffer=e?false:true;this._pingPongRenderTarget=_createRenderTarget(t);return n}_compileMaterial(e){const t=new Mesh(_lodPlanes[0],e);this._renderer.compile(t,_flatCamera)}_sceneToCubeUV(e,t,n,r){const i=90;const a=1;const o=new PerspectiveCamera(i,a,t,n);const s=[1,-1,1,1,1,1];const c=[1,1,1,-1,-1,-1];const l=this._renderer;const u=l.outputEncoding;const h=l.toneMapping;const f=l.getClearColor();const d=l.getClearAlpha();l.toneMapping=NoToneMapping;l.outputEncoding=LinearEncoding;let p=e.background;if(p&&p.isColor){p.convertSRGBToLinear();const t=Math.max(p.r,p.g,p.b);const n=Math.min(Math.max(Math.ceil(Math.log2(t)),-128),127);p=p.multiplyScalar(Math.pow(2,-n));const r=(n+128)/255;l.setClearColor(p,r);e.background=null}for(let t=0;t<6;t++){const n=t%3;if(n==0){o.up.set(0,s[t],0);o.lookAt(c[t],0,0)}else if(n==1){o.up.set(0,0,s[t]);o.lookAt(0,c[t],0)}else{o.up.set(0,s[t],0);o.lookAt(0,0,c[t])}_setViewport(r,n*SIZE_MAX,t>2?SIZE_MAX:0,SIZE_MAX,SIZE_MAX);l.setRenderTarget(r);l.render(e,o)}l.toneMapping=h;l.outputEncoding=u;l.setClearColor(f,d)}_textureToCubeUV(e,t){const n=this._renderer;if(e.isCubeTexture){if(this._cubemapShader==null){this._cubemapShader=_getCubemapShader()}}else{if(this._equirectShader==null){this._equirectShader=_getEquirectShader()}}const r=e.isCubeTexture?this._cubemapShader:this._equirectShader;const i=new Mesh(_lodPlanes[0],r);const a=r.uniforms;a["envMap"].value=e;if(!e.isCubeTexture){a["texelSize"].value.set(1/e.image.width,1/e.image.height)}a["inputEncoding"].value=ENCODINGS[e.encoding];a["outputEncoding"].value=ENCODINGS[t.texture.encoding];_setViewport(t,0,0,3*SIZE_MAX,2*SIZE_MAX);n.setRenderTarget(t);n.render(i,_flatCamera)}_applyPMREM(e){const t=this._renderer;const n=t.autoClear;t.autoClear=false;for(let t=1;t<TOTAL_LODS;t++){const n=Math.sqrt(_sigmas[t]*_sigmas[t]-_sigmas[t-1]*_sigmas[t-1]);const r=_axisDirections[(t-1)%_axisDirections.length];this._blur(e,t-1,t,n,r)}t.autoClear=n}_blur(e,t,n,r,i){const a=this._pingPongRenderTarget;this._halfBlur(e,a,t,n,r,"latitudinal",i);this._halfBlur(a,e,n,n,r,"longitudinal",i)}_halfBlur(e,t,n,r,i,a,o){const s=this._renderer;const c=this._blurMaterial;if(a!=="latitudinal"&&a!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const l=3;const u=new Mesh(_lodPlanes[r],c);const h=c.uniforms;const f=_sizeLods[n]-1;const d=isFinite(i)?Math.PI/(2*f):2*Math.PI/(2*MAX_SAMPLES-1);const p=i/d;const m=isFinite(i)?1+Math.floor(l*p):MAX_SAMPLES;if(m>MAX_SAMPLES){console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${MAX_SAMPLES}`)}const g=[];let y=0;for(let e=0;e<MAX_SAMPLES;++e){const t=e/p;const n=Math.exp(-t*t/2);g.push(n);if(e==0){y+=n}else if(e<m){y+=2*n}}for(let e=0;e<g.length;e++){g[e]=g[e]/y}h["envMap"].value=e.texture;h["samples"].value=m;h["weights"].value=g;h["latitudinal"].value=a==="latitudinal";if(o){h["poleAxis"].value=o}h["dTheta"].value=d;h["mipInt"].value=LOD_MAX-n;h["inputEncoding"].value=ENCODINGS[e.texture.encoding];h["outputEncoding"].value=ENCODINGS[e.texture.encoding];const v=_sizeLods[r];const _=3*Math.max(0,SIZE_MAX-2*v);const x=(r===0?0:2*SIZE_MAX)+2*v*(r>LOD_MAX-LOD_MIN?r-LOD_MAX+LOD_MIN:0);_setViewport(t,_,x,3*v,2*v);s.setRenderTarget(t);s.render(u,_flatCamera)}}function _isLDR(e){if(e===undefined||e.type!==UnsignedByteType)return false;return e.encoding===LinearEncoding||e.encoding===sRGBEncoding||e.encoding===GammaEncoding}function _createPlanes(){const e=[];const t=[];const n=[];let r=LOD_MAX;for(let i=0;i<TOTAL_LODS;i++){const a=Math.pow(2,r);t.push(a);let o=1/a;if(i>LOD_MAX-LOD_MIN){o=EXTRA_LOD_SIGMA[i-LOD_MAX+LOD_MIN-1]}else if(i==0){o=0}n.push(o);const s=1/(a-1);const c=-s/2;const l=1+s/2;const u=[c,c,l,c,l,l,c,c,l,l,c,l];const h=6;const f=6;const d=3;const p=2;const m=1;const g=new Float32Array(d*f*h);const y=new Float32Array(p*f*h);const v=new Float32Array(m*f*h);for(let e=0;e<h;e++){const t=e%3*2/3-1;const n=e>2?0:-1;const r=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];g.set(r,d*f*e);y.set(u,p*f*e);const i=[e,e,e,e,e,e];v.set(i,m*f*e)}const _=new BufferGeometry;_.setAttribute("position",new BufferAttribute(g,d));_.setAttribute("uv",new BufferAttribute(y,p));_.setAttribute("faceIndex",new BufferAttribute(v,m));e.push(_);if(r>LOD_MIN){r--}}return{_lodPlanes:e,_sizeLods:t,_sigmas:n}}function _createRenderTarget(e){const t=new WebGLRenderTarget(3*SIZE_MAX,3*SIZE_MAX,e);t.texture.mapping=CubeUVReflectionMapping;t.texture.name="PMREM.cubeUv";t.scissorTest=true;return t}function _setViewport(e,t,n,r,i){e.viewport.set(t,n,r,i);e.scissor.set(t,n,r,i)}function _getBlurShader(e){const t=new Float32Array(e);const n=new Vector3(0,1,0);const r=new RawShaderMaterial({name:"SphericalGaussianBlur",defines:{n:e},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:t},latitudinal:{value:false},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n},inputEncoding:{value:ENCODINGS[LinearEncoding]},outputEncoding:{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:`precision mediump float;\nprecision mediump int;varying vec3 vOutputDirection;uniform sampler2D envMap;\nuniform int samples;\nuniform float weights[ n ];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;${_getEncodings()}#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>vec3 getSample( float theta, vec3 axis ) {float cosTheta = cos( theta );vec3 sampleDirection = vOutputDirection * cosTheta\n+ cross( axis, vOutputDirection ) * sin( theta )\n+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );return bilinearCubeUV( envMap, sampleDirection, mipInt );}void main() {vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );if ( all( equal( axis, vec3( 0.0 ) ) ) ) {axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );}axis = normalize( axis );gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\ngl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );for ( int i = 1; i < n; i++ ) {if ( i >= samples ) {break;}float theta = dTheta * float( i );\ngl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\ngl_FragColor.rgb += weights[ i ] * getSample( theta, axis );}gl_FragColor = linearToOutputTexel( gl_FragColor );}\n`,blending:NoBlending,depthTest:false,depthWrite:false});return r}function _getEquirectShader(){const e=new Vector2(1,1);const t=new RawShaderMaterial({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:e},inputEncoding:{value:ENCODINGS[LinearEncoding]},outputEncoding:{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:`precision mediump float;\nprecision mediump int;varying vec3 vOutputDirection;uniform sampler2D envMap;\nuniform vec2 texelSize;${_getEncodings()}#include <common>void main() {gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );vec3 outputDirection = normalize( vOutputDirection );\nvec2 uv = equirectUv( outputDirection );vec2 f = fract( uv / texelSize - 0.5 );\nuv -= f * texelSize;\nvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\nuv.x += texelSize.x;\nvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\nuv.y += texelSize.y;\nvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\nuv.x -= texelSize.x;\nvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;vec3 tm = mix( tl, tr, f.x );\nvec3 bm = mix( bl, br, f.x );\ngl_FragColor.rgb = mix( tm, bm, f.y );gl_FragColor = linearToOutputTexel( gl_FragColor );}\n`,blending:NoBlending,depthTest:false,depthWrite:false});return t}function _getCubemapShader(){const e=new RawShaderMaterial({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:ENCODINGS[LinearEncoding]},outputEncoding:{value:ENCODINGS[LinearEncoding]}},vertexShader:_getCommonVertexShader(),fragmentShader:`precision mediump float;\nprecision mediump int;varying vec3 vOutputDirection;uniform samplerCube envMap;${_getEncodings()}void main() {gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\ngl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\ngl_FragColor = linearToOutputTexel( gl_FragColor );}\n`,blending:NoBlending,depthTest:false,depthWrite:false});return e}function _getCommonVertexShader(){return`precision mediump float;\nprecision mediump int;attribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;varying vec3 vOutputDirection;\nvec3 getDirection( vec2 uv, float face ) {uv = 2.0 * uv - 1.0;vec3 direction = vec3( uv, 1.0 );if ( face == 0.0 ) {direction = direction.zyx; } else if ( face == 1.0 ) {direction = direction.xzy;\ndirection.xz *= -1.0; } else if ( face == 2.0 ) {direction.x *= -1.0; } else if ( face == 3.0 ) {direction = direction.zyx;\ndirection.xz *= -1.0; } else if ( face == 4.0 ) {direction = direction.xzy;\ndirection.xy *= -1.0; } else if ( face == 5.0 ) {direction.z *= -1.0; }return direction;}void main() {vOutputDirection = getDirection( uv, faceIndex );\ngl_Position = vec4( position, 1.0 );}\n`}function _getEncodings(){return`uniform int inputEncoding;\nuniform int outputEncoding;#include <encodings_pars_fragment>vec4 inputTexelToLinear( vec4 value ) {if ( inputEncoding == 0 ) {return value;} else if ( inputEncoding == 1 ) {return sRGBToLinear( value );} else if ( inputEncoding == 2 ) {return RGBEToLinear( value );} else if ( inputEncoding == 3 ) {return RGBMToLinear( value, 7.0 );} else if ( inputEncoding == 4 ) {return RGBMToLinear( value, 16.0 );} else if ( inputEncoding == 5 ) {return RGBDToLinear( value, 256.0 );} else {return GammaToLinear( value, 2.2 );}}vec4 linearToOutputTexel( vec4 value ) {if ( outputEncoding == 0 ) {return value;} else if ( outputEncoding == 1 ) {return LinearTosRGB( value );} else if ( outputEncoding == 2 ) {return LinearToRGBE( value );} else if ( outputEncoding == 3 ) {return LinearToRGBM( value, 7.0 );} else if ( outputEncoding == 4 ) {return LinearToRGBM( value, 16.0 );} else if ( outputEncoding == 5 ) {return LinearToRGBD( value, 256.0 );} else {return LinearToGamma( value, 2.2 );}}vec4 envMapTexelToLinear( vec4 color ) {return inputTexelToLinear( color );}\n`}function Face4(e,t,n,r,i,a,o){console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new Face3(e,t,n,i,a,o)}const LineStrip=0;const LinePieces=1;const NoColors=0;const FaceColors=1;const VertexColors=2;function MeshFaceMaterial(e){console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");return e}function MultiMaterial(e){if(e===undefined)e=[];console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");e.isMultiMaterial=true;e.materials=e;e.clone=function(){return e.slice()};return e}function PointCloud(e,t){console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Points(e,t)}function Particle(e){console.warn("THREE.Particle has been renamed to THREE.Sprite.");return new Sprite(e)}function ParticleSystem(e,t){console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new Points(e,t)}function PointCloudMaterial(e){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(e)}function ParticleBasicMaterial(e){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(e)}function ParticleSystemMaterial(e){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(e)}function Vertex(e,t,n){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");return new Vector3(e,t,n)}function DynamicBufferAttribute(e,t){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");return new BufferAttribute(e,t).setUsage(DynamicDrawUsage)}function Int8Attribute(e,t){console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");return new Int8BufferAttribute(e,t)}function Uint8Attribute(e,t){console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");return new Uint8BufferAttribute(e,t)}function Uint8ClampedAttribute(e,t){console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");return new Uint8ClampedBufferAttribute(e,t)}function Int16Attribute(e,t){console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");return new Int16BufferAttribute(e,t)}function Uint16Attribute(e,t){console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");return new Uint16BufferAttribute(e,t)}function Int32Attribute(e,t){console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");return new Int32BufferAttribute(e,t)}function Uint32Attribute(e,t){console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");return new Uint32BufferAttribute(e,t)}function Float32Attribute(e,t){console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");return new Float32BufferAttribute(e,t)}function Float64Attribute(e,t){console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");return new Float64BufferAttribute(e,t)}Curve.create=function(e,t){console.log("THREE.Curve.create() has been deprecated");e.prototype=Object.create(Curve.prototype);e.prototype.constructor=e;e.prototype.getPoint=t;return e};Object.assign(CurvePath.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=new Geometry;for(let n=0,r=e.length;n<r;n++){const r=e[n];t.vertices.push(new Vector3(r.x,r.y,r.z||0))}return t}});Object.assign(Path.prototype,{fromPoints:function(e){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");return this.setFromPoints(e)}});function ClosedSplineCurve3(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");CatmullRomCurve3.call(this,e);this.type="catmullrom";this.closed=true}ClosedSplineCurve3.prototype=Object.create(CatmullRomCurve3.prototype);function SplineCurve3(e){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");CatmullRomCurve3.call(this,e);this.type="catmullrom"}SplineCurve3.prototype=Object.create(CatmullRomCurve3.prototype);function Spline(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");CatmullRomCurve3.call(this,e);this.type="catmullrom"}Spline.prototype=Object.create(CatmullRomCurve3.prototype);Object.assign(Spline.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}});function AxisHelper(e){console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");return new AxesHelper(e)}function BoundingBoxHelper(e,t){console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");return new BoxHelper(e,t)}function EdgesHelper(e,t){console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new LineSegments(new EdgesGeometry(e.geometry),new LineBasicMaterial({color:t!==undefined?t:16777215}))}GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};SkeletonHelper.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};function WireframeHelper(e,t){console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new LineSegments(new WireframeGeometry(e.geometry),new LineBasicMaterial({color:t!==undefined?t:16777215}))}Object.assign(Loader.prototype,{extractUrlBase:function(e){console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");return LoaderUtils.extractUrlBase(e)}});Loader.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};function XHRLoader(e){console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");return new FileLoader(e)}function BinaryTextureLoader(e){console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");return new DataTextureLoader(e)}Object.assign(Box2.prototype,{center:function(e){console.warn("THREE.Box2: .center() has been renamed to .getCenter().");return this.getCenter(e)},empty:function(){console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(e){console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(e)},size:function(e){console.warn("THREE.Box2: .size() has been renamed to .getSize().");return this.getSize(e)}});Object.assign(Box3.prototype,{center:function(e){console.warn("THREE.Box3: .center() has been renamed to .getCenter().");return this.getCenter(e)},empty:function(){console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(e){console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(e)},isIntersectionSphere:function(e){console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(e)},size:function(e){console.warn("THREE.Box3: .size() has been renamed to .getSize().");return this.getSize(e)}});Object.assign(Sphere.prototype,{empty:function(){console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");return this.isEmpty()}});Frustum.prototype.setFromMatrix=function(e){console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");return this.setFromProjectionMatrix(e)};Line3.prototype.center=function(e){console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(e)};Object.assign(MathUtils,{random16:function(){console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");return Math.random()},nearestPowerOfTwo:function(e){console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");return MathUtils.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");return MathUtils.ceilPowerOfTwo(e)}});Object.assign(Matrix3.prototype,{flattenToArrayOffset:function(e,t){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(e,t)},multiplyVector3:function(e){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBufferAttribute:function(e){console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");return e.applyMatrix3(this)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}});Object.assign(Matrix4.prototype,{extractPosition:function(e){console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(e)},flattenToArrayOffset:function(e,t){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(e,t)},getPosition:function(){console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");return(new Vector3).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(e){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)},multiplyVector4:function(e){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");e.transformDirection(this)},crossVector:function(e){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBufferAttribute:function(e){console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");return e.applyMatrix4(this)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,n,r,i,a){console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");return this.makePerspective(e,t,r,n,i,a)}});Plane.prototype.isIntersectionLine=function(e){console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(e)};Quaternion.prototype.multiplyVector3=function(e){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return e.applyQuaternion(this)};Object.assign(Ray.prototype,{isIntersectionBox:function(e){console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(e)},isIntersectionPlane:function(e){console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(e)},isIntersectionSphere:function(e){console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(e)}});Object.assign(Triangle.prototype,{area:function(){console.warn("THREE.Triangle: .area() has been renamed to .getArea().");return this.getArea()},barycoordFromPoint:function(e,t){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return this.getBarycoord(e,t)},midpoint:function(e){console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");return this.getMidpoint(e)},normal:function(e){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return this.getNormal(e)},plane:function(e){console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");return this.getPlane(e)}});Object.assign(Triangle,{barycoordFromPoint:function(e,t,n,r,i){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return Triangle.getBarycoord(e,t,n,r,i)},normal:function(e,t,n,r){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return Triangle.getNormal(e,t,n,r)}});Object.assign(Shape.prototype,{extractAllPoints:function(e){console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");return this.extractPoints(e)},extrude:function(e){console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");return new ExtrudeGeometry(this,e)},makeGeometry:function(e){console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new ShapeGeometry(this,e)}});Object.assign(Vector2.prototype,{fromAttribute:function(e,t,n){console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(e)},lengthManhattan:function(){console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(t,e)},applyProjection:function(e){console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");return this.applyMatrix4(e)},fromAttribute:function(e,t,n){console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(e,t,n)},distanceToManhattan:function(e){console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(e)},lengthManhattan:function(){console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(Vector4.prototype,{fromAttribute:function(e,t,n){console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(e,t,n)},lengthManhattan:function(){console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(Geometry.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")},applyMatrix:function(e){console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().");return this.applyMatrix4(e)}});Object.assign(Object3D.prototype,{getChildByName:function(e){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(t,e)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},applyMatrix:function(e){console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");return this.applyMatrix4(e)}});Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function(){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Object.assign(Mesh.prototype,{setDrawMode:function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}});Object.defineProperties(Mesh.prototype,{drawMode:{get:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");return TrianglesDrawMode},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});Object.defineProperties(LOD.prototype,{objects:{get:function(){console.warn("THREE.LOD: .objects has been renamed to .levels.");return this.levels}}});Object.defineProperty(Skeleton.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}});SkinnedMesh.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};Object.defineProperty(Curve.prototype,"__arcLengthDivisions",{get:function(){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");return this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");this.arcLengthDivisions=e}});PerspectiveCamera.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. "+"Use .setFocalLength and .filmGauge for a photographic setup.");if(t!==undefined)this.filmGauge=t;this.setFocalLength(e)};Object.defineProperties(Light.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias.");this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height=e}}});Object.defineProperties(BufferAttribute.prototype,{length:{get:function(){console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");return this.array.length}},dynamic:{get:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");return this.usage===DynamicDrawUsage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");this.setUsage(DynamicDrawUsage)}}});Object.assign(BufferAttribute.prototype,{setDynamic:function(e){console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");this.setUsage(e===true?DynamicDrawUsage:StaticDrawUsage);return this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(BufferGeometry.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(e)},addAttribute:function(e,t){console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");if(!(t&&t.isBufferAttribute)&&!(t&&t.isInterleavedBufferAttribute)){console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");return this.setAttribute(e,new BufferAttribute(arguments[1],arguments[2]))}if(e==="index"){console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");this.setIndex(t);return this}return this.setAttribute(e,t)},addDrawCall:function(e,t,n){if(n!==undefined){console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.")}console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(e){console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");return this.deleteAttribute(e)},applyMatrix:function(e){console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");return this.applyMatrix4(e)}});Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function(){console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups}},offsets:{get:function(){console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups}}});Object.defineProperties(InstancedBufferGeometry.prototype,{maxInstancedCount:{get:function(){console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");return this.instanceCount},set:function(e){console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");this.instanceCount=e}}});Object.defineProperties(Raycaster.prototype,{linePrecision:{get:function(){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");return this.params.Line.threshold},set:function(e){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");this.params.Line.threshold=e}}});Object.defineProperties(InterleavedBuffer.prototype,{dynamic:{get:function(){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");return this.usage===DynamicDrawUsage},set:function(e){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");this.setUsage(e)}}});Object.assign(InterleavedBuffer.prototype,{setDynamic:function(e){console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");this.setUsage(e===true?DynamicDrawUsage:StaticDrawUsage);return this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(ExtrudeBufferGeometry.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}});Object.assign(Scene.prototype,{dispose:function(){console.error("THREE.Scene: .dispose() has been removed.")}});Object.defineProperties(Uniform.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this}}});Object.defineProperties(Material.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){console.warn("THREE.Material: .wrapRGB has been removed.");return new Color}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=e===FlatShading}},stencilMask:{get:function(){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");return this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");this.stencilFuncMask=e}}});Object.defineProperties(MeshPhongMaterial.prototype,{metal:{get:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");return false},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(MeshPhysicalMaterial.prototype,{transparency:{get:function(){console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");return this.transmission},set:function(e){console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");this.transmission=e}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function(){console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives=e}}});Object.assign(WebGLRenderer.prototype,{clearTarget:function(e,t,n,r){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");this.setRenderTarget(e);this.clear(t,n,r)},animate:function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");this.setAnimationLoop(e)},getCurrentRenderTarget:function(){console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");return this.getRenderTarget()},getMaxAnisotropy:function(){console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");return this.capabilities.getMaxAnisotropy()},getPrecision:function(){console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");return this.capabilities.precision},resetGLState:function(){console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");return this.state.reset()},supportsFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");return this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");return this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");return this.capabilities.vertexTextures},supportsInstancedArrays:function(){console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");return this.getActiveMipmapLevel()}});Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");return this.getContext()}},vr:{get:function(){console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");return this.xr}},gammaInput:{get:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");return false},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");return false},set:function(e){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");this.outputEncoding=e===true?sRGBEncoding:LinearEncoding}},toneMappingWhitePoint:{get:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");return 1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});function WebGLRenderTargetCube(e,t,n){console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");return new WebGLCubeRenderTarget(e,n)}Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS=e}},wrapT:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT=e}},magFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter=e}},minFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter=e}},anisotropy:{get:function(){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy=e}},offset:{get:function(){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset=e}},repeat:{get:function(){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat=e}},format:{get:function(){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format=e}},type:{get:function(){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type=e}},generateMipmaps:{get:function(){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps=e}}});Object.defineProperties(Audio.prototype,{load:{value:function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const t=this;const n=new AudioLoader;n.load(e,(function(e){t.setBuffer(e)}));return this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}});AudioAnalyser.prototype.getData=function(){console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");return this.getFrequencyData()};CubeCamera.prototype.updateCubeMap=function(e,t){console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");return this.update(e,t)};const GeometryUtils={merge:function(e,t,n){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");let r;if(t.isMesh){t.matrixAutoUpdate&&t.updateMatrix();r=t.matrix;t=t.geometry}e.merge(t,r,n)},center:function(e){console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return e.center()}};ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(e,t,n,r){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const i=new TextureLoader;i.setCrossOrigin(this.crossOrigin);const a=i.load(e,n,undefined,r);if(t)a.mapping=t;return a};ImageUtils.loadTextureCube=function(e,t,n,r){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const i=new CubeTextureLoader;i.setCrossOrigin(this.crossOrigin);const a=i.load(e,n,undefined,r);if(t)a.mapping=t;return a};ImageUtils.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};ImageUtils.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};function CanvasRenderer(){console.error("THREE.CanvasRenderer has been removed")}function JSONLoader(){console.error("THREE.JSONLoader has been removed.")}const SceneUtils={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function LensFlare(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:REVISION}}))}var three_module=Object.freeze({__proto__:null,ACESFilmicToneMapping:ACESFilmicToneMapping,AddEquation:AddEquation,AddOperation:AddOperation,AdditiveAnimationBlendMode:AdditiveAnimationBlendMode,AdditiveBlending:AdditiveBlending,AlphaFormat:AlphaFormat,AlwaysDepth:AlwaysDepth,AlwaysStencilFunc:AlwaysStencilFunc,AmbientLight:AmbientLight,AmbientLightProbe:AmbientLightProbe,AnimationClip:AnimationClip,AnimationLoader:AnimationLoader,AnimationMixer:AnimationMixer,AnimationObjectGroup:AnimationObjectGroup,AnimationUtils:AnimationUtils,ArcCurve:ArcCurve,ArrayCamera:ArrayCamera,ArrowHelper:ArrowHelper,Audio:Audio,AudioAnalyser:AudioAnalyser,AudioContext:AudioContext,AudioListener:AudioListener,AudioLoader:AudioLoader,AxesHelper:AxesHelper,AxisHelper:AxisHelper,BackSide:BackSide,BasicDepthPacking:BasicDepthPacking,BasicShadowMap:BasicShadowMap,BinaryTextureLoader:BinaryTextureLoader,Bone:Bone,BooleanKeyframeTrack:BooleanKeyframeTrack,BoundingBoxHelper:BoundingBoxHelper,Box2:Box2,Box3:Box3,Box3Helper:Box3Helper,BoxBufferGeometry:BoxBufferGeometry,BoxGeometry:BoxGeometry,BoxHelper:BoxHelper,BufferAttribute:BufferAttribute,BufferGeometry:BufferGeometry,BufferGeometryLoader:BufferGeometryLoader,ByteType:ByteType,Cache:Cache,Camera:Camera,CameraHelper:CameraHelper,CanvasRenderer:CanvasRenderer,CanvasTexture:CanvasTexture,CatmullRomCurve3:CatmullRomCurve3,CineonToneMapping:CineonToneMapping,CircleBufferGeometry:CircleBufferGeometry,CircleGeometry:CircleGeometry,ClampToEdgeWrapping:ClampToEdgeWrapping,Clock:Clock,ClosedSplineCurve3:ClosedSplineCurve3,Color:Color,ColorKeyframeTrack:ColorKeyframeTrack,CompressedTexture:CompressedTexture,CompressedTextureLoader:CompressedTextureLoader,ConeBufferGeometry:ConeBufferGeometry,ConeGeometry:ConeGeometry,CubeCamera:CubeCamera,CubeGeometry:BoxGeometry,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,CubeTexture:CubeTexture,CubeTextureLoader:CubeTextureLoader,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,CubicInterpolant:CubicInterpolant,CullFaceBack:CullFaceBack,CullFaceFront:CullFaceFront,CullFaceFrontBack:CullFaceFrontBack,CullFaceNone:CullFaceNone,Curve:Curve,CurvePath:CurvePath,CustomBlending:CustomBlending,CustomToneMapping:CustomToneMapping,CylinderBufferGeometry:CylinderBufferGeometry,CylinderGeometry:CylinderGeometry,Cylindrical:Cylindrical,DataTexture:DataTexture,DataTexture2DArray:DataTexture2DArray,DataTexture3D:DataTexture3D,DataTextureLoader:DataTextureLoader,DecrementStencilOp:DecrementStencilOp,DecrementWrapStencilOp:DecrementWrapStencilOp,DefaultLoadingManager:DefaultLoadingManager,DepthFormat:DepthFormat,DepthStencilFormat:DepthStencilFormat,DepthTexture:DepthTexture,DirectionalLight:DirectionalLight,DirectionalLightHelper:DirectionalLightHelper,DiscreteInterpolant:DiscreteInterpolant,DodecahedronBufferGeometry:DodecahedronBufferGeometry,DodecahedronGeometry:DodecahedronGeometry,DoubleSide:DoubleSide,DstAlphaFactor:DstAlphaFactor,DstColorFactor:DstColorFactor,DynamicBufferAttribute:DynamicBufferAttribute,DynamicCopyUsage:DynamicCopyUsage,DynamicDrawUsage:DynamicDrawUsage,DynamicReadUsage:DynamicReadUsage,EdgesGeometry:EdgesGeometry,EdgesHelper:EdgesHelper,EllipseCurve:EllipseCurve,EqualDepth:EqualDepth,EqualStencilFunc:EqualStencilFunc,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,Euler:Euler,EventDispatcher:EventDispatcher,ExtrudeBufferGeometry:ExtrudeBufferGeometry,ExtrudeGeometry:ExtrudeGeometry,Face3:Face3,Face4:Face4,FaceColors:FaceColors,FileLoader:FileLoader,FlatShading:FlatShading,Float32Attribute:Float32Attribute,Float32BufferAttribute:Float32BufferAttribute,Float64Attribute:Float64Attribute,Float64BufferAttribute:Float64BufferAttribute,FloatType:FloatType,Fog:Fog,FogExp2:FogExp2,Font:Font,FontLoader:FontLoader,FrontSide:FrontSide,Frustum:Frustum,GLBufferAttribute:GLBufferAttribute,GLSL1:GLSL1,GLSL3:GLSL3,GammaEncoding:GammaEncoding,Geometry:Geometry,GeometryUtils:GeometryUtils,GreaterDepth:GreaterDepth,GreaterEqualDepth:GreaterEqualDepth,GreaterEqualStencilFunc:GreaterEqualStencilFunc,GreaterStencilFunc:GreaterStencilFunc,GridHelper:GridHelper,Group:Group,HalfFloatType:HalfFloatType,HemisphereLight:HemisphereLight,HemisphereLightHelper:HemisphereLightHelper,HemisphereLightProbe:HemisphereLightProbe,IcosahedronBufferGeometry:IcosahedronBufferGeometry,IcosahedronGeometry:IcosahedronGeometry,ImageBitmapLoader:ImageBitmapLoader,ImageLoader:ImageLoader,ImageUtils:ImageUtils,ImmediateRenderObject:ImmediateRenderObject,IncrementStencilOp:IncrementStencilOp,IncrementWrapStencilOp:IncrementWrapStencilOp,InstancedBufferAttribute:InstancedBufferAttribute,InstancedBufferGeometry:InstancedBufferGeometry,InstancedInterleavedBuffer:InstancedInterleavedBuffer,InstancedMesh:InstancedMesh,Int16Attribute:Int16Attribute,Int16BufferAttribute:Int16BufferAttribute,Int32Attribute:Int32Attribute,Int32BufferAttribute:Int32BufferAttribute,Int8Attribute:Int8Attribute,Int8BufferAttribute:Int8BufferAttribute,IntType:IntType,InterleavedBuffer:InterleavedBuffer,InterleavedBufferAttribute:InterleavedBufferAttribute,Interpolant:Interpolant,InterpolateDiscrete:InterpolateDiscrete,InterpolateLinear:InterpolateLinear,InterpolateSmooth:InterpolateSmooth,InvertStencilOp:InvertStencilOp,JSONLoader:JSONLoader,KeepStencilOp:KeepStencilOp,KeyframeTrack:KeyframeTrack,LOD:LOD,LatheBufferGeometry:LatheBufferGeometry,LatheGeometry:LatheGeometry,Layers:Layers,LensFlare:LensFlare,LessDepth:LessDepth,LessEqualDepth:LessEqualDepth,LessEqualStencilFunc:LessEqualStencilFunc,LessStencilFunc:LessStencilFunc,Light:Light,LightProbe:LightProbe,Line:Line,Line3:Line3,LineBasicMaterial:LineBasicMaterial,LineCurve:LineCurve,LineCurve3:LineCurve3,LineDashedMaterial:LineDashedMaterial,LineLoop:LineLoop,LinePieces:LinePieces,LineSegments:LineSegments,LineStrip:LineStrip,LinearEncoding:LinearEncoding,LinearFilter:LinearFilter,LinearInterpolant:LinearInterpolant,LinearMipMapLinearFilter:LinearMipMapLinearFilter,LinearMipMapNearestFilter:LinearMipMapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearToneMapping:LinearToneMapping,Loader:Loader,LoaderUtils:LoaderUtils,LoadingManager:LoadingManager,LogLuvEncoding:LogLuvEncoding,LoopOnce:LoopOnce,LoopPingPong:LoopPingPong,LoopRepeat:LoopRepeat,LuminanceAlphaFormat:LuminanceAlphaFormat,LuminanceFormat:LuminanceFormat,MOUSE:MOUSE,Material:Material,MaterialLoader:MaterialLoader,Math:MathUtils,MathUtils:MathUtils,Matrix3:Matrix3,Matrix4:Matrix4,MaxEquation:MaxEquation,Mesh:Mesh,MeshBasicMaterial:MeshBasicMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshFaceMaterial:MeshFaceMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshMatcapMaterial:MeshMatcapMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshToonMaterial:MeshToonMaterial,MinEquation:MinEquation,MirroredRepeatWrapping:MirroredRepeatWrapping,MixOperation:MixOperation,MultiMaterial:MultiMaterial,MultiplyBlending:MultiplyBlending,MultiplyOperation:MultiplyOperation,NearestFilter:NearestFilter,NearestMipMapLinearFilter:NearestMipMapLinearFilter,NearestMipMapNearestFilter:NearestMipMapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NeverDepth:NeverDepth,NeverStencilFunc:NeverStencilFunc,NoBlending:NoBlending,NoColors:NoColors,NoToneMapping:NoToneMapping,NormalAnimationBlendMode:NormalAnimationBlendMode,NormalBlending:NormalBlending,NotEqualDepth:NotEqualDepth,NotEqualStencilFunc:NotEqualStencilFunc,NumberKeyframeTrack:NumberKeyframeTrack,Object3D:Object3D,ObjectLoader:ObjectLoader,ObjectSpaceNormalMap:ObjectSpaceNormalMap,OctahedronBufferGeometry:OctahedronBufferGeometry,OctahedronGeometry:OctahedronGeometry,OneFactor:OneFactor,OneMinusDstAlphaFactor:OneMinusDstAlphaFactor,OneMinusDstColorFactor:OneMinusDstColorFactor,OneMinusSrcAlphaFactor:OneMinusSrcAlphaFactor,OneMinusSrcColorFactor:OneMinusSrcColorFactor,OrthographicCamera:OrthographicCamera,PCFShadowMap:PCFShadowMap,PCFSoftShadowMap:PCFSoftShadowMap,PMREMGenerator:PMREMGenerator,ParametricBufferGeometry:ParametricBufferGeometry,ParametricGeometry:ParametricGeometry,Particle:Particle,ParticleBasicMaterial:ParticleBasicMaterial,ParticleSystem:ParticleSystem,ParticleSystemMaterial:ParticleSystemMaterial,Path:Path,PerspectiveCamera:PerspectiveCamera,Plane:Plane,PlaneBufferGeometry:PlaneBufferGeometry,PlaneGeometry:PlaneGeometry,PlaneHelper:PlaneHelper,PointCloud:PointCloud,PointCloudMaterial:PointCloudMaterial,PointLight:PointLight,PointLightHelper:PointLightHelper,Points:Points,PointsMaterial:PointsMaterial,PolarGridHelper:PolarGridHelper,PolyhedronBufferGeometry:PolyhedronBufferGeometry,PolyhedronGeometry:PolyhedronGeometry,PositionalAudio:PositionalAudio,PropertyBinding:PropertyBinding,PropertyMixer:PropertyMixer,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,Quaternion:Quaternion,QuaternionKeyframeTrack:QuaternionKeyframeTrack,QuaternionLinearInterpolant:QuaternionLinearInterpolant,REVISION:REVISION,RGBADepthPacking:RGBADepthPacking,RGBAFormat:RGBAFormat,RGBAIntegerFormat:RGBAIntegerFormat,RGBA_ASTC_10x10_Format:RGBA_ASTC_10x10_Format,RGBA_ASTC_10x5_Format:RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format:RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format:RGBA_ASTC_10x8_Format,RGBA_ASTC_12x10_Format:RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format:RGBA_ASTC_12x12_Format,RGBA_ASTC_4x4_Format:RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format:RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format:RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format:RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format:RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format:RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format:RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format:RGBA_ASTC_8x8_Format,RGBA_BPTC_Format:RGBA_BPTC_Format,RGBA_ETC2_EAC_Format:RGBA_ETC2_EAC_Format,RGBA_PVRTC_2BPPV1_Format:RGBA_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format:RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT1_Format:RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format:RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format:RGBA_S3TC_DXT5_Format,RGBDEncoding:RGBDEncoding,RGBEEncoding:RGBEEncoding,RGBEFormat:RGBEFormat,RGBFormat:RGBFormat,RGBIntegerFormat:RGBIntegerFormat,RGBM16Encoding:RGBM16Encoding,RGBM7Encoding:RGBM7Encoding,RGB_ETC1_Format:RGB_ETC1_Format,RGB_ETC2_Format:RGB_ETC2_Format,RGB_PVRTC_2BPPV1_Format:RGB_PVRTC_2BPPV1_Format,RGB_PVRTC_4BPPV1_Format:RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format:RGB_S3TC_DXT1_Format,RGFormat:RGFormat,RGIntegerFormat:RGIntegerFormat,RawShaderMaterial:RawShaderMaterial,Ray:Ray,Raycaster:Raycaster,RectAreaLight:RectAreaLight,RedFormat:RedFormat,RedIntegerFormat:RedIntegerFormat,ReinhardToneMapping:ReinhardToneMapping,RepeatWrapping:RepeatWrapping,ReplaceStencilOp:ReplaceStencilOp,ReverseSubtractEquation:ReverseSubtractEquation,RingBufferGeometry:RingBufferGeometry,RingGeometry:RingGeometry,SRGB8_ALPHA8_ASTC_10x10_Format:SRGB8_ALPHA8_ASTC_10x10_Format,SRGB8_ALPHA8_ASTC_10x5_Format:SRGB8_ALPHA8_ASTC_10x5_Format,SRGB8_ALPHA8_ASTC_10x6_Format:SRGB8_ALPHA8_ASTC_10x6_Format,SRGB8_ALPHA8_ASTC_10x8_Format:SRGB8_ALPHA8_ASTC_10x8_Format,SRGB8_ALPHA8_ASTC_12x10_Format:SRGB8_ALPHA8_ASTC_12x10_Format,SRGB8_ALPHA8_ASTC_12x12_Format:SRGB8_ALPHA8_ASTC_12x12_Format,SRGB8_ALPHA8_ASTC_4x4_Format:SRGB8_ALPHA8_ASTC_4x4_Format,SRGB8_ALPHA8_ASTC_5x4_Format:SRGB8_ALPHA8_ASTC_5x4_Format,SRGB8_ALPHA8_ASTC_5x5_Format:SRGB8_ALPHA8_ASTC_5x5_Format,SRGB8_ALPHA8_ASTC_6x5_Format:SRGB8_ALPHA8_ASTC_6x5_Format,SRGB8_ALPHA8_ASTC_6x6_Format:SRGB8_ALPHA8_ASTC_6x6_Format,SRGB8_ALPHA8_ASTC_8x5_Format:SRGB8_ALPHA8_ASTC_8x5_Format,SRGB8_ALPHA8_ASTC_8x6_Format:SRGB8_ALPHA8_ASTC_8x6_Format,SRGB8_ALPHA8_ASTC_8x8_Format:SRGB8_ALPHA8_ASTC_8x8_Format,Scene:Scene,SceneUtils:SceneUtils,ShaderChunk:ShaderChunk,ShaderLib:ShaderLib,ShaderMaterial:ShaderMaterial,ShadowMaterial:ShadowMaterial,Shape:Shape,ShapeBufferGeometry:ShapeBufferGeometry,ShapeGeometry:ShapeGeometry,ShapePath:ShapePath,ShapeUtils:ShapeUtils,ShortType:ShortType,Skeleton:Skeleton,SkeletonHelper:SkeletonHelper,SkinnedMesh:SkinnedMesh,SmoothShading:SmoothShading,Sphere:Sphere,SphereBufferGeometry:SphereBufferGeometry,SphereGeometry:SphereGeometry,Spherical:Spherical,SphericalHarmonics3:SphericalHarmonics3,Spline:Spline,SplineCurve:SplineCurve,SplineCurve3:SplineCurve3,SpotLight:SpotLight,SpotLightHelper:SpotLightHelper,Sprite:Sprite,SpriteMaterial:SpriteMaterial,SrcAlphaFactor:SrcAlphaFactor,SrcAlphaSaturateFactor:SrcAlphaSaturateFactor,SrcColorFactor:SrcColorFactor,StaticCopyUsage:StaticCopyUsage,StaticDrawUsage:StaticDrawUsage,StaticReadUsage:StaticReadUsage,StereoCamera:StereoCamera,StreamCopyUsage:StreamCopyUsage,StreamDrawUsage:StreamDrawUsage,StreamReadUsage:StreamReadUsage,StringKeyframeTrack:StringKeyframeTrack,SubtractEquation:SubtractEquation,SubtractiveBlending:SubtractiveBlending,TOUCH:TOUCH,TangentSpaceNormalMap:TangentSpaceNormalMap,TetrahedronBufferGeometry:TetrahedronBufferGeometry,TetrahedronGeometry:TetrahedronGeometry,TextBufferGeometry:TextBufferGeometry,TextGeometry:TextGeometry,Texture:Texture,TextureLoader:TextureLoader,TorusBufferGeometry:TorusBufferGeometry,TorusGeometry:TorusGeometry,TorusKnotBufferGeometry:TorusKnotBufferGeometry,TorusKnotGeometry:TorusKnotGeometry,Triangle:Triangle,TriangleFanDrawMode:TriangleFanDrawMode,TriangleStripDrawMode:TriangleStripDrawMode,TrianglesDrawMode:TrianglesDrawMode,TubeBufferGeometry:TubeBufferGeometry,TubeGeometry:TubeGeometry,UVMapping:UVMapping,Uint16Attribute:Uint16Attribute,Uint16BufferAttribute:Uint16BufferAttribute,Uint32Attribute:Uint32Attribute,Uint32BufferAttribute:Uint32BufferAttribute,Uint8Attribute:Uint8Attribute,Uint8BufferAttribute:Uint8BufferAttribute,Uint8ClampedAttribute:Uint8ClampedAttribute,Uint8ClampedBufferAttribute:Uint8ClampedBufferAttribute,Uniform:Uniform,UniformsLib:UniformsLib,UniformsUtils:UniformsUtils,UnsignedByteType:UnsignedByteType,UnsignedInt248Type:UnsignedInt248Type,UnsignedIntType:UnsignedIntType,UnsignedShort4444Type:UnsignedShort4444Type,UnsignedShort5551Type:UnsignedShort5551Type,UnsignedShort565Type:UnsignedShort565Type,UnsignedShortType:UnsignedShortType,VSMShadowMap:VSMShadowMap,Vector2:Vector2,Vector3:Vector3,Vector4:Vector4,VectorKeyframeTrack:VectorKeyframeTrack,Vertex:Vertex,VertexColors:VertexColors,VideoTexture:VideoTexture,WebGL1Renderer:WebGL1Renderer,WebGLCubeRenderTarget:WebGLCubeRenderTarget,WebGLMultisampleRenderTarget:WebGLMultisampleRenderTarget,WebGLRenderTarget:WebGLRenderTarget,WebGLRenderTargetCube:WebGLRenderTargetCube,WebGLRenderer:WebGLRenderer,WebGLUtils:WebGLUtils,WireframeGeometry:WireframeGeometry,WireframeHelper:WireframeHelper,WrapAroundEnding:WrapAroundEnding,XHRLoader:XHRLoader,ZeroCurvatureEnding:ZeroCurvatureEnding,ZeroFactor:ZeroFactor,ZeroSlopeEnding:ZeroSlopeEnding,ZeroStencilOp:ZeroStencilOp,sRGBEncoding:sRGBEncoding});var OrbitControls=function(e,t){if(t===undefined)console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.');if(t===document)console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.');this.object=e;this.domElement=t;this.enabled=true;this.target=new Vector3;this.minDistance=0;this.maxDistance=Infinity;this.minZoom=0;this.maxZoom=Infinity;this.minPolarAngle=0;this.maxPolarAngle=Math.PI;this.minAzimuthAngle=-Infinity;this.maxAzimuthAngle=Infinity;this.enableDamping=false;this.dampingFactor=.05;this.enableZoom=true;this.zoomSpeed=1;this.enableRotate=true;this.rotateSpeed=1;this.enablePan=true;this.panSpeed=1;this.screenSpacePanning=true;this.keyPanSpeed=7;this.autoRotate=false;this.autoRotateSpeed=2;this.enableKeys=true;this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40};this.mouseButtons={LEFT:MOUSE.ROTATE,MIDDLE:MOUSE.DOLLY,RIGHT:MOUSE.PAN};this.touches={ONE:TOUCH.ROTATE,TWO:TOUCH.DOLLY_PAN};this.target0=this.target.clone();this.position0=this.object.position.clone();this.zoom0=this.object.zoom;this.getPolarAngle=function(){return l.phi};this.getAzimuthalAngle=function(){return l.theta};this.saveState=function(){n.target0.copy(n.target);n.position0.copy(n.object.position);n.zoom0=n.object.zoom};this.reset=function(){n.target.copy(n.target0);n.object.position.copy(n.position0);n.object.zoom=n.zoom0;n.object.updateProjectionMatrix();n.dispatchEvent(r);n.update();s=o.NONE};this.update=function(){var t=new Vector3;var i=(new Quaternion).setFromUnitVectors(e.up,new Vector3(0,1,0));var a=i.clone().inverse();var p=new Vector3;var m=new Quaternion;var g=2*Math.PI;return function e(){var y=n.object.position;t.copy(y).sub(n.target);t.applyQuaternion(i);l.setFromVector3(t);if(n.autoRotate&&s===o.NONE){T(w())}if(n.enableDamping){l.theta+=u.theta*n.dampingFactor;l.phi+=u.phi*n.dampingFactor}else{l.theta+=u.theta;l.phi+=u.phi}var v=n.minAzimuthAngle;var _=n.maxAzimuthAngle;if(isFinite(v)&&isFinite(_)){if(v<-Math.PI)v+=g;else if(v>Math.PI)v-=g;if(_<-Math.PI)_+=g;else if(_>Math.PI)_-=g;if(v<_){l.theta=Math.max(v,Math.min(_,l.theta))}else{l.theta=l.theta>(v+_)/2?Math.max(v,l.theta):Math.min(_,l.theta)}}l.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,l.phi));l.makeSafe();l.radius*=h;l.radius=Math.max(n.minDistance,Math.min(n.maxDistance,l.radius));if(n.enableDamping===true){n.target.addScaledVector(f,n.dampingFactor)}else{n.target.add(f)}t.setFromSpherical(l);t.applyQuaternion(a);y.copy(n.target).add(t);n.object.lookAt(n.target);if(n.enableDamping===true){u.theta*=1-n.dampingFactor;u.phi*=1-n.dampingFactor;f.multiplyScalar(1-n.dampingFactor)}else{u.set(0,0,0);f.set(0,0,0)}h=1;if(d||p.distanceToSquared(n.object.position)>c||8*(1-m.dot(n.object.quaternion))>c){n.dispatchEvent(r);p.copy(n.object.position);m.copy(n.object.quaternion);d=false;return true}return false}}();this.dispose=function(){n.domElement.removeEventListener("contextmenu",le,false);n.domElement.removeEventListener("pointerdown",Q,false);n.domElement.removeEventListener("wheel",ie,false);n.domElement.removeEventListener("touchstart",oe,false);n.domElement.removeEventListener("touchend",ce,false);n.domElement.removeEventListener("touchmove",se,false);n.domElement.ownerDocument.removeEventListener("pointermove",K,false);n.domElement.ownerDocument.removeEventListener("pointerup",ee,false);n.domElement.removeEventListener("keydown",ae,false)};var n=this;var r={type:"change"};var i={type:"start"};var a={type:"end"};var o={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};var s=o.NONE;var c=1e-6;var l=new Spherical;var u=new Spherical;var h=1;var f=new Vector3;var d=false;var p=new Vector2;var m=new Vector2;var g=new Vector2;var y=new Vector2;var v=new Vector2;var _=new Vector2;var x=new Vector2;var b=new Vector2;var M=new Vector2;function w(){return 2*Math.PI/60/60*n.autoRotateSpeed}function S(){return Math.pow(.95,n.zoomSpeed)}function T(e){u.theta-=e}function E(e){u.phi-=e}var A=function(){var e=new Vector3;return function t(n,r){e.setFromMatrixColumn(r,0);e.multiplyScalar(-n);f.add(e)}}();var L=function(){var e=new Vector3;return function t(r,i){if(n.screenSpacePanning===true){e.setFromMatrixColumn(i,1)}else{e.setFromMatrixColumn(i,0);e.crossVectors(n.object.up,e)}e.multiplyScalar(r);f.add(e)}}();var C=function(){var e=new Vector3;return function t(r,i){var a=n.domElement;if(n.object.isPerspectiveCamera){var o=n.object.position;e.copy(o).sub(n.target);var s=e.length();s*=Math.tan(n.object.fov/2*Math.PI/180);A(2*r*s/a.clientHeight,n.object.matrix);L(2*i*s/a.clientHeight,n.object.matrix)}else if(n.object.isOrthographicCamera){A(r*(n.object.right-n.object.left)/n.object.zoom/a.clientWidth,n.object.matrix);L(i*(n.object.top-n.object.bottom)/n.object.zoom/a.clientHeight,n.object.matrix)}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");n.enablePan=false}}}();function R(e){if(n.object.isPerspectiveCamera){h/=e}else if(n.object.isOrthographicCamera){n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom*e));n.object.updateProjectionMatrix();d=true}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");n.enableZoom=false}}function P(e){if(n.object.isPerspectiveCamera){h*=e}else if(n.object.isOrthographicCamera){n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/e));n.object.updateProjectionMatrix();d=true}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");n.enableZoom=false}}function B(e){p.set(e.clientX,e.clientY)}function D(e){x.set(e.clientX,e.clientY)}function G(e){y.set(e.clientX,e.clientY)}function I(e){m.set(e.clientX,e.clientY);g.subVectors(m,p).multiplyScalar(n.rotateSpeed);var t=n.domElement;T(2*Math.PI*g.x/t.clientHeight);E(2*Math.PI*g.y/t.clientHeight);p.copy(m);n.update()}function O(e){b.set(e.clientX,e.clientY);M.subVectors(b,x);if(M.y>0){R(S())}else if(M.y<0){P(S())}x.copy(b);n.update()}function F(e){v.set(e.clientX,e.clientY);_.subVectors(v,y).multiplyScalar(n.panSpeed);C(_.x,_.y);y.copy(v);n.update()}function N(){}function U(e){if(e.deltaY<0){P(S())}else if(e.deltaY>0){R(S())}n.update()}function V(e){var t=false;switch(e.keyCode){case n.keys.UP:C(0,n.keyPanSpeed);t=true;break;case n.keys.BOTTOM:C(0,-n.keyPanSpeed);t=true;break;case n.keys.LEFT:C(n.keyPanSpeed,0);t=true;break;case n.keys.RIGHT:C(-n.keyPanSpeed,0);t=true;break}if(t){e.preventDefault();n.update()}}function z(e){if(e.touches.length==1){p.set(e.touches[0].pageX,e.touches[0].pageY)}else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX);var n=.5*(e.touches[0].pageY+e.touches[1].pageY);p.set(t,n)}}function H(e){if(e.touches.length==1){y.set(e.touches[0].pageX,e.touches[0].pageY)}else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX);var n=.5*(e.touches[0].pageY+e.touches[1].pageY);y.set(t,n)}}function k(e){var t=e.touches[0].pageX-e.touches[1].pageX;var n=e.touches[0].pageY-e.touches[1].pageY;var r=Math.sqrt(t*t+n*n);x.set(0,r)}function W(e){if(n.enableZoom)k(e);if(n.enablePan)H(e)}function j(e){if(n.enableZoom)k(e);if(n.enableRotate)z(e)}function q(e){if(e.touches.length==1){m.set(e.touches[0].pageX,e.touches[0].pageY)}else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX);var r=.5*(e.touches[0].pageY+e.touches[1].pageY);m.set(t,r)}g.subVectors(m,p).multiplyScalar(n.rotateSpeed);var i=n.domElement;T(2*Math.PI*g.x/i.clientHeight);E(2*Math.PI*g.y/i.clientHeight);p.copy(m)}function X(e){if(e.touches.length==1){v.set(e.touches[0].pageX,e.touches[0].pageY)}else{var t=.5*(e.touches[0].pageX+e.touches[1].pageX);var r=.5*(e.touches[0].pageY+e.touches[1].pageY);v.set(t,r)}_.subVectors(v,y).multiplyScalar(n.panSpeed);C(_.x,_.y);y.copy(v)}function $(e){var t=e.touches[0].pageX-e.touches[1].pageX;var r=e.touches[0].pageY-e.touches[1].pageY;var i=Math.sqrt(t*t+r*r);b.set(0,i);M.set(0,Math.pow(b.y/x.y,n.zoomSpeed));R(M.y);x.copy(b)}function Y(e){if(n.enableZoom)$(e);if(n.enablePan)X(e)}function Z(e){if(n.enableZoom)$(e);if(n.enableRotate)q(e)}function J(){}function Q(e){if(n.enabled===false)return;switch(e.pointerType){case"mouse":te(e);break}}function K(e){if(n.enabled===false)return;switch(e.pointerType){case"mouse":ne(e);break}}function ee(e){if(n.enabled===false)return;switch(e.pointerType){case"mouse":re(e);break}}function te(e){e.preventDefault();n.domElement.focus?n.domElement.focus():window.focus();var t;switch(e.button){case 0:t=n.mouseButtons.LEFT;break;case 1:t=n.mouseButtons.MIDDLE;break;case 2:t=n.mouseButtons.RIGHT;break;default:t=-1}switch(t){case MOUSE.DOLLY:if(n.enableZoom===false)return;D(e);s=o.DOLLY;break;case MOUSE.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(n.enablePan===false)return;G(e);s=o.PAN}else{if(n.enableRotate===false)return;B(e);s=o.ROTATE}break;case MOUSE.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(n.enableRotate===false)return;B(e);s=o.ROTATE}else{if(n.enablePan===false)return;G(e);s=o.PAN}break;default:s=o.NONE}if(s!==o.NONE){n.domElement.ownerDocument.addEventListener("pointermove",K,false);n.domElement.ownerDocument.addEventListener("pointerup",ee,false);n.dispatchEvent(i)}}function ne(e){if(n.enabled===false)return;e.preventDefault();switch(s){case o.ROTATE:if(n.enableRotate===false)return;I(e);break;case o.DOLLY:if(n.enableZoom===false)return;O(e);break;case o.PAN:if(n.enablePan===false)return;F(e);break}}function re(e){if(n.enabled===false)return;N(e);n.domElement.ownerDocument.removeEventListener("pointermove",K,false);n.domElement.ownerDocument.removeEventListener("pointerup",ee,false);n.dispatchEvent(a);s=o.NONE}function ie(e){if(n.enabled===false||n.enableZoom===false||s!==o.NONE&&s!==o.ROTATE)return;e.preventDefault();e.stopPropagation();n.dispatchEvent(i);U(e);n.dispatchEvent(a)}function ae(e){if(n.enabled===false||n.enableKeys===false||n.enablePan===false)return;V(e)}function oe(e){if(n.enabled===false)return;e.preventDefault();switch(e.touches.length){case 1:switch(n.touches.ONE){case TOUCH.ROTATE:if(n.enableRotate===false)return;z(e);s=o.TOUCH_ROTATE;break;case TOUCH.PAN:if(n.enablePan===false)return;H(e);s=o.TOUCH_PAN;break;default:s=o.NONE}break;case 2:switch(n.touches.TWO){case TOUCH.DOLLY_PAN:if(n.enableZoom===false&&n.enablePan===false)return;W(e);s=o.TOUCH_DOLLY_PAN;break;case TOUCH.DOLLY_ROTATE:if(n.enableZoom===false&&n.enableRotate===false)return;j(e);s=o.TOUCH_DOLLY_ROTATE;break;default:s=o.NONE}break;default:s=o.NONE}if(s!==o.NONE){n.dispatchEvent(i)}}function se(e){if(n.enabled===false)return;e.preventDefault();e.stopPropagation();switch(s){case o.TOUCH_ROTATE:if(n.enableRotate===false)return;q(e);n.update();break;case o.TOUCH_PAN:if(n.enablePan===false)return;X(e);n.update();break;case o.TOUCH_DOLLY_PAN:if(n.enableZoom===false&&n.enablePan===false)return;Y(e);n.update();break;case o.TOUCH_DOLLY_ROTATE:if(n.enableZoom===false&&n.enableRotate===false)return;Z(e);n.update();break;default:s=o.NONE}}function ce(e){if(n.enabled===false)return;J(e);n.dispatchEvent(a);s=o.NONE}function le(e){if(n.enabled===false)return;e.preventDefault()}n.domElement.addEventListener("contextmenu",le,false);n.domElement.addEventListener("pointerdown",Q,false);n.domElement.addEventListener("wheel",ie,false);n.domElement.addEventListener("touchstart",oe,false);n.domElement.addEventListener("touchend",ce,false);n.domElement.addEventListener("touchmove",se,false);n.domElement.addEventListener("keydown",ae,false);if(n.domElement.tabIndex===-1){n.domElement.tabIndex=0}this.update()};OrbitControls.prototype=Object.create(EventDispatcher.prototype);OrbitControls.prototype.constructor=OrbitControls;var MapControls=function(e,t){OrbitControls.call(this,e,t);this.screenSpacePanning=false;this.mouseButtons.LEFT=MOUSE.PAN;this.mouseButtons.RIGHT=MOUSE.ROTATE;this.touches.ONE=TOUCH.PAN;this.touches.TWO=TOUCH.DOLLY_ROTATE};MapControls.prototype=Object.create(EventDispatcher.prototype);MapControls.prototype.constructor=MapControls;var CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")};function Pass(){this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false}Object.assign(Pass.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}});Pass.FullScreenQuad=function(){var e=new OrthographicCamera(-1,1,1,-1,0,1);var t=new PlaneBufferGeometry(2,2);var n=function(e){this._mesh=new Mesh(t,e)};Object.defineProperty(n.prototype,"material",{get:function(){return this._mesh.material},set:function(e){this._mesh.material=e}});Object.assign(n.prototype,{dispose:function(){this._mesh.geometry.dispose()},render:function(t){t.render(this._mesh,e)}});return n}();var ShaderPass=function(e,t){Pass.call(this);this.textureID=t!==undefined?t:"tDiffuse";if(e instanceof ShaderMaterial){this.uniforms=e.uniforms;this.material=e}else if(e){this.uniforms=UniformsUtils.clone(e.uniforms);this.material=new ShaderMaterial({defines:Object.assign({},e.defines),uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})}this.fsQuad=new Pass.FullScreenQuad(this.material)};ShaderPass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:ShaderPass,render:function(e,t,n){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=n.texture}this.fsQuad.material=this.material;if(this.renderToScreen){e.setRenderTarget(null);this.fsQuad.render(e)}else{e.setRenderTarget(t);if(this.clear)e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil);this.fsQuad.render(e)}}});var MaskPass=function(e,t){Pass.call(this);this.scene=e;this.camera=t;this.clear=true;this.needsSwap=false;this.inverse=false};MaskPass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:MaskPass,render:function(e,t,n){var r=e.getContext();var i=e.state;i.buffers.color.setMask(false);i.buffers.depth.setMask(false);i.buffers.color.setLocked(true);i.buffers.depth.setLocked(true);var a,o;if(this.inverse){a=0;o=1}else{a=1;o=0}i.buffers.stencil.setTest(true);i.buffers.stencil.setOp(r.REPLACE,r.REPLACE,r.REPLACE);i.buffers.stencil.setFunc(r.ALWAYS,a,4294967295);i.buffers.stencil.setClear(o);i.buffers.stencil.setLocked(true);e.setRenderTarget(n);if(this.clear)e.clear();e.render(this.scene,this.camera);e.setRenderTarget(t);if(this.clear)e.clear();e.render(this.scene,this.camera);i.buffers.color.setLocked(false);i.buffers.depth.setLocked(false);i.buffers.stencil.setLocked(false);i.buffers.stencil.setFunc(r.EQUAL,1,4294967295);i.buffers.stencil.setOp(r.KEEP,r.KEEP,r.KEEP);i.buffers.stencil.setLocked(true)}});var ClearMaskPass=function(){Pass.call(this);this.needsSwap=false};ClearMaskPass.prototype=Object.create(Pass.prototype);Object.assign(ClearMaskPass.prototype,{render:function(e){e.state.buffers.stencil.setLocked(false);e.state.buffers.stencil.setTest(false)}});var EffectComposer=function(e,t){this.renderer=e;if(t===undefined){var n={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};var r=e.getSize(new Vector2);this._pixelRatio=e.getPixelRatio();this._width=r.width;this._height=r.height;t=new WebGLRenderTarget(this._width*this._pixelRatio,this._height*this._pixelRatio,n);t.texture.name="EffectComposer.rt1"}else{this._pixelRatio=1;this._width=t.width;this._height=t.height}this.renderTarget1=t;this.renderTarget2=t.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.renderToScreen=true;this.passes=[];if(CopyShader===undefined){console.error("THREE.EffectComposer relies on CopyShader")}if(ShaderPass===undefined){console.error("THREE.EffectComposer relies on ShaderPass")}this.copyPass=new ShaderPass(CopyShader);this.clock=new Clock};Object.assign(EffectComposer.prototype,{swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=e},addPass:function(e){this.passes.push(e);e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)},insertPass:function(e,t){this.passes.splice(t,0,e);e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)},isLastEnabledPass:function(e){for(var t=e+1;t<this.passes.length;t++){if(this.passes[t].enabled){return false}}return true},render:function(e){if(e===undefined){e=this.clock.getDelta()}var t=this.renderer.getRenderTarget();var n=false;var r,i,a=this.passes.length;for(i=0;i<a;i++){r=this.passes[i];if(r.enabled===false)continue;r.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(i);r.render(this.renderer,this.writeBuffer,this.readBuffer,e,n);if(r.needsSwap){if(n){var o=this.renderer.getContext();var s=this.renderer.state.buffers.stencil;s.setFunc(o.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e);s.setFunc(o.EQUAL,1,4294967295)}this.swapBuffers()}if(MaskPass!==undefined){if(r instanceof MaskPass){n=true}else if(r instanceof ClearMaskPass){n=false}}}this.renderer.setRenderTarget(t)},reset:function(e){if(e===undefined){var t=this.renderer.getSize(new Vector2);this._pixelRatio=this.renderer.getPixelRatio();this._width=t.width;this._height=t.height;e=this.renderTarget1.clone();e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=e;this.renderTarget2=e.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(e,t){this._width=e;this._height=t;var n=this._width*this._pixelRatio;var r=this._height*this._pixelRatio;this.renderTarget1.setSize(n,r);this.renderTarget2.setSize(n,r);for(var i=0;i<this.passes.length;i++){this.passes[i].setSize(n,r)}},setPixelRatio:function(e){this._pixelRatio=e;this.setSize(this._width,this._height)}});var Pass$1=function(){this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false};Object.assign(Pass$1.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}});Pass$1.FullScreenQuad=function(){var e=new OrthographicCamera(-1,1,1,-1,0,1);var t=new PlaneBufferGeometry(2,2);var n=function(e){this._mesh=new Mesh(t,e)};Object.defineProperty(n.prototype,"material",{get:function(){return this._mesh.material},set:function(e){this._mesh.material=e}});Object.assign(n.prototype,{dispose:function(){this._mesh.geometry.dispose()},render:function(t){t.render(this._mesh,e)}});return n}();var RenderPass=function(e,t,n,r,i){Pass.call(this);this.scene=e;this.camera=t;this.overrideMaterial=n;this.clearColor=r;this.clearAlpha=i!==undefined?i:0;this.clear=true;this.clearDepth=false;this.needsSwap=false};RenderPass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:RenderPass,render:function(e,t,n){var r=e.autoClear;e.autoClear=false;var i,a,o;if(this.overrideMaterial!==undefined){o=this.scene.overrideMaterial;this.scene.overrideMaterial=this.overrideMaterial}if(this.clearColor){i=e.getClearColor().getHex();a=e.getClearAlpha();e.setClearColor(this.clearColor,this.clearAlpha)}if(this.clearDepth){e.clearDepth()}e.setRenderTarget(this.renderToScreen?null:n);if(this.clear)e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil);e.render(this.scene,this.camera);if(this.clearColor){e.setClearColor(i,a)}if(this.overrideMaterial!==undefined){this.scene.overrideMaterial=o}e.autoClear=r}});var OutlinePass=function(e,t,n,r){this.renderScene=t;this.renderCamera=n;this.selectedObjects=r!==undefined?r:[];this.visibleEdgeColor=new Color(1,1,1);this.hiddenEdgeColor=new Color(.1,.04,.02);this.edgeGlow=0;this.usePatternTexture=false;this.edgeThickness=1;this.edgeStrength=3;this.downSampleRatio=2;this.pulsePeriod=0;Pass.call(this);this.resolution=e!==undefined?new Vector2(e.x,e.y):new Vector2(256,256);var i={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};var a=Math.round(this.resolution.x/this.downSampleRatio);var o=Math.round(this.resolution.y/this.downSampleRatio);this.maskBufferMaterial=new MeshBasicMaterial({color:16777215});this.maskBufferMaterial.side=DoubleSide;this.renderTargetMaskBuffer=new WebGLRenderTarget(this.resolution.x,this.resolution.y,i);this.renderTargetMaskBuffer.texture.name="OutlinePass.mask";this.renderTargetMaskBuffer.texture.generateMipmaps=false;this.depthMaterial=new MeshDepthMaterial;this.depthMaterial.side=DoubleSide;this.depthMaterial.depthPacking=RGBADepthPacking;this.depthMaterial.blending=NoBlending;this.prepareMaskMaterial=this.getPrepareMaskMaterial();this.prepareMaskMaterial.side=DoubleSide;this.prepareMaskMaterial.fragmentShader=u(this.prepareMaskMaterial.fragmentShader,this.renderCamera);this.renderTargetDepthBuffer=new WebGLRenderTarget(this.resolution.x,this.resolution.y,i);this.renderTargetDepthBuffer.texture.name="OutlinePass.depth";this.renderTargetDepthBuffer.texture.generateMipmaps=false;this.renderTargetMaskDownSampleBuffer=new WebGLRenderTarget(a,o,i);this.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample";this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=false;this.renderTargetBlurBuffer1=new WebGLRenderTarget(a,o,i);this.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1";this.renderTargetBlurBuffer1.texture.generateMipmaps=false;this.renderTargetBlurBuffer2=new WebGLRenderTarget(Math.round(a/2),Math.round(o/2),i);this.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2";this.renderTargetBlurBuffer2.texture.generateMipmaps=false;this.edgeDetectionMaterial=this.getEdgeDetectionMaterial();this.renderTargetEdgeBuffer1=new WebGLRenderTarget(a,o,i);this.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1";this.renderTargetEdgeBuffer1.texture.generateMipmaps=false;this.renderTargetEdgeBuffer2=new WebGLRenderTarget(Math.round(a/2),Math.round(o/2),i);this.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2";this.renderTargetEdgeBuffer2.texture.generateMipmaps=false;var s=4;var c=4;this.separableBlurMaterial1=this.getSeperableBlurMaterial(s);this.separableBlurMaterial1.uniforms["texSize"].value.set(a,o);this.separableBlurMaterial1.uniforms["kernelRadius"].value=1;this.separableBlurMaterial2=this.getSeperableBlurMaterial(c);this.separableBlurMaterial2.uniforms["texSize"].value.set(Math.round(a/2),Math.round(o/2));this.separableBlurMaterial2.uniforms["kernelRadius"].value=c;this.overlayMaterial=this.getOverlayMaterial();if(CopyShader===undefined)console.error("OutlinePass relies on CopyShader");var l=CopyShader;this.copyUniforms=UniformsUtils.clone(l.uniforms);this.copyUniforms["opacity"].value=1;this.materialCopy=new ShaderMaterial({uniforms:this.copyUniforms,vertexShader:l.vertexShader,fragmentShader:l.fragmentShader,blending:NoBlending,depthTest:false,depthWrite:false,transparent:true});this.enabled=true;this.needsSwap=false;this.oldClearColor=new Color;this.oldClearAlpha=1;this.fsQuad=new Pass.FullScreenQuad(null);this.tempPulseColor1=new Color;this.tempPulseColor2=new Color;this.textureMatrix=new Matrix4;function u(e,t){var n=t.isPerspectiveCamera?"perspective":"orthographic";return e.replace(/DEPTH_TO_VIEW_Z/g,n+"DepthToViewZ")}};OutlinePass.prototype=Object.assign(Object.create(Pass.prototype),{constructor:OutlinePass,dispose:function(){this.renderTargetMaskBuffer.dispose();this.renderTargetDepthBuffer.dispose();this.renderTargetMaskDownSampleBuffer.dispose();this.renderTargetBlurBuffer1.dispose();this.renderTargetBlurBuffer2.dispose();this.renderTargetEdgeBuffer1.dispose();this.renderTargetEdgeBuffer2.dispose()},setSize:function(e,t){this.renderTargetMaskBuffer.setSize(e,t);var n=Math.round(e/this.downSampleRatio);var r=Math.round(t/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(n,r);this.renderTargetBlurBuffer1.setSize(n,r);this.renderTargetEdgeBuffer1.setSize(n,r);this.separableBlurMaterial1.uniforms["texSize"].value.set(n,r);n=Math.round(n/2);r=Math.round(r/2);this.renderTargetBlurBuffer2.setSize(n,r);this.renderTargetEdgeBuffer2.setSize(n,r);this.separableBlurMaterial2.uniforms["texSize"].value.set(n,r)},changeVisibilityOfSelectedObjects:function(e){function t(t){if(t.isMesh){if(e){t.visible=t.userData.oldVisible;delete t.userData.oldVisible}else{t.userData.oldVisible=t.visible;t.visible=e}}}for(var n=0;n<this.selectedObjects.length;n++){var r=this.selectedObjects[n];r.traverse(t)}},changeVisibilityOfNonSelectedObjects:function(e){var t=[];function n(e){if(e.isMesh)t.push(e)}for(var r=0;r<this.selectedObjects.length;r++){var i=this.selectedObjects[r];i.traverse(n)}function a(n){if(n.isMesh||n.isLine||n.isSprite){var r=false;for(var i=0;i<t.length;i++){var a=t[i].id;if(a===n.id){r=true;break}}if(!r){var o=n.visible;if(!e||n.bVisible)n.visible=e;n.bVisible=o}}}this.renderScene.traverse(a)},updateTextureMatrix:function(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);this.textureMatrix.multiply(this.renderCamera.projectionMatrix);this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)},render:function(e,t,n,r,i){if(this.selectedObjects.length>0){this.oldClearColor.copy(e.getClearColor());this.oldClearAlpha=e.getClearAlpha();var a=e.autoClear;e.autoClear=false;if(i)e.state.buffers.stencil.setTest(false);e.setClearColor(16777215,1);this.changeVisibilityOfSelectedObjects(false);var o=this.renderScene.background;this.renderScene.background=null;this.renderScene.overrideMaterial=this.depthMaterial;e.setRenderTarget(this.renderTargetDepthBuffer);e.clear();e.render(this.renderScene,this.renderCamera);this.changeVisibilityOfSelectedObjects(true);this.updateTextureMatrix();this.changeVisibilityOfNonSelectedObjects(false);this.renderScene.overrideMaterial=this.prepareMaskMaterial;this.prepareMaskMaterial.uniforms["cameraNearFar"].value.set(this.renderCamera.near,this.renderCamera.far);this.prepareMaskMaterial.uniforms["depthTexture"].value=this.renderTargetDepthBuffer.texture;this.prepareMaskMaterial.uniforms["textureMatrix"].value=this.textureMatrix;e.setRenderTarget(this.renderTargetMaskBuffer);e.clear();e.render(this.renderScene,this.renderCamera);this.renderScene.overrideMaterial=null;this.changeVisibilityOfNonSelectedObjects(true);this.renderScene.background=o;this.fsQuad.material=this.materialCopy;this.copyUniforms["tDiffuse"].value=this.renderTargetMaskBuffer.texture;e.setRenderTarget(this.renderTargetMaskDownSampleBuffer);e.clear();this.fsQuad.render(e);this.tempPulseColor1.copy(this.visibleEdgeColor);this.tempPulseColor2.copy(this.hiddenEdgeColor);if(this.pulsePeriod>0){var s=(1+.25)/2+Math.cos(performance.now()*.01/this.pulsePeriod)*(1-.25)/2;this.tempPulseColor1.multiplyScalar(s);this.tempPulseColor2.multiplyScalar(s)}this.fsQuad.material=this.edgeDetectionMaterial;this.edgeDetectionMaterial.uniforms["maskTexture"].value=this.renderTargetMaskDownSampleBuffer.texture;this.edgeDetectionMaterial.uniforms["texSize"].value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height);this.edgeDetectionMaterial.uniforms["visibleEdgeColor"].value=this.tempPulseColor1;this.edgeDetectionMaterial.uniforms["hiddenEdgeColor"].value=this.tempPulseColor2;e.setRenderTarget(this.renderTargetEdgeBuffer1);e.clear();this.fsQuad.render(e);this.fsQuad.material=this.separableBlurMaterial1;this.separableBlurMaterial1.uniforms["colorTexture"].value=this.renderTargetEdgeBuffer1.texture;this.separableBlurMaterial1.uniforms["direction"].value=OutlinePass.BlurDirectionX;this.separableBlurMaterial1.uniforms["kernelRadius"].value=this.edgeThickness;e.setRenderTarget(this.renderTargetBlurBuffer1);e.clear();this.fsQuad.render(e);this.separableBlurMaterial1.uniforms["colorTexture"].value=this.renderTargetBlurBuffer1.texture;this.separableBlurMaterial1.uniforms["direction"].value=OutlinePass.BlurDirectionY;e.setRenderTarget(this.renderTargetEdgeBuffer1);e.clear();this.fsQuad.render(e);this.fsQuad.material=this.separableBlurMaterial2;this.separableBlurMaterial2.uniforms["colorTexture"].value=this.renderTargetEdgeBuffer1.texture;this.separableBlurMaterial2.uniforms["direction"].value=OutlinePass.BlurDirectionX;e.setRenderTarget(this.renderTargetBlurBuffer2);e.clear();this.fsQuad.render(e);this.separableBlurMaterial2.uniforms["colorTexture"].value=this.renderTargetBlurBuffer2.texture;this.separableBlurMaterial2.uniforms["direction"].value=OutlinePass.BlurDirectionY;e.setRenderTarget(this.renderTargetEdgeBuffer2);e.clear();this.fsQuad.render(e);this.fsQuad.material=this.overlayMaterial;this.overlayMaterial.uniforms["maskTexture"].value=this.renderTargetMaskBuffer.texture;this.overlayMaterial.uniforms["edgeTexture1"].value=this.renderTargetEdgeBuffer1.texture;this.overlayMaterial.uniforms["edgeTexture2"].value=this.renderTargetEdgeBuffer2.texture;this.overlayMaterial.uniforms["patternTexture"].value=this.patternTexture;this.overlayMaterial.uniforms["edgeStrength"].value=this.edgeStrength;this.overlayMaterial.uniforms["edgeGlow"].value=this.edgeGlow;this.overlayMaterial.uniforms["usePatternTexture"].value=this.usePatternTexture;if(i)e.state.buffers.stencil.setTest(true);e.setRenderTarget(n);this.fsQuad.render(e);e.setClearColor(this.oldClearColor,this.oldClearAlpha);e.autoClear=a}if(this.renderToScreen){this.fsQuad.material=this.materialCopy;this.copyUniforms["tDiffuse"].value=n.texture;e.setRenderTarget(null);this.fsQuad.render(e)}},getPrepareMaskMaterial:function(){return new ShaderMaterial({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new Vector2(.5,.5)},textureMatrix:{value:null}},vertexShader:["#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","varying vec4 projTexCoord;","varying vec4 vPosition;","uniform mat4 textureMatrix;","void main() {","#include <skinbase_vertex>","#include <begin_vertex>","#include <morphtarget_vertex>","#include <skinning_vertex>","#include <project_vertex>","vPosition = mvPosition;","vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","projTexCoord = textureMatrix * worldPosition;","}"].join("\n"),fragmentShader:["#include <packing>","varying vec4 vPosition;","varying vec4 projTexCoord;","uniform sampler2D depthTexture;","uniform vec2 cameraNearFar;","void main() {","float depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));","float viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );","float depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;","gl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);","}"].join("\n")})},getEdgeDetectionMaterial:function(){return new ShaderMaterial({uniforms:{maskTexture:{value:null},texSize:{value:new Vector2(.5,.5)},visibleEdgeColor:{value:new Vector3(1,1,1)},hiddenEdgeColor:{value:new Vector3(1,1,1)}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"varying vec2 vUv;uniform sampler2D maskTexture;uniform vec2 texSize;uniform vec3 visibleEdgeColor;uniform vec3 hiddenEdgeColor;void main() {\nvec2 invSize = 1.0 / texSize;vec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);vec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);vec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);vec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);vec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);float diff1 = (c1.r - c2.r)*0.5;float diff2 = (c3.r - c4.r)*0.5;float d = length( vec2(diff1, diff2) );float a1 = min(c1.g, c2.g);float a2 = min(c3.g, c4.g);float visibilityFactor = min(a1, a2);vec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;gl_FragColor = vec4(edgeColor, 1.0) * vec4(d);}"})},getSeperableBlurMaterial:function(e){return new ShaderMaterial({defines:{MAX_RADIUS:e},uniforms:{colorTexture:{value:null},texSize:{value:new Vector2(.5,.5)},direction:{value:new Vector2(.5,.5)},kernelRadius:{value:1}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"#include <common>varying vec2 vUv;uniform sampler2D colorTexture;uniform vec2 texSize;uniform vec2 direction;uniform float kernelRadius;float gaussianPdf(in float x, in float sigma) {return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;}void main() {vec2 invSize = 1.0 / texSize;float weightSum = gaussianPdf(0.0, kernelRadius);vec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;vec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);vec2 uvOffset = delta;for( int i = 1; i <= MAX_RADIUS; i ++ ) {float w = gaussianPdf(uvOffset.x, kernelRadius);vec4 sample1 = texture2D( colorTexture, vUv + uvOffset);vec4 sample2 = texture2D( colorTexture, vUv - uvOffset);diffuseSum += ((sample1 + sample2) * w);weightSum += (2.0 * w);uvOffset += delta;}gl_FragColor = diffuseSum/weightSum;}"})},getOverlayMaterial:function(){return new ShaderMaterial({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"varying vec2 vUv;uniform sampler2D maskTexture;uniform sampler2D edgeTexture1;uniform sampler2D edgeTexture2;uniform sampler2D patternTexture;uniform float edgeStrength;uniform float edgeGlow;uniform bool usePatternTexture;void main() {vec4 edgeValue1 = texture2D(edgeTexture1, vUv);vec4 edgeValue2 = texture2D(edgeTexture2, vUv);vec4 maskColor = texture2D(maskTexture, vUv);vec4 patternColor = texture2D(patternTexture, 6.0 * vUv);float visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;vec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;vec4 finalColor = edgeStrength * maskColor.r * edgeValue;if(usePatternTexture)finalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);gl_FragColor = finalColor;}",blending:AdditiveBlending,depthTest:false,depthWrite:false,transparent:true})}});OutlinePass.BlurDirectionX=new Vector2(1,0);OutlinePass.BlurDirectionY=new Vector2(0,1);export{EffectComposer,OrbitControls,OutlinePass,RenderPass,three_module as THREE};